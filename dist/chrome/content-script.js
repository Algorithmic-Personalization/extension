/*! For license information please see content-script.js.LICENSE.txt */
(()=>{var e,t,n={6751:(e,t,n)=>{"use strict";n.d(t,{Z:()=>re});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),i=Math.abs,o=String.fromCharCode,a=Object.assign;function s(e){return e.trim()}function l(e,t,n){return e.replace(t,n)}function u(e,t){return e.indexOf(t)}function c(e,t){return 0|e.charCodeAt(t)}function p(e,t,n){return e.slice(t,n)}function f(e){return e.length}function d(e){return e.length}function h(e,t){return t.push(e),e}var y=1,m=1,g=0,v=0,b=0,w="";function x(e,t,n,r,i,o,a){return{value:e,root:t,parent:n,type:r,props:i,children:o,line:y,column:m,length:a,return:""}}function E(e,t){return a(x("",null,null,"",null,null,0),e,{length:-e.length},t)}function S(){return b=v>0?c(w,--v):0,m--,10===b&&(m=1,y--),b}function M(){return b=v<g?c(w,v++):0,m++,10===b&&(m=1,y++),b}function k(){return c(w,v)}function O(){return v}function C(e,t){return p(w,e,t)}function T(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function _(e){return y=m=1,g=f(w=e),v=0,[]}function A(e){return w="",e}function P(e){return s(C(v-1,I(91===e?e+2:40===e?e+1:e)))}function N(e){for(;(b=k())&&b<33;)M();return T(e)>2||T(b)>3?"":" "}function R(e,t){for(;--t&&M()&&!(b<48||b>102||b>57&&b<65||b>70&&b<97););return C(e,O()+(t<6&&32==k()&&32==M()))}function I(e){for(;M();)switch(b){case e:return v;case 34:case 39:34!==e&&39!==e&&I(b);break;case 40:41===e&&I(e);break;case 92:M()}return v}function j(e,t){for(;M()&&e+b!==57&&(e+b!==84||47!==k()););return"/*"+C(t,v-1)+"*"+o(47===e?e:M())}function L(e){for(;!T(k());)M();return C(e,v)}var B="-ms-",$="-moz-",F="-webkit-",D="comm",U="rule",z="decl",V="@keyframes";function W(e,t){for(var n="",r=d(e),i=0;i<r;i++)n+=t(e[i],i,e,t)||"";return n}function q(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case z:return e.return=e.return||e.value;case D:return"";case V:return e.return=e.value+"{"+W(e.children,r)+"}";case U:e.value=e.props.join(",")}return f(n=W(e.children,r))?e.return=e.value+"{"+n+"}":""}function Q(e){return A(K("",null,null,null,[""],e=_(e),0,[0],e))}function K(e,t,n,r,i,a,s,p,d){for(var y=0,m=0,g=s,v=0,b=0,w=0,x=1,E=1,C=1,T=0,_="",A=i,I=a,B=r,$=_;E;)switch(w=T,T=M()){case 40:if(108!=w&&58==c($,g-1)){-1!=u($+=l(P(T),"&","&\f"),"&\f")&&(C=-1);break}case 34:case 39:case 91:$+=P(T);break;case 9:case 10:case 13:case 32:$+=N(w);break;case 92:$+=R(O()-1,7);continue;case 47:switch(k()){case 42:case 47:h(H(j(M(),O()),t,n),d);break;default:$+="/"}break;case 123*x:p[y++]=f($)*C;case 125*x:case 59:case 0:switch(T){case 0:case 125:E=0;case 59+m:-1==C&&($=l($,/\f/g,"")),b>0&&f($)-g&&h(b>32?G($+";",r,n,g-1):G(l($," ","")+";",r,n,g-2),d);break;case 59:$+=";";default:if(h(B=Z($,t,n,y,m,i,p,_,A=[],I=[],g),a),123===T)if(0===m)K($,t,B,B,A,a,g,p,I);else switch(99===v&&110===c($,3)?100:v){case 100:case 108:case 109:case 115:K(e,B,B,r&&h(Z(e,B,B,0,0,i,p,_,i,A=[],g),I),i,I,g,p,r?A:I);break;default:K($,B,B,B,[""],I,0,p,I)}}y=m=b=0,x=C=1,_=$="",g=s;break;case 58:g=1+f($),b=w;default:if(x<1)if(123==T)--x;else if(125==T&&0==x++&&125==S())continue;switch($+=o(T),T*x){case 38:C=m>0?1:($+="\f",-1);break;case 44:p[y++]=(f($)-1)*C,C=1;break;case 64:45===k()&&($+=P(M())),v=k(),m=g=f(_=$+=L(O())),T++;break;case 45:45===w&&2==f($)&&(x=0)}}return a}function Z(e,t,n,r,o,a,u,c,f,h,y){for(var m=o-1,g=0===o?a:[""],v=d(g),b=0,w=0,E=0;b<r;++b)for(var S=0,M=p(e,m+1,m=i(w=u[b])),k=e;S<v;++S)(k=s(w>0?g[S]+" "+M:l(M,/&\f/g,g[S])))&&(f[E++]=k);return x(e,t,n,0===o?U:c,f,h,y)}function H(e,t,n){return x(e,t,n,D,o(b),p(e,2,-2),0)}function G(e,t,n,r){return x(e,t,n,z,p(e,0,r),p(e,r+1,-1),r)}var J=function(e,t,n){for(var r=0,i=0;r=i,i=k(),38===r&&12===i&&(t[n]=1),!T(i);)M();return C(e,v)},Y=new WeakMap,X=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||Y.get(n))&&!r){Y.set(e,!0);for(var i=[],a=function(e,t){return A(function(e,t){var n=-1,r=44;do{switch(T(r)){case 0:38===r&&12===k()&&(t[n]=1),e[n]+=J(v-1,t,n);break;case 2:e[n]+=P(r);break;case 4:if(44===r){e[++n]=58===k()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=o(r)}}while(r=M());return e}(_(e),t))}(t,i),s=n.props,l=0,u=0;l<a.length;l++)for(var c=0;c<s.length;c++,u++)e.props[u]=i[l]?a[l].replace(/&\f/g,s[c]):s[c]+" "+a[l]}}},ee=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function te(e,t){switch(function(e,t){return 45^c(e,0)?(((t<<2^c(e,0))<<2^c(e,1))<<2^c(e,2))<<2^c(e,3):0}(e,t)){case 5103:return F+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return F+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return F+e+$+e+B+e+e;case 6828:case 4268:return F+e+B+e+e;case 6165:return F+e+B+"flex-"+e+e;case 5187:return F+e+l(e,/(\w+).+(:[^]+)/,F+"box-$1$2"+B+"flex-$1$2")+e;case 5443:return F+e+B+"flex-item-"+l(e,/flex-|-self/,"")+e;case 4675:return F+e+B+"flex-line-pack"+l(e,/align-content|flex-|-self/,"")+e;case 5548:return F+e+B+l(e,"shrink","negative")+e;case 5292:return F+e+B+l(e,"basis","preferred-size")+e;case 6060:return F+"box-"+l(e,"-grow","")+F+e+B+l(e,"grow","positive")+e;case 4554:return F+l(e,/([^-])(transform)/g,"$1"+F+"$2")+e;case 6187:return l(l(l(e,/(zoom-|grab)/,F+"$1"),/(image-set)/,F+"$1"),e,"")+e;case 5495:case 3959:return l(e,/(image-set\([^]*)/,F+"$1$`$1");case 4968:return l(l(e,/(.+:)(flex-)?(.*)/,F+"box-pack:$3"+B+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+F+e+e;case 4095:case 3583:case 4068:case 2532:return l(e,/(.+)-inline(.+)/,F+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(f(e)-1-t>6)switch(c(e,t+1)){case 109:if(45!==c(e,t+4))break;case 102:return l(e,/(.+:)(.+)-([^]+)/,"$1"+F+"$2-$3$1"+$+(108==c(e,t+3)?"$3":"$2-$3"))+e;case 115:return~u(e,"stretch")?te(l(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==c(e,t+1))break;case 6444:switch(c(e,f(e)-3-(~u(e,"!important")&&10))){case 107:return l(e,":",":"+F)+e;case 101:return l(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+F+(45===c(e,14)?"inline-":"")+"box$3$1"+F+"$2$3$1"+B+"$2box$3")+e}break;case 5936:switch(c(e,t+11)){case 114:return F+e+B+l(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return F+e+B+l(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return F+e+B+l(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return F+e+B+e+e}return e}var ne=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case z:e.return=te(e.value,e.length);break;case V:return W([E(e,{value:l(e.value,"@","@"+F)})],r);case U:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return W([E(e,{props:[l(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return W([E(e,{props:[l(t,/:(plac\w+)/,":"+F+"input-$1")]}),E(e,{props:[l(t,/:(plac\w+)/,":-moz-$1")]}),E(e,{props:[l(t,/:(plac\w+)/,B+"input-$1")]})],r)}return""}))}}],re=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var i,o,a=e.stylisPlugins||ne,s={},l=[];i=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)s[t[n]]=!0;l.push(e)}));var u,c,p,f,h=[q,(f=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&f(e)})],y=(c=[X,ee].concat(a,h),p=d(c),function(e,t,n,r){for(var i="",o=0;o<p;o++)i+=c[o](e,t,n,r)||"";return i});o=function(e,t,n,r){u=n,W(Q(e?e+"{"+t.styles+"}":t.styles),y),r&&(m.inserted[t.name]=!0)};var m={key:t,sheet:new r({key:t,container:i,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:s,registered:{},insert:o};return m.sheet.hydrate(l),m}},5042:(e,t,n)=>{"use strict";function r(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}n.d(t,{Z:()=>r})},6498:(e,t,n)=>{"use strict";n.d(t,{C:()=>s,T:()=>u,i:()=>o,w:()=>l});var r=n(7294),i=n(6751),o=(n(6797),n(7278),!0),a=r.createContext("undefined"!=typeof HTMLElement?(0,i.Z)({key:"css"}):null),s=a.Provider,l=function(e){return(0,r.forwardRef)((function(t,n){var i=(0,r.useContext)(a);return e(t,i,n)}))};o||(l=function(e){return function(t){var n=(0,r.useContext)(a);return null===n?(n=(0,i.Z)({key:"css"}),r.createElement(a.Provider,{value:n},e(t,n))):e(t,n)}});var u=r.createContext({})},917:(e,t,n)=>{"use strict";n.d(t,{F4:()=>c,iv:()=>u,xB:()=>l});var r=n(6498),i=n(7294),o=n(444),a=n(7278),s=n(6797),l=(n(6751),n(8679),(0,r.w)((function(e,t){var n=e.styles,l=(0,s.O)([n],void 0,i.useContext(r.T));if(!r.i){for(var u,c=l.name,p=l.styles,f=l.next;void 0!==f;)c+=" "+f.name,p+=f.styles,f=f.next;var d=!0===t.compat,h=t.insert("",{name:c,styles:p},t.sheet,d);return d?null:i.createElement("style",((u={})["data-emotion"]=t.key+"-global "+c,u.dangerouslySetInnerHTML={__html:h},u.nonce=t.sheet.nonce,u))}var y=i.useRef();return(0,a.j)((function(){var e=t.key+"-global",n=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),r=!1,i=document.querySelector('style[data-emotion="'+e+" "+l.name+'"]');return t.sheet.tags.length&&(n.before=t.sheet.tags[0]),null!==i&&(r=!0,i.setAttribute("data-emotion",e),n.hydrate([i])),y.current=[n,r],function(){n.flush()}}),[t]),(0,a.j)((function(){var e=y.current,n=e[0];if(e[1])e[1]=!1;else{if(void 0!==l.next&&(0,o.My)(t,l.next,!0),n.tags.length){var r=n.tags[n.tags.length-1].nextElementSibling;n.before=r,n.flush()}t.insert("",l,n,!1)}}),[t,l.name]),null})));function u(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,s.O)(t)}var c=function(){var e=u.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}},6797:(e,t,n)=>{"use strict";n.d(t,{O:()=>h});var r={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},i=n(5042),o=/[A-Z]|^ms/g,a=/_EMO_([^_]+?)_([^]*?)_EMO_/g,s=function(e){return 45===e.charCodeAt(1)},l=function(e){return null!=e&&"boolean"!=typeof e},u=(0,i.Z)((function(e){return s(e)?e:e.replace(o,"-$&").toLowerCase()})),c=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(a,(function(e,t,n){return f={name:t,styles:n,next:f},t}))}return 1===r[e]||s(e)||"number"!=typeof t||0===t?t:t+"px"};function p(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return f={name:n.name,styles:n.styles,next:f},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)f={name:r.name,styles:r.styles,next:f},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var i=0;i<n.length;i++)r+=p(e,t,n[i])+";";else for(var o in n){var a=n[o];if("object"!=typeof a)null!=t&&void 0!==t[a]?r+=o+"{"+t[a]+"}":l(a)&&(r+=u(o)+":"+c(o,a)+";");else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var s=p(e,t,a);switch(o){case"animation":case"animationName":r+=u(o)+":"+s+";";break;default:r+=o+"{"+s+"}"}}else for(var f=0;f<a.length;f++)l(a[f])&&(r+=u(o)+":"+c(o,a[f])+";")}return r}(e,t,n);case"function":if(void 0!==e){var i=f,o=n(e);return f=i,p(e,t,o)}}if(null==t)return n;var a=t[n];return void 0!==a?a:n}var f,d=/label:\s*([^\s;\n{]+)\s*(;|$)/g,h=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,i="";f=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,i+=p(n,t,o)):i+=o[0];for(var a=1;a<e.length;a++)i+=p(n,t,e[a]),r&&(i+=o[a]);d.lastIndex=0;for(var s,l="";null!==(s=d.exec(i));)l+="-"+s[1];var u=function(e){for(var t,n=0,r=0,i=e.length;i>=4;++r,i-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(i){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(i)+l;return{name:u,styles:i,next:f}}},7278:(e,t,n)=>{"use strict";var r;n.d(t,{L:()=>a,j:()=>s});var i=n(7294),o=!!(r||(r=n.t(i,2))).useInsertionEffect&&(r||(r=n.t(i,2))).useInsertionEffect,a=o||function(e){return e()},s=o||i.useLayoutEffect},444:(e,t,n)=>{"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}n.d(t,{My:()=>o,fp:()=>r,hC:()=>i});var i=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},o=function(e,t,n){i(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}}},6104:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.r(t),n.d(t,{GlobalStyles:()=>S,StyledEngineProvider:()=>E,ThemeContext:()=>l.T,css:()=>v.iv,default:()=>M,internal_processStyles:()=>k,keyframes:()=>v.F4});var i=n(7294),o=n(5042),a=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,s=(0,o.Z)((function(e){return a.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),l=n(6498),u=n(444),c=n(6797),p=n(7278),f=s,d=function(e){return"theme"!==e},h=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?f:d},y=function(e,t,n){var r;if(t){var i=t.shouldForwardProp;r=e.__emotion_forwardProp&&i?function(t){return e.__emotion_forwardProp(t)&&i(t)}:i}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},m=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return(0,u.hC)(t,n,r),(0,p.L)((function(){return(0,u.My)(t,n,r)})),null},g=function e(t,n){var o,a,s=t.__emotion_real===t,p=s&&t.__emotion_base||t;void 0!==n&&(o=n.label,a=n.target);var f=y(t,n,s),d=f||h(p),g=!d("as");return function(){var v=arguments,b=s&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==o&&b.push("label:"+o+";"),null==v[0]||void 0===v[0].raw)b.push.apply(b,v);else{b.push(v[0][0]);for(var w=v.length,x=1;x<w;x++)b.push(v[x],v[0][x])}var E=(0,l.w)((function(e,t,n){var r=g&&e.as||p,o="",s=[],y=e;if(null==e.theme){for(var v in y={},e)y[v]=e[v];y.theme=i.useContext(l.T)}"string"==typeof e.className?o=(0,u.fp)(t.registered,s,e.className):null!=e.className&&(o=e.className+" ");var w=(0,c.O)(b.concat(s),t.registered,y);o+=t.key+"-"+w.name,void 0!==a&&(o+=" "+a);var x=g&&void 0===f?h(r):d,E={};for(var S in e)g&&"as"===S||x(S)&&(E[S]=e[S]);return E.className=o,E.ref=n,i.createElement(i.Fragment,null,i.createElement(m,{cache:t,serialized:w,isStringTag:"string"==typeof r}),i.createElement(r,E))}));return E.displayName=void 0!==o?o:"Styled("+("string"==typeof p?p:p.displayName||p.name||"Component")+")",E.defaultProps=t.defaultProps,E.__emotion_real=E,E.__emotion_base=p,E.__emotion_styles=b,E.__emotion_forwardProp=f,Object.defineProperty(E,"toString",{value:function(){return"."+a}}),E.withComponent=function(t,i){return e(t,r({},n,i,{shouldForwardProp:y(E,i,!0)})).apply(void 0,b)},E}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){g[e]=g(e)}));var v=n(917),b=n(6751),w=n(5893);let x;function E(e){const{injectFirst:t,children:n}=e;return t&&x?(0,w.jsx)(l.C,{value:x,children:n}):n}function S(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,w.jsx)(v.xB,{styles:r})}function M(e,t){return g(e,t)}"object"==typeof document&&(x=(0,b.Z)({key:"css",prepend:!0}));const k=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))}},2101:(e,t,n)=>{"use strict";var r=n(4836);t.Fq=function(e,t){return e=s(e),t=a(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,l(e)},t._j=function(e,t){if(e=s(e),t=a(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return l(e)},t.mi=function(e,t){const n=u(e),r=u(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},t.$n=function(e,t){if(e=s(e),t=a(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return l(e)};var i=r(n(743)),o=r(n(1495));function a(e,t=0,n=1){return(0,o.default)(e,t,n)}function s(e){if(e.type)return e;if("#"===e.charAt(0))return s(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,i.default)(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error((0,i.default)(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}function l(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function u(e){let t="hsl"===(e=s(e)).type||"hsla"===e.type?s(function(e){e=s(e);const{values:t}=e,n=t[0],r=t[1]/100,i=t[2]/100,o=r*Math.min(i,1-i),a=(e,t=(e+n/30)%12)=>i-o*Math.max(Math.min(t-3,9-t,1),-1);let u="rgb";const c=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(u+="a",c.push(t[3])),l({type:u,values:c})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}},8128:(e,t,n)=>{"use strict";var r=n(4836);t.ZP=function(e={}){const{themeId:t,defaultTheme:n=y,rootShouldForwardProp:r=h,slotShouldForwardProp:l=h}=e,c=e=>(0,u.default)((0,i.default)({},e,{theme:g((0,i.default)({},e,{defaultTheme:n,themeId:t}))}));return c.__mui_systemSx=!0,(e,u={})=>{(0,a.internal_processStyles)(e,(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx)))));const{name:p,slot:d,skipVariantsResolver:y,skipSx:w,overridesResolver:x=v(m(d))}=u,E=(0,o.default)(u,f),S=void 0!==y?y:d&&"Root"!==d&&"root"!==d||!1,M=w||!1;let k=h;"Root"===d||"root"===d?k=r:d?k=l:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(k=void 0);const O=(0,a.default)(e,(0,i.default)({shouldForwardProp:k,label:void 0},E)),C=e=>"function"==typeof e&&e.__emotion_real!==e||(0,s.isPlainObject)(e)?r=>b(e,(0,i.default)({},r,{theme:g({theme:r.theme,defaultTheme:n,themeId:t})})):e,T=(r,...o)=>{let a=C(r);const s=o?o.map(C):[];p&&x&&s.push((e=>{const r=g((0,i.default)({},e,{defaultTheme:n,themeId:t}));if(!r.components||!r.components[p]||!r.components[p].styleOverrides)return null;const o=r.components[p].styleOverrides,a={};return Object.entries(o).forEach((([t,n])=>{a[t]=b(n,(0,i.default)({},e,{theme:r}))})),x(e,a)})),p&&!S&&s.push((e=>{var r;const o=g((0,i.default)({},e,{defaultTheme:n,themeId:t}));return b({variants:null==o||null==(r=o.components)||null==(r=r[p])?void 0:r.variants},(0,i.default)({},e,{theme:o}))})),M||s.push(c);const l=s.length-o.length;if(Array.isArray(r)&&l>0){const e=new Array(l).fill("");a=[...r,...e],a.raw=[...r.raw,...e]}const u=O(a,...s);return e.muiName&&(u.muiName=e.muiName),u};return O.withConfig&&(T.withConfig=O.withConfig),T}},t.x9=h;var i=r(n(434)),o=r(n(7071)),a=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=d(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var a=i?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(r,o,a):r[o]=e[o]}return r.default=e,n&&n.set(e,r),r}(n(6104)),s=n(211),l=(r(n(9698)),r(n(2240)),r(n(9926))),u=r(n(386));const c=["ownerState"],p=["variants"],f=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function d(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(d=function(e){return e?n:t})(e)}function h(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const y=(0,l.default)(),m=e=>e?e.charAt(0).toLowerCase()+e.slice(1):e;function g({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function v(e){return e?(t,n)=>n[e]:null}function b(e,t){let{ownerState:n}=t,r=(0,o.default)(t,c);const a="function"==typeof e?e((0,i.default)({ownerState:n},r)):e;if(Array.isArray(a))return a.flatMap((e=>b(e,(0,i.default)({ownerState:n},r))));if(a&&"object"==typeof a&&Array.isArray(a.variants)){const{variants:e=[]}=a;let t=(0,o.default)(a,p);return e.forEach((e=>{let o=!0;"function"==typeof e.props?o=e.props((0,i.default)({ownerState:n},r,n)):Object.keys(e.props).forEach((t=>{(null==n?void 0:n[t])!==e.props[t]&&r[t]!==e.props[t]&&(o=!1)})),o&&(Array.isArray(t)||(t=[t]),t.push("function"==typeof e.style?e.style((0,i.default)({ownerState:n},r,n)):e.style))})),t}return a}},5408:(e,t,n)=>{"use strict";n.d(t,{L7:()=>s,VO:()=>r,W8:()=>a,k9:()=>o});const r={xs:0,sm:600,md:900,lg:1200,xl:1536},i={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${r[e]}px)`};function o(e,t,n){const o=e.theme||{};if(Array.isArray(t)){const e=o.breakpoints||i;return t.reduce(((r,i,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=o.breakpoints||i;return Object.keys(t).reduce(((i,o)=>{if(-1!==Object.keys(e.values||r).indexOf(o))i[e.up(o)]=n(t[o],o);else{const e=o;i[e]=t[e]}return i}),{})}return n(t)}function a(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function s(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}},7064:(e,t,n)=>{"use strict";function r(e,t){const n=this;return n.vars&&"function"==typeof n.getColorSchemeSelector?{[n.getColorSchemeSelector(e).replace(/(\[[^\]]+\])/,"*:where($1)")]:t}:n.palette.mode===e?t:{}}n.d(t,{Z:()=>r})},1512:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(3366),i=n(7462);const o=["values","unit","step"];function a(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:a=5}=e,s=(0,r.Z)(e,o),l=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>(0,i.Z)({},e,{[t.key]:t.val})),{})})(t),u=Object.keys(l);function c(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function p(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-a/100}${n})`}function f(e,r){const i=u.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==i&&"number"==typeof t[u[i]]?t[u[i]]:r)-a/100}${n})`}return(0,i.Z)({keys:u,values:l,up:c,down:p,between:f,only:function(e){return u.indexOf(e)+1<u.length?f(e,u[u.indexOf(e)+1]):c(e)},not:function(e){const t=u.indexOf(e);return 0===t?c(u[1]):t===u.length-1?p(u[t]):f(e,u[u.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},s)}},7408:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var r=n(7462),i=n(3366),o=n(8027),a=n(1512);const s={borderRadius:4};var l=n(2605),u=n(6523),c=n(8010),p=n(7064);const f=["breakpoints","palette","spacing","shape"],d=function(e={},...t){const{breakpoints:n={},palette:d={},spacing:h,shape:y={}}=e,m=(0,i.Z)(e,f),g=(0,a.Z)(n),v=function(e=8){if(e.mui)return e;const t=(0,l.hB)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(h);let b=(0,o.Z)({breakpoints:g,direction:"ltr",components:{},palette:(0,r.Z)({mode:"light"},d),spacing:v,shape:(0,r.Z)({},s,y)},m);return b.applyStyles=p.Z,b=t.reduce(((e,t)=>(0,o.Z)(e,t)),b),b.unstable_sxConfig=(0,r.Z)({},c.Z,null==m?void 0:m.unstable_sxConfig),b.unstable_sx=function(e){return(0,u.Z)({sx:e,theme:this})},b}},9926:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.Z,private_createBreakpoints:()=>i.Z,unstable_applyStyles:()=>o.Z});var r=n(7408),i=n(1512),o=n(7064)},7730:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(8027);const i=function(e,t){return t?(0,r.Z)(e,t,{clone:!1}):e}},2605:(e,t,n)=>{"use strict";n.d(t,{hB:()=>h,eI:()=>d,NA:()=>y,e6:()=>g,o3:()=>v});var r=n(5408),i=n(4844),o=n(7730);const a={m:"margin",p:"padding"},s={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},l={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},u=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!l[e])return[e];e=l[e]}const[t,n]=e.split(""),r=a[t],i=s[n]||"";return Array.isArray(i)?i.map((e=>r+e)):[r+i]})(e)),t[e])}(),c=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],p=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],f=[...c,...p];function d(e,t,n,r){var o;const a=null!=(o=(0,i.DW)(e,t,!1))?o:n;return"number"==typeof a?e=>"string"==typeof e?e:a*e:Array.isArray(a)?e=>"string"==typeof e?e:a[e]:"function"==typeof a?a:()=>{}}function h(e){return d(e,"spacing",8)}function y(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function m(e,t){const n=h(e.theme);return Object.keys(e).map((i=>function(e,t,n,i){if(-1===t.indexOf(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=y(t,n),e)),{})}(u(n),i),a=e[n];return(0,r.k9)(e,a,o)}(e,t,i,n))).reduce(o.Z,{})}function g(e){return m(e,c)}function v(e){return m(e,p)}function b(e){return m(e,f)}g.propTypes={},g.filterProps=c,v.propTypes={},v.filterProps=p,b.propTypes={},b.filterProps=f},4844:(e,t,n)=>{"use strict";n.d(t,{DW:()=>o,Jq:()=>a,ZP:()=>s});var r=n(2908),i=n(5408);function o(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function a(e,t,n,r=n){let i;return i="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:o(e,n)||r,t&&(i=t(i,r,e)),i}const s=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:s,transform:l}=e,u=e=>{if(null==e[t])return null;const u=e[t],c=o(e.theme,s)||{};return(0,i.k9)(e,u,(e=>{let i=a(c,l,e);return e===i&&"string"==typeof e&&(i=a(c,l,`${t}${"default"===e?"":(0,r.Z)(e)}`,e)),!1===n?i:{[n]:i}}))};return u.propTypes={},u.filterProps=[t],u}},8010:(e,t,n)=>{"use strict";n.d(t,{Z:()=>I});var r=n(2605),i=n(4844),o=n(7730);const a=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,o.Z)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};var s=n(5408);function l(e){return"number"!=typeof e?e:`${e}px solid`}function u(e,t){return(0,i.ZP)({prop:e,themeKey:"borders",transform:t})}const c=u("border",l),p=u("borderTop",l),f=u("borderRight",l),d=u("borderBottom",l),h=u("borderLeft",l),y=u("borderColor"),m=u("borderTopColor"),g=u("borderRightColor"),v=u("borderBottomColor"),b=u("borderLeftColor"),w=u("outline",l),x=u("outlineColor"),E=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,r.eI)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,r.NA)(t,e)});return(0,s.k9)(e,e.borderRadius,n)}return null};E.propTypes={},E.filterProps=["borderRadius"],a(c,p,f,d,h,y,m,g,v,b,E,w,x);const S=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,r.eI)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,r.NA)(t,e)});return(0,s.k9)(e,e.gap,n)}return null};S.propTypes={},S.filterProps=["gap"];const M=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,r.eI)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,r.NA)(t,e)});return(0,s.k9)(e,e.columnGap,n)}return null};M.propTypes={},M.filterProps=["columnGap"];const k=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,r.eI)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,r.NA)(t,e)});return(0,s.k9)(e,e.rowGap,n)}return null};function O(e,t){return"grey"===t?t:e}function C(e){return e<=1&&0!==e?100*e+"%":e}k.propTypes={},k.filterProps=["rowGap"],a(S,M,k,(0,i.ZP)({prop:"gridColumn"}),(0,i.ZP)({prop:"gridRow"}),(0,i.ZP)({prop:"gridAutoFlow"}),(0,i.ZP)({prop:"gridAutoColumns"}),(0,i.ZP)({prop:"gridAutoRows"}),(0,i.ZP)({prop:"gridTemplateColumns"}),(0,i.ZP)({prop:"gridTemplateRows"}),(0,i.ZP)({prop:"gridTemplateAreas"}),(0,i.ZP)({prop:"gridArea"})),a((0,i.ZP)({prop:"color",themeKey:"palette",transform:O}),(0,i.ZP)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:O}),(0,i.ZP)({prop:"backgroundColor",themeKey:"palette",transform:O}));const T=(0,i.ZP)({prop:"width",transform:C}),_=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r;const i=(null==(n=e.theme)||null==(n=n.breakpoints)||null==(n=n.values)?void 0:n[t])||s.VO[t];return i?"px"!==(null==(r=e.theme)||null==(r=r.breakpoints)?void 0:r.unit)?{maxWidth:`${i}${e.theme.breakpoints.unit}`}:{maxWidth:i}:{maxWidth:C(t)}};return(0,s.k9)(e,e.maxWidth,t)}return null};_.filterProps=["maxWidth"];const A=(0,i.ZP)({prop:"minWidth",transform:C}),P=(0,i.ZP)({prop:"height",transform:C}),N=(0,i.ZP)({prop:"maxHeight",transform:C}),R=(0,i.ZP)({prop:"minHeight",transform:C}),I=((0,i.ZP)({prop:"size",cssProperty:"width",transform:C}),(0,i.ZP)({prop:"size",cssProperty:"height",transform:C}),a(T,_,A,P,N,R,(0,i.ZP)({prop:"boxSizing"})),{border:{themeKey:"borders",transform:l},borderTop:{themeKey:"borders",transform:l},borderRight:{themeKey:"borders",transform:l},borderBottom:{themeKey:"borders",transform:l},borderLeft:{themeKey:"borders",transform:l},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:l},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:E},color:{themeKey:"palette",transform:O},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:O},backgroundColor:{themeKey:"palette",transform:O},p:{style:r.o3},pt:{style:r.o3},pr:{style:r.o3},pb:{style:r.o3},pl:{style:r.o3},px:{style:r.o3},py:{style:r.o3},padding:{style:r.o3},paddingTop:{style:r.o3},paddingRight:{style:r.o3},paddingBottom:{style:r.o3},paddingLeft:{style:r.o3},paddingX:{style:r.o3},paddingY:{style:r.o3},paddingInline:{style:r.o3},paddingInlineStart:{style:r.o3},paddingInlineEnd:{style:r.o3},paddingBlock:{style:r.o3},paddingBlockStart:{style:r.o3},paddingBlockEnd:{style:r.o3},m:{style:r.e6},mt:{style:r.e6},mr:{style:r.e6},mb:{style:r.e6},ml:{style:r.e6},mx:{style:r.e6},my:{style:r.e6},margin:{style:r.e6},marginTop:{style:r.e6},marginRight:{style:r.e6},marginBottom:{style:r.e6},marginLeft:{style:r.e6},marginX:{style:r.e6},marginY:{style:r.e6},marginInline:{style:r.e6},marginInlineStart:{style:r.e6},marginInlineEnd:{style:r.e6},marginBlock:{style:r.e6},marginBlockStart:{style:r.e6},marginBlockEnd:{style:r.e6},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:S},rowGap:{style:k},columnGap:{style:M},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:C},maxWidth:{style:_},minWidth:{transform:C},height:{transform:C},maxHeight:{transform:C},minHeight:{transform:C},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}})},9707:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7462),i=n(3366),o=n(8027),a=n(8010);const s=["sx"];function l(e){const{sx:t}=e,n=(0,i.Z)(e,s),{systemProps:l,otherProps:u}=(e=>{var t,n;const r={systemProps:{},otherProps:{}},i=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:a.Z;return Object.keys(e).forEach((t=>{i[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r})(n);let c;return c=Array.isArray(t)?[l,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,o.P)(n)?(0,r.Z)({},l,n):l}:(0,r.Z)({},l,t),(0,r.Z)({},u,{sx:c})}},386:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.Z,extendSxProp:()=>i.Z,unstable_createStyleFunctionSx:()=>r.n,unstable_defaultSxConfig:()=>o.Z});var r=n(6523),i=n(9707),o=n(8010)},6523:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c,n:()=>l});var r=n(2908),i=n(7730),o=n(4844),a=n(5408),s=n(8010);function l(){function e(e,t,n,i){const s={[e]:t,theme:n},l=i[e];if(!l)return{[e]:t};const{cssProperty:u=e,themeKey:c,transform:p,style:f}=l;if(null==t)return null;if("typography"===c&&"inherit"===t)return{[e]:t};const d=(0,o.DW)(n,c)||{};return f?f(s):(0,a.k9)(s,t,(t=>{let n=(0,o.Jq)(d,p,t);return t===n&&"string"==typeof t&&(n=(0,o.Jq)(d,p,`${e}${"default"===t?"":(0,r.Z)(t)}`,t)),!1===u?n:{[u]:n}}))}return function t(n){var r;const{sx:o,theme:l={}}=n||{};if(!o)return null;const u=null!=(r=l.unstable_sxConfig)?r:s.Z;function c(n){let r=n;if("function"==typeof n)r=n(l);else if("object"!=typeof n)return n;if(!r)return null;const o=(0,a.W8)(l.breakpoints),s=Object.keys(o);let c=o;return Object.keys(r).forEach((n=>{const o="function"==typeof(s=r[n])?s(l):s;var s;if(null!=o)if("object"==typeof o)if(u[n])c=(0,i.Z)(c,e(n,o,l,u));else{const e=(0,a.k9)({theme:l},o,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,o)?c=(0,i.Z)(c,e):c[n]=t({sx:o,theme:l})}else c=(0,i.Z)(c,e(n,o,l,u))})),(0,a.L7)(s,c)}return Array.isArray(o)?o.map(c):c(o)}}const u=l();u.filterProps=["sx"];const c=u},2908:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(8758);function i(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},9698:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.Z});var r=n(2908)},1495:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r=function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))}},8027:(e,t,n)=>{"use strict";n.d(t,{P:()=>i,Z:()=>a});var r=n(7462);function i(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function o(e){if(!i(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=o(e[n])})),t}function a(e,t,n={clone:!0}){const s=n.clone?(0,r.Z)({},e):e;return i(e)&&i(t)&&Object.keys(t).forEach((r=>{"__proto__"!==r&&(i(t[r])&&r in e&&i(e[r])?s[r]=a(e[r],t[r],n):n.clone?s[r]=i(t[r])?o(t[r]):t[r]:s[r]=t[r])})),s}},211:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.Z,isPlainObject:()=>r.P});var r=n(8027)},8758:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:()=>r})},743:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.Z});var r=n(8758)},2240:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l,getFunctionName:()=>o});var r=n(9864);const i=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;function o(e){const t=`${e}`.match(i);return t&&t[1]||""}function a(e,t=""){return e.displayName||e.name||o(e)||t}function s(e,t,n){const r=a(t);return e.displayName||(""!==r?`${n}(${r})`:n)}function l(e){if(null!=e){if("string"==typeof e)return e;if("function"==typeof e)return a(e,"Component");if("object"==typeof e)switch(e.$$typeof){case r.ForwardRef:return s(e,e.render,"ForwardRef");case r.Memo:return s(e,e.type,"memo");default:return}}}},9742:(e,t)=>{"use strict";t.byteLength=function(e){var t=l(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,o=l(e),a=o[0],s=o[1],u=new i(function(e,t,n){return 3*(t+n)/4-n}(0,a,s)),c=0,p=s>0?a-4:a;for(n=0;n<p;n+=4)t=r[e.charCodeAt(n)]<<18|r[e.charCodeAt(n+1)]<<12|r[e.charCodeAt(n+2)]<<6|r[e.charCodeAt(n+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;return 2===s&&(t=r[e.charCodeAt(n)]<<2|r[e.charCodeAt(n+1)]>>4,u[c++]=255&t),1===s&&(t=r[e.charCodeAt(n)]<<10|r[e.charCodeAt(n+1)]<<4|r[e.charCodeAt(n+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t),u},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,o=[],a=16383,s=0,l=r-i;s<l;s+=a)o.push(u(e,s,s+a>l?l:s+a));return 1===i?(t=e[r-1],o.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[r-2]<<8)+e[r-1],o.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"=")),o.join("")};for(var n=[],r=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,s=o.length;a<s;++a)n[a]=o[a],r[o.charCodeAt(a)]=a;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,r){for(var i,o,a=[],s=t;s<r;s+=3)i=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return a.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},8764:(e,t,n)=>{"use strict";const r=n(9742),i=n(645),o="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=l,t.SlowBuffer=function(e){return+e!=e&&(e=0),l.alloc(+e)},t.INSPECT_MAX_BYTES=50;const a=2147483647;function s(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,l.prototype),t}function l(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return p(e)}return u(e,t,n)}function u(e,t,n){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!l.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|y(e,t);let r=s(n);const i=r.write(e,t);return i!==n&&(r=r.slice(0,i)),r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(H(e,Uint8Array)){const t=new Uint8Array(e);return d(t.buffer,t.byteOffset,t.byteLength)}return f(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(H(e,ArrayBuffer)||e&&H(e.buffer,ArrayBuffer))return d(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(H(e,SharedArrayBuffer)||e&&H(e.buffer,SharedArrayBuffer)))return d(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return l.from(r,t,n);const i=function(e){if(l.isBuffer(e)){const t=0|h(e.length),n=s(t);return 0===n.length||e.copy(n,0,0,t),n}return void 0!==e.length?"number"!=typeof e.length||G(e.length)?s(0):f(e):"Buffer"===e.type&&Array.isArray(e.data)?f(e.data):void 0}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return l.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function p(e){return c(e),s(e<0?0:0|h(e))}function f(e){const t=e.length<0?0:0|h(e.length),n=s(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function d(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,l.prototype),r}function h(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|e}function y(e,t){if(l.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||H(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Q(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return K(e).length;default:if(i)return r?-1:Q(e).length;t=(""+t).toLowerCase(),i=!0}}function m(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return A(this,t,n);case"utf8":case"utf-8":return O(this,t,n);case"ascii":return T(this,t,n);case"latin1":case"binary":return _(this,t,n);case"base64":return k(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function g(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function v(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),G(n=+n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=l.from(t,r)),l.isBuffer(t))return 0===t.length?-1:b(e,t,n,r,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):b(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function b(e,t,n,r,i){let o,a=1,s=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,l/=2,n/=2}function u(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){let r=-1;for(o=n;o<s;o++)if(u(e,o)===u(t,-1===r?0:o-r)){if(-1===r&&(r=o),o-r+1===l)return r*a}else-1!==r&&(o-=o-r),r=-1}else for(n+l>s&&(n=s-l),o=n;o>=0;o--){let n=!0;for(let r=0;r<l;r++)if(u(e,o+r)!==u(t,r)){n=!1;break}if(n)return o}return-1}function w(e,t,n,r){n=Number(n)||0;const i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;const o=t.length;let a;for(r>o/2&&(r=o/2),a=0;a<r;++a){const r=parseInt(t.substr(2*a,2),16);if(G(r))return a;e[n+a]=r}return a}function x(e,t,n,r){return Z(Q(t,e.length-n),e,n,r)}function E(e,t,n,r){return Z(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function S(e,t,n,r){return Z(K(t),e,n,r)}function M(e,t,n,r){return Z(function(e,t){let n,r,i;const o=[];for(let a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function k(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function O(e,t,n){n=Math.min(e.length,n);const r=[];let i=t;for(;i<n;){const t=e[i];let o=null,a=t>239?4:t>223?3:t>191?2:1;if(i+a<=n){let n,r,s,l;switch(a){case 1:t<128&&(o=t);break;case 2:n=e[i+1],128==(192&n)&&(l=(31&t)<<6|63&n,l>127&&(o=l));break;case 3:n=e[i+1],r=e[i+2],128==(192&n)&&128==(192&r)&&(l=(15&t)<<12|(63&n)<<6|63&r,l>2047&&(l<55296||l>57343)&&(o=l));break;case 4:n=e[i+1],r=e[i+2],s=e[i+3],128==(192&n)&&128==(192&r)&&128==(192&s)&&(l=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&s,l>65535&&l<1114112&&(o=l))}}null===o?(o=65533,a=1):o>65535&&(o-=65536,r.push(o>>>10&1023|55296),o=56320|1023&o),r.push(o),i+=a}return function(e){const t=e.length;if(t<=C)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=C));return n}(r)}t.kMaxLength=a,l.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),l.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(l.prototype,"parent",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.buffer}}),Object.defineProperty(l.prototype,"offset",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.byteOffset}}),l.poolSize=8192,l.from=function(e,t,n){return u(e,t,n)},Object.setPrototypeOf(l.prototype,Uint8Array.prototype),Object.setPrototypeOf(l,Uint8Array),l.alloc=function(e,t,n){return function(e,t,n){return c(e),e<=0?s(e):void 0!==t?"string"==typeof n?s(e).fill(t,n):s(e).fill(t):s(e)}(e,t,n)},l.allocUnsafe=function(e){return p(e)},l.allocUnsafeSlow=function(e){return p(e)},l.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==l.prototype},l.compare=function(e,t){if(H(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),H(t,Uint8Array)&&(t=l.from(t,t.offset,t.byteLength)),!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const r=l.allocUnsafe(t);let i=0;for(n=0;n<e.length;++n){let t=e[n];if(H(t,Uint8Array))i+t.length>r.length?(l.isBuffer(t)||(t=l.from(t)),t.copy(r,i)):Uint8Array.prototype.set.call(r,t,i);else{if(!l.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(r,i)}i+=t.length}return r},l.byteLength=y,l.prototype._isBuffer=!0,l.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)g(this,t,t+1);return this},l.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},l.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},l.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?O(this,0,e):m.apply(this,arguments)},l.prototype.toLocaleString=l.prototype.toString,l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){let e="";const n=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(e+=" ... "),"<Buffer "+e+">"},o&&(l.prototype[o]=l.prototype.inspect),l.prototype.compare=function(e,t,n,r,i){if(H(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),!l.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(this===e)return 0;let o=(i>>>=0)-(r>>>=0),a=(n>>>=0)-(t>>>=0);const s=Math.min(o,a),u=this.slice(r,i),c=e.slice(t,n);for(let e=0;e<s;++e)if(u[e]!==c[e]){o=u[e],a=c[e];break}return o<a?-1:a<o?1:0},l.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},l.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},l.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},l.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let o=!1;for(;;)switch(r){case"hex":return w(this,e,t,n);case"utf8":case"utf-8":return x(this,e,t,n);case"ascii":case"latin1":case"binary":return E(this,e,t,n);case"base64":return S(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const C=4096;function T(e,t,n){let r="";n=Math.min(e.length,n);for(let i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function _(e,t,n){let r="";n=Math.min(e.length,n);for(let i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function A(e,t,n){const r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let i="";for(let r=t;r<n;++r)i+=J[e[r]];return i}function P(e,t,n){const r=e.slice(t,n);let i="";for(let e=0;e<r.length-1;e+=2)i+=String.fromCharCode(r[e]+256*r[e+1]);return i}function N(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function R(e,t,n,r,i,o){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function I(e,t,n,r,i){z(t,r,i,e,n,7);let o=Number(t&BigInt(4294967295));e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,n}function j(e,t,n,r,i){z(t,r,i,e,n,7);let o=Number(t&BigInt(4294967295));e[n+7]=o,o>>=8,e[n+6]=o,o>>=8,e[n+5]=o,o>>=8,e[n+4]=o;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=a,a>>=8,e[n+2]=a,a>>=8,e[n+1]=a,a>>=8,e[n]=a,n+8}function L(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function B(e,t,n,r,o){return t=+t,n>>>=0,o||L(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function $(e,t,n,r,o){return t=+t,n>>>=0,o||L(e,0,n,8),i.write(e,t,n,r,52,8),n+8}l.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const r=this.subarray(e,t);return Object.setPrototypeOf(r,l.prototype),r},l.prototype.readUintLE=l.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||N(e,t,this.length);let r=this[e],i=1,o=0;for(;++o<t&&(i*=256);)r+=this[e+o]*i;return r},l.prototype.readUintBE=l.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||N(e,t,this.length);let r=this[e+--t],i=1;for(;t>0&&(i*=256);)r+=this[e+--t]*i;return r},l.prototype.readUint8=l.prototype.readUInt8=function(e,t){return e>>>=0,t||N(e,1,this.length),this[e]},l.prototype.readUint16LE=l.prototype.readUInt16LE=function(e,t){return e>>>=0,t||N(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUint16BE=l.prototype.readUInt16BE=function(e,t){return e>>>=0,t||N(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUint32LE=l.prototype.readUInt32LE=function(e,t){return e>>>=0,t||N(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUint32BE=l.prototype.readUInt32BE=function(e,t){return e>>>=0,t||N(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readBigUInt64LE=Y((function(e){V(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||W(e,this.length-8);const r=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(r)+(BigInt(i)<<BigInt(32))})),l.prototype.readBigUInt64BE=Y((function(e){V(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||W(e,this.length-8);const r=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(i)})),l.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||N(e,t,this.length);let r=this[e],i=1,o=0;for(;++o<t&&(i*=256);)r+=this[e+o]*i;return i*=128,r>=i&&(r-=Math.pow(2,8*t)),r},l.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||N(e,t,this.length);let r=t,i=1,o=this[e+--r];for(;r>0&&(i*=256);)o+=this[e+--r]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*t)),o},l.prototype.readInt8=function(e,t){return e>>>=0,t||N(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){e>>>=0,t||N(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt16BE=function(e,t){e>>>=0,t||N(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt32LE=function(e,t){return e>>>=0,t||N(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return e>>>=0,t||N(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readBigInt64LE=Y((function(e){V(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||W(e,this.length-8);const r=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),l.prototype.readBigInt64BE=Y((function(e){V(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||W(e,this.length-8);const r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),l.prototype.readFloatLE=function(e,t){return e>>>=0,t||N(e,4,this.length),i.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return e>>>=0,t||N(e,4,this.length),i.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return e>>>=0,t||N(e,8,this.length),i.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return e>>>=0,t||N(e,8,this.length),i.read(this,e,!1,52,8)},l.prototype.writeUintLE=l.prototype.writeUIntLE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||R(this,e,t,n,Math.pow(2,8*n)-1,0);let i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},l.prototype.writeUintBE=l.prototype.writeUIntBE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||R(this,e,t,n,Math.pow(2,8*n)-1,0);let i=n-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+n},l.prototype.writeUint8=l.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||R(this,e,t,1,255,0),this[t]=255&e,t+1},l.prototype.writeUint16LE=l.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||R(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeUint16BE=l.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||R(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeUint32LE=l.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||R(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},l.prototype.writeUint32BE=l.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||R(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigUInt64LE=Y((function(e,t=0){return I(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeBigUInt64BE=Y((function(e,t=0){return j(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);R(this,e,t,n,r-1,-r)}let i=0,o=1,a=0;for(this[t]=255&e;++i<n&&(o*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/o>>0)-a&255;return t+n},l.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);R(this,e,t,n,r-1,-r)}let i=n-1,o=1,a=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/o>>0)-a&255;return t+n},l.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||R(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||R(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||R(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||R(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},l.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||R(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigInt64LE=Y((function(e,t=0){return I(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeBigInt64BE=Y((function(e,t=0){return j(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeFloatLE=function(e,t,n){return B(this,e,t,!0,n)},l.prototype.writeFloatBE=function(e,t,n){return B(this,e,t,!1,n)},l.prototype.writeDoubleLE=function(e,t,n){return $(this,e,t,!0,n)},l.prototype.writeDoubleBE=function(e,t,n){return $(this,e,t,!1,n)},l.prototype.copy=function(e,t,n,r){if(!l.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);const i=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),i},l.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!l.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){const t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{const o=l.isBuffer(e)?e:l.from(e,r),a=o.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<n-t;++i)this[i+t]=o[i%a]}return this};const F={};function D(e,t,n){F[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function U(e){let t="",n=e.length;const r="-"===e[0]?1:0;for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function z(e,t,n,r,i,o){if(e>n||e<t){const r="bigint"==typeof t?"n":"";let i;throw i=o>3?0===t||t===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(o+1)}${r}`:`>= -(2${r} ** ${8*(o+1)-1}${r}) and < 2 ** ${8*(o+1)-1}${r}`:`>= ${t}${r} and <= ${n}${r}`,new F.ERR_OUT_OF_RANGE("value",i,e)}!function(e,t,n){V(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||W(t,e.length-(n+1))}(r,i,o)}function V(e,t){if("number"!=typeof e)throw new F.ERR_INVALID_ARG_TYPE(t,"number",e)}function W(e,t,n){if(Math.floor(e)!==e)throw V(e,n),new F.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new F.ERR_BUFFER_OUT_OF_BOUNDS;throw new F.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}D("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),D("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),D("ERR_OUT_OF_RANGE",(function(e,t,n){let r=`The value of "${e}" is out of range.`,i=n;return Number.isInteger(n)&&Math.abs(n)>2**32?i=U(String(n)):"bigint"==typeof n&&(i=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(i=U(i)),i+="n"),r+=` It must be ${t}. Received ${i}`,r}),RangeError);const q=/[^+/0-9A-Za-z-_]/g;function Q(e,t){let n;t=t||1/0;const r=e.length;let i=null;const o=[];for(let a=0;a<r;++a){if(n=e.charCodeAt(a),n>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function K(e){return r.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(q,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Z(e,t,n,r){let i;for(i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}function H(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function G(e){return e!=e}const J=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let i=0;i<16;++i)t[r+i]=e[n]+e[i]}return t}();function Y(e){return"undefined"==typeof BigInt?X:e}function X(){throw new Error("BigInt not supported")}},1227:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))})),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(2447)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},2447:(e,t,n)=>{e.exports=function(e){function t(e){let n,i,o,a=null;function s(...e){if(!s.enabled)return;const r=s,i=Number(new Date),o=i-(n||i);r.diff=o,r.prev=n,r.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";a++;const o=t.formatters[i];if("function"==typeof o){const t=e[a];n=o.call(r,t),e.splice(a,1),a--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return s.namespace=e,s.useColors=t.useColors(),s.color=t.selectColor(e),s.extend=r,s.destroy=t.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(i!==t.namespaces&&(i=t.namespaces,o=t.enabled(e)),o),set:e=>{a=e}}),"function"==typeof t.init&&t.init(s),s}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},8679:(e,t,n)=>{"use strict";var r=n(1296),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||i}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var u=Object.defineProperty,c=Object.getOwnPropertyNames,p=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=d(n);i&&i!==h&&e(t,i,r)}var a=c(n);p&&(a=a.concat(p(n)));for(var s=l(t),y=l(n),m=0;m<a.length;++m){var g=a[m];if(!(o[g]||r&&r[g]||y&&y[g]||s&&s[g])){var v=f(n,g);try{u(t,g,v)}catch(e){}}}}return t}},6103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,p=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,y=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case p:case o:case s:case a:case d:return e;default:switch(e=e&&e.$$typeof){case u:case f:case m:case y:case l:return e;default:return t}}case i:return t}}}function E(e){return x(e)===p}t.AsyncMode=c,t.ConcurrentMode=p,t.ContextConsumer=u,t.ContextProvider=l,t.Element=r,t.ForwardRef=f,t.Fragment=o,t.Lazy=m,t.Memo=y,t.Portal=i,t.Profiler=s,t.StrictMode=a,t.Suspense=d,t.isAsyncMode=function(e){return E(e)||x(e)===c},t.isConcurrentMode=E,t.isContextConsumer=function(e){return x(e)===u},t.isContextProvider=function(e){return x(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===f},t.isFragment=function(e){return x(e)===o},t.isLazy=function(e){return x(e)===m},t.isMemo=function(e){return x(e)===y},t.isPortal=function(e){return x(e)===i},t.isProfiler=function(e){return x(e)===s},t.isStrictMode=function(e){return x(e)===a},t.isSuspense=function(e){return x(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===p||e===s||e===a||e===d||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===y||e.$$typeof===l||e.$$typeof===u||e.$$typeof===f||e.$$typeof===v||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=x},1296:(e,t,n)=>{"use strict";e.exports=n(6103)},645:(e,t)=>{t.read=function(e,t,n,r,i){var o,a,s=8*i-r-1,l=(1<<s)-1,u=l>>1,c=-7,p=n?i-1:0,f=n?-1:1,d=e[t+p];for(p+=f,o=d&(1<<-c)-1,d>>=-c,c+=s;c>0;o=256*o+e[t+p],p+=f,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=r;c>0;a=256*a+e[t+p],p+=f,c-=8);if(0===o)o=1-u;else{if(o===l)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),o-=u}return(d?-1:1)*a*Math.pow(2,o-r)},t.write=function(e,t,n,r,i,o){var a,s,l,u=8*o-i-1,c=(1<<u)-1,p=c>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,h=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-a))<1&&(a--,l*=2),(t+=a+p>=1?f/l:f*Math.pow(2,1-p))*l>=2&&(a++,l/=2),a+p>=c?(s=0,a=c):a+p>=1?(s=(t*l-1)*Math.pow(2,i),a+=p):(s=t*Math.pow(2,p-1)*Math.pow(2,i),a=0));i>=8;e[n+d]=255&s,d+=h,s/=256,i-=8);for(a=a<<i|s,u+=i;u>0;e[n+d]=255&a,d+=h,a/=256,u-=8);e[n+d-h]|=128*y}},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},6961:(e,t,n)=>{var r,i=function(){var e=String.fromCharCode,t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",r={};function i(e,t){if(!r[e]){r[e]={};for(var n=0;n<e.length;n++)r[e][e.charAt(n)]=n}return r[e][t]}var o={compressToBase64:function(e){if(null==e)return"";var n=o._compress(e,6,(function(e){return t.charAt(e)}));switch(n.length%4){default:case 0:return n;case 1:return n+"===";case 2:return n+"==";case 3:return n+"="}},decompressFromBase64:function(e){return null==e?"":""==e?null:o._decompress(e.length,32,(function(n){return i(t,e.charAt(n))}))},compressToUTF16:function(t){return null==t?"":o._compress(t,15,(function(t){return e(t+32)}))+" "},decompressFromUTF16:function(e){return null==e?"":""==e?null:o._decompress(e.length,16384,(function(t){return e.charCodeAt(t)-32}))},compressToUint8Array:function(e){for(var t=o.compress(e),n=new Uint8Array(2*t.length),r=0,i=t.length;r<i;r++){var a=t.charCodeAt(r);n[2*r]=a>>>8,n[2*r+1]=a%256}return n},decompressFromUint8Array:function(t){if(null==t)return o.decompress(t);for(var n=new Array(t.length/2),r=0,i=n.length;r<i;r++)n[r]=256*t[2*r]+t[2*r+1];var a=[];return n.forEach((function(t){a.push(e(t))})),o.decompress(a.join(""))},compressToEncodedURIComponent:function(e){return null==e?"":o._compress(e,6,(function(e){return n.charAt(e)}))},decompressFromEncodedURIComponent:function(e){return null==e?"":""==e?null:(e=e.replace(/ /g,"+"),o._decompress(e.length,32,(function(t){return i(n,e.charAt(t))})))},compress:function(t){return o._compress(t,16,(function(t){return e(t)}))},_compress:function(e,t,n){if(null==e)return"";var r,i,o,a={},s={},l="",u="",c="",p=2,f=3,d=2,h=[],y=0,m=0;for(o=0;o<e.length;o+=1)if(l=e.charAt(o),Object.prototype.hasOwnProperty.call(a,l)||(a[l]=f++,s[l]=!0),u=c+l,Object.prototype.hasOwnProperty.call(a,u))c=u;else{if(Object.prototype.hasOwnProperty.call(s,c)){if(c.charCodeAt(0)<256){for(r=0;r<d;r++)y<<=1,m==t-1?(m=0,h.push(n(y)),y=0):m++;for(i=c.charCodeAt(0),r=0;r<8;r++)y=y<<1|1&i,m==t-1?(m=0,h.push(n(y)),y=0):m++,i>>=1}else{for(i=1,r=0;r<d;r++)y=y<<1|i,m==t-1?(m=0,h.push(n(y)),y=0):m++,i=0;for(i=c.charCodeAt(0),r=0;r<16;r++)y=y<<1|1&i,m==t-1?(m=0,h.push(n(y)),y=0):m++,i>>=1}0==--p&&(p=Math.pow(2,d),d++),delete s[c]}else for(i=a[c],r=0;r<d;r++)y=y<<1|1&i,m==t-1?(m=0,h.push(n(y)),y=0):m++,i>>=1;0==--p&&(p=Math.pow(2,d),d++),a[u]=f++,c=String(l)}if(""!==c){if(Object.prototype.hasOwnProperty.call(s,c)){if(c.charCodeAt(0)<256){for(r=0;r<d;r++)y<<=1,m==t-1?(m=0,h.push(n(y)),y=0):m++;for(i=c.charCodeAt(0),r=0;r<8;r++)y=y<<1|1&i,m==t-1?(m=0,h.push(n(y)),y=0):m++,i>>=1}else{for(i=1,r=0;r<d;r++)y=y<<1|i,m==t-1?(m=0,h.push(n(y)),y=0):m++,i=0;for(i=c.charCodeAt(0),r=0;r<16;r++)y=y<<1|1&i,m==t-1?(m=0,h.push(n(y)),y=0):m++,i>>=1}0==--p&&(p=Math.pow(2,d),d++),delete s[c]}else for(i=a[c],r=0;r<d;r++)y=y<<1|1&i,m==t-1?(m=0,h.push(n(y)),y=0):m++,i>>=1;0==--p&&(p=Math.pow(2,d),d++)}for(i=2,r=0;r<d;r++)y=y<<1|1&i,m==t-1?(m=0,h.push(n(y)),y=0):m++,i>>=1;for(;;){if(y<<=1,m==t-1){h.push(n(y));break}m++}return h.join("")},decompress:function(e){return null==e?"":""==e?null:o._decompress(e.length,32768,(function(t){return e.charCodeAt(t)}))},_decompress:function(t,n,r){var i,o,a,s,l,u,c,p=[],f=4,d=4,h=3,y="",m=[],g={val:r(0),position:n,index:1};for(i=0;i<3;i+=1)p[i]=i;for(a=0,l=Math.pow(2,2),u=1;u!=l;)s=g.val&g.position,g.position>>=1,0==g.position&&(g.position=n,g.val=r(g.index++)),a|=(s>0?1:0)*u,u<<=1;switch(a){case 0:for(a=0,l=Math.pow(2,8),u=1;u!=l;)s=g.val&g.position,g.position>>=1,0==g.position&&(g.position=n,g.val=r(g.index++)),a|=(s>0?1:0)*u,u<<=1;c=e(a);break;case 1:for(a=0,l=Math.pow(2,16),u=1;u!=l;)s=g.val&g.position,g.position>>=1,0==g.position&&(g.position=n,g.val=r(g.index++)),a|=(s>0?1:0)*u,u<<=1;c=e(a);break;case 2:return""}for(p[3]=c,o=c,m.push(c);;){if(g.index>t)return"";for(a=0,l=Math.pow(2,h),u=1;u!=l;)s=g.val&g.position,g.position>>=1,0==g.position&&(g.position=n,g.val=r(g.index++)),a|=(s>0?1:0)*u,u<<=1;switch(c=a){case 0:for(a=0,l=Math.pow(2,8),u=1;u!=l;)s=g.val&g.position,g.position>>=1,0==g.position&&(g.position=n,g.val=r(g.index++)),a|=(s>0?1:0)*u,u<<=1;p[d++]=e(a),c=d-1,f--;break;case 1:for(a=0,l=Math.pow(2,16),u=1;u!=l;)s=g.val&g.position,g.position>>=1,0==g.position&&(g.position=n,g.val=r(g.index++)),a|=(s>0?1:0)*u,u<<=1;p[d++]=e(a),c=d-1,f--;break;case 2:return m.join("")}if(0==f&&(f=Math.pow(2,h),h++),p[c])y=p[c];else{if(c!==d)return null;y=o+o.charAt(0)}m.push(y),p[d++]=o+y.charAt(0),o=y,0==--f&&(f=Math.pow(2,h),h++)}}};return o}();void 0===(r=function(){return i}.call(t,n,t,e))||(e.exports=r)},7824:e=>{var t=1e3,n=60*t,r=60*n,i=24*r;function o(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,a){a=a||{};var s,l,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(o){var a=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return 6048e5*a;case"days":case"day":case"d":return a*i;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===u&&isFinite(e))return a.long?(s=e,(l=Math.abs(s))>=i?o(s,l,i,"day"):l>=r?o(s,l,r,"hour"):l>=n?o(s,l,n,"minute"):l>=t?o(s,l,t,"second"):s+" ms"):function(e){var o=Math.abs(e);return o>=i?Math.round(e/i)+"d":o>=r?Math.round(e/r)+"h":o>=n?Math.round(e/n)+"m":o>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},4448:(e,t,n)=>{"use strict";var r=n(7294),i=n(3840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(s[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),p=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d={},h={};function y(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new y(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new y(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new y(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new y(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new y(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new y(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,t,n,r){var i=m.hasOwnProperty(t)?m[t]:null;(null!==i?0!==i.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!p.call(h,e)||!p.call(d,e)&&(f.test(e)?h[e]=!0:(d[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,v);m[t]=new y(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,v);m[t]=new y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,v);m[t]=new y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),E=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),M=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),O=Symbol.for("react.provider"),C=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),_=Symbol.for("react.suspense"),A=Symbol.for("react.suspense_list"),P=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var I=Symbol.iterator;function j(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=I&&e[I]||e["@@iterator"])?e:null}var L,B=Object.assign;function $(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var F=!1;function D(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s]){var l="\n"+i[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=s);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function U(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return D(e.type,!1);case 11:return D(e.type.render,!1);case 1:return D(e.type,!0);default:return""}}function z(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case E:return"Portal";case k:return"Profiler";case M:return"StrictMode";case _:return"Suspense";case A:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case P:return null!==(t=e.displayName||null)?t:z(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return z(e(t))}catch(e){}}return null}function V(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return z(t);case 8:return t===M?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function H(e,t){var n=t.checked;return B({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function G(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function J(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Y(e,t){J(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function X(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return B({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function oe(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,pe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var de={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ye(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||de.hasOwnProperty(e)&&de[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=ye(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(de).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),de[t]=de[e]}))}));var ge=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Se=null,Me=null;function ke(e){if(e=bi(e)){if("function"!=typeof Ee)throw Error(o(280));var t=e.stateNode;t&&(t=xi(t),Ee(e.stateNode,e.type,t))}}function Oe(e){Se?Me?Me.push(e):Me=[e]:Se=e}function Ce(){if(Se){var e=Se,t=Me;if(Me=Se=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function Te(e,t){return e(t)}function _e(){}var Ae=!1;function Pe(e,t,n){if(Ae)return e(t,n);Ae=!0;try{return Te(e,t,n)}finally{Ae=!1,(null!==Se||null!==Me)&&(_e(),Ce())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=xi(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Re=!1;if(c)try{var Ie={};Object.defineProperty(Ie,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Ie,Ie),window.removeEventListener("test",Ie,Ie)}catch(ce){Re=!1}function je(e,t,n,r,i,o,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Le=!1,Be=null,$e=!1,Fe=null,De={onError:function(e){Le=!0,Be=e}};function Ue(e,t,n,r,i,o,a,s,l){Le=!1,Be=null,je.apply(De,arguments)}function ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ve(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(ze(e)!==e)throw Error(o(188))}function qe(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=ze(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return We(i),e;if(a===r)return We(i),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=a;break}if(l===r){s=!0,r=i,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,r=i;break}if(l===r){s=!0,r=a,n=i;break}l=l.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Qe(e):null}function Qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Qe(e);if(null!==t)return t;e=e.sibling}return null}var Ke=i.unstable_scheduleCallback,Ze=i.unstable_cancelCallback,He=i.unstable_shouldYield,Ge=i.unstable_requestPaint,Je=i.unstable_now,Ye=i.unstable_getCurrentPriorityLevel,Xe=i.unstable_ImmediatePriority,et=i.unstable_UserBlockingPriority,tt=i.unstable_NormalPriority,nt=i.unstable_LowPriority,rt=i.unstable_IdlePriority,it=null,ot=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ut=64,ct=4194304;function pt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,i=e.suspendedLanes,o=e.pingedLanes,a=268435455&n;if(0!==a){var s=a&~i;0!==s?r=pt(s):0!=(o&=a)&&(r=pt(o))}else 0!=(a=n&~i)?r=pt(a):0!==o&&(r=pt(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&i)&&((i=r&-r)>=(o=t&-t)||16===i&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-at(t)),r|=e[n],t&=~i;return r}function dt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function yt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,Et,St,Mt,kt,Ot=!1,Ct=[],Tt=null,_t=null,At=null,Pt=new Map,Nt=new Map,Rt=[],It="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function jt(e,t){switch(e){case"focusin":case"focusout":Tt=null;break;case"dragenter":case"dragleave":_t=null;break;case"mouseover":case"mouseout":At=null;break;case"pointerover":case"pointerout":Pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function Lt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},null!==t&&null!==(t=bi(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function Bt(e){var t=vi(e.target);if(null!==t){var n=ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ve(n)))return e.blockedOn=t,void kt(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function $t(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Ht(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=bi(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){$t(e)&&n.delete(t)}function Dt(){Ot=!1,null!==Tt&&$t(Tt)&&(Tt=null),null!==_t&&$t(_t)&&(_t=null),null!==At&&$t(At)&&(At=null),Pt.forEach(Ft),Nt.forEach(Ft)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Ot||(Ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Dt)))}function zt(e){function t(t){return Ut(t,e)}if(0<Ct.length){Ut(Ct[0],e);for(var n=1;n<Ct.length;n++){var r=Ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Tt&&Ut(Tt,e),null!==_t&&Ut(_t,e),null!==At&&Ut(At,e),Pt.forEach(t),Nt.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)Bt(n),null===n.blockedOn&&Rt.shift()}var Vt=w.ReactCurrentBatchConfig,Wt=!0;function qt(e,t,n,r){var i=bt,o=Vt.transition;Vt.transition=null;try{bt=1,Kt(e,t,n,r)}finally{bt=i,Vt.transition=o}}function Qt(e,t,n,r){var i=bt,o=Vt.transition;Vt.transition=null;try{bt=4,Kt(e,t,n,r)}finally{bt=i,Vt.transition=o}}function Kt(e,t,n,r){if(Wt){var i=Ht(e,t,n,r);if(null===i)Wr(e,t,r,Zt,n),jt(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return Tt=Lt(Tt,e,t,n,r,i),!0;case"dragenter":return _t=Lt(_t,e,t,n,r,i),!0;case"mouseover":return At=Lt(At,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return Pt.set(o,Lt(Pt.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,Nt.set(o,Lt(Nt.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(jt(e,r),4&t&&-1<It.indexOf(e)){for(;null!==i;){var o=bi(i);if(null!==o&&xt(o),null===(o=Ht(e,t,n,r))&&Wr(e,t,r,Zt,n),o===i)break;i=o}null!==i&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var Zt=null;function Ht(e,t,n,r){if(Zt=null,null!==(e=vi(e=xe(r))))if(null===(t=ze(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ve(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Zt=e,null}function Gt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ye()){case Xe:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Jt=null,Yt=null,Xt=null;function en(){if(Xt)return Xt;var e,t,n=Yt,r=n.length,i="value"in Jt?Jt.value:Jt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Xt=i.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return B(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,sn,ln,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(un),pn=B({},un,{view:0,detail:0}),fn=on(pn),dn=B({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),hn=on(dn),yn=on(B({},dn,{dataTransfer:0})),mn=on(B({},pn,{relatedTarget:0})),gn=on(B({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=B({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(vn),wn=on(B({},un,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Mn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function kn(){return Mn}var On=B({},pn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cn=on(On),Tn=on(B({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_n=on(B({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),An=on(B({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pn=B({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=on(Pn),Rn=[9,13,27,32],In=c&&"CompositionEvent"in window,jn=null;c&&"documentMode"in document&&(jn=document.documentMode);var Ln=c&&"TextEvent"in window&&!jn,Bn=c&&(!In||jn&&8<jn&&11>=jn),$n=String.fromCharCode(32),Fn=!1;function Dn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1,Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function qn(e,t,n,r){Oe(r),0<(t=Qr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,Kn=null;function Zn(e){$r(e,0)}function Hn(e){if(K(wi(e)))return e}function Gn(e,t){if("change"===e)return t}var Jn=!1;if(c){var Yn;if(c){var Xn="oninput"in document;if(!Xn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Xn="function"==typeof er.oninput}Yn=Xn}else Yn=!1;Jn=Yn&&(!document.documentMode||9<document.documentMode)}function tr(){Qn&&(Qn.detachEvent("onpropertychange",nr),Kn=Qn=null)}function nr(e){if("value"===e.propertyName&&Hn(Kn)){var t=[];qn(t,Kn,e,xe(e)),Pe(Zn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,(Qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Hn(Kn)}function or(e,t){if("click"===e)return Hn(t)}function ar(e,t){if("input"===e||"change"===e)return Hn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!p.call(t,i)||!sr(e[i],t[i]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function pr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?pr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&pr(n.ownerDocument.documentElement,n)){if(null!==r&&dr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=void 0===r.end?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=cr(n,o);var a=cr(n,r);i&&a&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var yr=c&&"documentMode"in document&&11>=document.documentMode,mr=null,gr=null,vr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==mr||mr!==Z(r)||(r="selectionStart"in(r=mr)&&dr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Qr(gr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function xr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},Sr={},Mr={};function kr(e){if(Sr[e])return Sr[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in Mr)return Sr[e]=n[t];return e}c&&(Mr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var Or=kr("animationend"),Cr=kr("animationiteration"),Tr=kr("animationstart"),_r=kr("transitionend"),Ar=new Map,Pr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nr(e,t){Ar.set(e,t),l(t,[e])}for(var Rr=0;Rr<Pr.length;Rr++){var Ir=Pr[Rr];Nr(Ir.toLowerCase(),"on"+(Ir[0].toUpperCase()+Ir.slice(1)))}Nr(Or,"onAnimationEnd"),Nr(Cr,"onAnimationIteration"),Nr(Tr,"onAnimationStart"),Nr("dblclick","onDoubleClick"),Nr("focusin","onFocus"),Nr("focusout","onBlur"),Nr(_r,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var jr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(jr));function Br(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,a,s,l,u){if(Ue.apply(this,arguments),Le){if(!Le)throw Error(o(198));var c=Be;Le=!1,Be=null,$e||($e=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function $r(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break e;Br(i,s,u),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,u=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break e;Br(i,s,u),o=l}}}if($e)throw e=Fe,$e=!1,Fe=null,e}function Fr(e,t){var n=t[yi];void 0===n&&(n=t[yi]=new Set);var r=e+"__bubble";n.has(r)||(Vr(t,e,2,!1),n.add(r))}function Dr(e,t,n){var r=0;t&&(r|=4),Vr(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function zr(e){if(!e[Ur]){e[Ur]=!0,a.forEach((function(t){"selectionchange"!==t&&(Lr.has(t)||Dr(t,!1,e),Dr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,Dr("selectionchange",!1,t))}}function Vr(e,t,n,r){switch(Gt(t)){case 1:var i=qt;break;case 4:i=Qt;break;default:i=Kt}n=i.bind(null,t,n,e),i=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,i){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=vi(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue e}s=s.parentNode}}r=r.return}Pe((function(){var r=o,i=xe(n),a=[];e:{var s=Ar.get(e);if(void 0!==s){var l=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Cn;break;case"focusin":u="focus",l=mn;break;case"focusout":u="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=_n;break;case Or:case Cr:case Tr:l=gn;break;case _r:l=An;break;case"scroll":l=fn;break;case"wheel":l=Nn;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Tn}var c=0!=(4&t),p=!c&&"scroll"===e,f=c?null!==s?s+"Capture":null:s;c=[];for(var d,h=r;null!==h;){var y=(d=h).stateNode;if(5===d.tag&&null!==y&&(d=y,null!==f&&null!=(y=Ne(h,f))&&c.push(qr(h,y,d))),p)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,i),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===we||!(u=n.relatedTarget||n.fromElement)||!vi(u)&&!u[hi])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?vi(u):null)&&(u!==(p=ze(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=hn,y="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,y="onPointerLeave",f="onPointerEnter",h="pointer"),p=null==l?s:wi(l),d=null==u?s:wi(u),(s=new c(y,h+"leave",l,n,i)).target=p,s.relatedTarget=d,y=null,vi(i)===r&&((c=new c(f,h+"enter",u,n,i)).target=d,c.relatedTarget=p,y=c),p=y,l&&u)e:{for(f=u,h=0,d=c=l;d;d=Kr(d))h++;for(d=0,y=f;y;y=Kr(y))d++;for(;0<h-d;)c=Kr(c),h--;for(;0<d-h;)f=Kr(f),d--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Kr(c),f=Kr(f)}c=null}else c=null;null!==l&&Zr(a,s,l,c,!1),null!==u&&null!==p&&Zr(a,p,u,c,!0)}if("select"===(l=(s=r?wi(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Gn;else if(Wn(s))if(Jn)m=ar;else{m=ir;var g=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=or);switch(m&&(m=m(e,r))?qn(a,m,n,i):(g&&g(e,s,r),"focusout"===e&&(g=s._wrapperState)&&g.controlled&&"number"===s.type&&ee(s,"number",s.value)),g=r?wi(r):window,e){case"focusin":(Wn(g)||"true"===g.contentEditable)&&(mr=g,gr=r,vr=null);break;case"focusout":vr=gr=mr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(a,n,i);break;case"selectionchange":if(yr)break;case"keydown":case"keyup":wr(a,n,i)}var v;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else zn?Dn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Bn&&"ko"!==n.locale&&(zn||"onCompositionStart"!==b?"onCompositionEnd"===b&&zn&&(v=en()):(Yt="value"in(Jt=i)?Jt.value:Jt.textContent,zn=!0)),0<(g=Qr(r,b)).length&&(b=new wn(b,e,null,n,i),a.push({event:b,listeners:g}),(v||null!==(v=Un(n)))&&(b.data=v))),(v=Ln?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Fn=!0,$n);case"textInput":return(e=t.data)===$n&&Fn?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!In&&Dn(e,t)?(e=en(),Xt=Yt=Jt=null,zn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Bn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Qr(r,"onBeforeInput")).length&&(i=new wn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=v)}$r(a,t)}))}function qr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=Ne(e,n))&&r.unshift(qr(e,o,i)),null!=(o=Ne(e,t))&&r.push(qr(e,o,i))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Zr(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,i?null!=(l=Ne(n,o))&&a.unshift(qr(n,l,s)):i||null!=(l=Ne(n,o))&&a.push(qr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Hr=/\r\n?/g,Gr=/\u0000|\uFFFD/g;function Jr(e){return("string"==typeof e?e:""+e).replace(Hr,"\n").replace(Gr,"")}function Yr(e,t,n){if(t=Jr(t),Jr(e)!==t&&n)throw Error(o(425))}function Xr(){}var ei=null,ti=null;function ni(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,oi="function"==typeof Promise?Promise:void 0,ai="function"==typeof queueMicrotask?queueMicrotask:void 0!==oi?function(e){return oi.resolve(null).then(e).catch(si)}:ri;function si(e){setTimeout((function(){throw e}))}function li(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return e.removeChild(i),void zt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);zt(t)}function ui(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ci(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var pi=Math.random().toString(36).slice(2),fi="__reactFiber$"+pi,di="__reactProps$"+pi,hi="__reactContainer$"+pi,yi="__reactEvents$"+pi,mi="__reactListeners$"+pi,gi="__reactHandles$"+pi;function vi(e){var t=e[fi];if(t)return t;for(var n=e.parentNode;n;){if(t=n[hi]||n[fi]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ci(e);null!==e;){if(n=e[fi])return n;e=ci(e)}return t}n=(e=n).parentNode}return null}function bi(e){return!(e=e[fi]||e[hi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wi(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function xi(e){return e[di]||null}var Ei=[],Si=-1;function Mi(e){return{current:e}}function ki(e){0>Si||(e.current=Ei[Si],Ei[Si]=null,Si--)}function Oi(e,t){Si++,Ei[Si]=e.current,e.current=t}var Ci={},Ti=Mi(Ci),_i=Mi(!1),Ai=Ci;function Pi(e,t){var n=e.type.contextTypes;if(!n)return Ci;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ni(e){return null!=e.childContextTypes}function Ri(){ki(_i),ki(Ti)}function Ii(e,t,n){if(Ti.current!==Ci)throw Error(o(168));Oi(Ti,t),Oi(_i,n)}function ji(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in t))throw Error(o(108,V(e)||"Unknown",i));return B({},n,r)}function Li(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ci,Ai=Ti.current,Oi(Ti,e),Oi(_i,_i.current),!0}function Bi(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=ji(e,t,Ai),r.__reactInternalMemoizedMergedChildContext=e,ki(_i),ki(Ti),Oi(Ti,e)):ki(_i),Oi(_i,n)}var $i=null,Fi=!1,Di=!1;function Ui(e){null===$i?$i=[e]:$i.push(e)}function zi(){if(!Di&&null!==$i){Di=!0;var e=0,t=bt;try{var n=$i;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}$i=null,Fi=!1}catch(t){throw null!==$i&&($i=$i.slice(e+1)),Ke(Xe,zi),t}finally{bt=t,Di=!1}}return null}var Vi=[],Wi=0,qi=null,Qi=0,Ki=[],Zi=0,Hi=null,Gi=1,Ji="";function Yi(e,t){Vi[Wi++]=Qi,Vi[Wi++]=qi,qi=e,Qi=t}function Xi(e,t,n){Ki[Zi++]=Gi,Ki[Zi++]=Ji,Ki[Zi++]=Hi,Hi=e;var r=Gi;e=Ji;var i=32-at(r)-1;r&=~(1<<i),n+=1;var o=32-at(t)+i;if(30<o){var a=i-i%5;o=(r&(1<<a)-1).toString(32),r>>=a,i-=a,Gi=1<<32-at(t)+i|n<<i|r,Ji=o+e}else Gi=1<<o|n<<i|r,Ji=e}function eo(e){null!==e.return&&(Yi(e,1),Xi(e,1,0))}function to(e){for(;e===qi;)qi=Vi[--Wi],Vi[Wi]=null,Qi=Vi[--Wi],Vi[Wi]=null;for(;e===Hi;)Hi=Ki[--Zi],Ki[Zi]=null,Ji=Ki[--Zi],Ki[Zi]=null,Gi=Ki[--Zi],Ki[Zi]=null}var no=null,ro=null,io=!1,oo=null;function ao(e,t){var n=Pu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function so(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=ui(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Hi?{id:Gi,overflow:Ji}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Pu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function lo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function uo(e){if(io){var t=ro;if(t){var n=t;if(!so(e,t)){if(lo(e))throw Error(o(418));t=ui(n.nextSibling);var r=no;t&&so(e,t)?ao(r,n):(e.flags=-4097&e.flags|2,io=!1,no=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,io=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function po(e){if(e!==no)return!1;if(!io)return co(e),io=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ni(e.type,e.memoizedProps)),t&&(t=ro)){if(lo(e))throw fo(),Error(o(418));for(;t;)ao(e,t),t=ui(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=ui(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?ui(e.stateNode.nextSibling):null;return!0}function fo(){for(var e=ro;e;)e=ui(e.nextSibling)}function ho(){ro=no=null,io=!1}function yo(e){null===oo?oo=[e]:oo.push(e)}var mo=w.ReactCurrentBatchConfig;function go(e,t){if(e&&e.defaultProps){for(var n in t=B({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var vo=Mi(null),bo=null,wo=null,xo=null;function Eo(){xo=wo=bo=null}function So(e){var t=vo.current;ki(vo),e._currentValue=t}function Mo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ko(e,t){bo=e,xo=wo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ws=!0),e.firstContext=null)}function Oo(e){var t=e._currentValue;if(xo!==e)if(e={context:e,memoizedValue:t,next:null},null===wo){if(null===bo)throw Error(o(308));wo=e,bo.dependencies={lanes:0,firstContext:e}}else wo=wo.next=e;return t}var Co=null;function To(e){null===Co?Co=[e]:Co.push(e)}function _o(e,t,n,r){var i=t.interleaved;return null===i?(n.next=n,To(t)):(n.next=i.next,i.next=n),t.interleaved=n,Ao(e,r)}function Ao(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Po=!1;function No(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Io(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function jo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Tl)){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Ao(e,n)}return null===(i=r.interleaved)?(t.next=t,To(r)):(t.next=i.next,i.next=t),r.interleaved=t,Ao(e,n)}function Lo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function Bo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function $o(e,t,n,r){var i=e.updateQueue;Po=!1;var o=i.firstBaseUpdate,a=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var l=s,u=l.next;l.next=null,null===a?o=u:a.next=u,a=l;var c=e.alternate;null!==c&&(s=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===s?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=l)}if(null!==o){var p=i.baseState;for(a=0,c=u=l=null,s=o;;){var f=s.lane,d=s.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:d,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var h=e,y=s;switch(f=t,d=n,y.tag){case 1:if("function"==typeof(h=y.payload)){p=h.call(d,p,f);break e}p=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=y.payload)?h.call(d,p,f):h))break e;p=B({},p,f);break e;case 2:Po=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(f=i.effects)?i.effects=[s]:f.push(s))}else d={eventTime:d,lane:f,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=d,l=p):c=c.next=d,a|=f;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(f=s).next,f.next=null,i.lastBaseUpdate=f,i.shared.pending=null}}if(null===c&&(l=p),i.baseState=l,i.firstBaseUpdate=u,i.lastBaseUpdate=c,null!==(t=i.shared.interleaved)){i=t;do{a|=i.lane,i=i.next}while(i!==t)}else null===o&&(i.shared.lanes=0);Ll|=a,e.lanes=a,e.memoizedState=p}}function Fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(o(191,i));i.call(r)}}}var Do=(new r.Component).refs;function Uo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:B({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var zo={isMounted:function(e){return!!(e=e._reactInternals)&&ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=eu(),i=tu(e),o=Io(r,i);o.payload=t,null!=n&&(o.callback=n),null!==(t=jo(e,o,i))&&(nu(t,e,i,r),Lo(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=eu(),i=tu(e),o=Io(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=jo(e,o,i))&&(nu(t,e,i,r),Lo(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=eu(),r=tu(e),i=Io(n,r);i.tag=2,null!=t&&(i.callback=t),null!==(t=jo(e,i,r))&&(nu(t,e,r,n),Lo(t,e,r))}};function Vo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,o))}function Wo(e,t,n){var r=!1,i=Ci,o=t.contextType;return"object"==typeof o&&null!==o?o=Oo(o):(i=Ni(t)?Ai:Ti.current,o=(r=null!=(r=t.contextTypes))?Pi(e,i):Ci),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=zo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function qo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&zo.enqueueReplaceState(t,t.state,null)}function Qo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Do,No(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=Oo(o):(o=Ni(t)?Ai:Ti.current,i.context=Pi(e,o)),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Uo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&zo.enqueueReplaceState(i,i.state,null),$o(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function Ko(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var i=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=i.refs;t===Do&&(t=i.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Zo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ho(e){return(0,e._init)(e._payload)}function Go(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Ru(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Bu(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){var o=n.type;return o===S?p(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===N&&Ho(o)===t.type)?((r=i(t,n.props)).ref=Ko(e,t,n),r.return=e,r):((r=Iu(n.type,n.key,n.props,null,e.mode,r)).ref=Ko(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$u(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function p(e,t,n,r,o){return null===t||7!==t.tag?((t=ju(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Bu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Iu(t.type,t.key,t.props,null,e.mode,n)).ref=Ko(e,null,t),n.return=e,n;case E:return(t=$u(t,e.mode,n)).return=e,t;case N:return f(e,(0,t._init)(t._payload),n)}if(te(t)||j(t))return(t=ju(t,e.mode,n,null)).return=e,t;Zo(e,t)}return null}function d(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===i?u(e,t,n,r):null;case E:return n.key===i?c(e,t,n,r):null;case N:return d(e,t,(i=n._init)(n._payload),r)}if(te(n)||j(n))return null!==i?null:p(e,t,n,r,null);Zo(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case N:return h(e,t,n,(0,r._init)(r._payload),i)}if(te(r)||j(r))return p(t,e=e.get(n)||null,r,i,null);Zo(t,r)}return null}function y(i,o,s,l){for(var u=null,c=null,p=o,y=o=0,m=null;null!==p&&y<s.length;y++){p.index>y?(m=p,p=null):m=p.sibling;var g=d(i,p,s[y],l);if(null===g){null===p&&(p=m);break}e&&p&&null===g.alternate&&t(i,p),o=a(g,o,y),null===c?u=g:c.sibling=g,c=g,p=m}if(y===s.length)return n(i,p),io&&Yi(i,y),u;if(null===p){for(;y<s.length;y++)null!==(p=f(i,s[y],l))&&(o=a(p,o,y),null===c?u=p:c.sibling=p,c=p);return io&&Yi(i,y),u}for(p=r(i,p);y<s.length;y++)null!==(m=h(p,i,y,s[y],l))&&(e&&null!==m.alternate&&p.delete(null===m.key?y:m.key),o=a(m,o,y),null===c?u=m:c.sibling=m,c=m);return e&&p.forEach((function(e){return t(i,e)})),io&&Yi(i,y),u}function m(i,s,l,u){var c=j(l);if("function"!=typeof c)throw Error(o(150));if(null==(l=c.call(l)))throw Error(o(151));for(var p=c=null,y=s,m=s=0,g=null,v=l.next();null!==y&&!v.done;m++,v=l.next()){y.index>m?(g=y,y=null):g=y.sibling;var b=d(i,y,v.value,u);if(null===b){null===y&&(y=g);break}e&&y&&null===b.alternate&&t(i,y),s=a(b,s,m),null===p?c=b:p.sibling=b,p=b,y=g}if(v.done)return n(i,y),io&&Yi(i,m),c;if(null===y){for(;!v.done;m++,v=l.next())null!==(v=f(i,v.value,u))&&(s=a(v,s,m),null===p?c=v:p.sibling=v,p=v);return io&&Yi(i,m),c}for(y=r(i,y);!v.done;m++,v=l.next())null!==(v=h(y,i,m,v.value,u))&&(e&&null!==v.alternate&&y.delete(null===v.key?m:v.key),s=a(v,s,m),null===p?c=v:p.sibling=v,p=v);return e&&y.forEach((function(e){return t(i,e)})),io&&Yi(i,m),c}return function e(r,o,a,l){if("object"==typeof a&&null!==a&&a.type===S&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case x:e:{for(var u=a.key,c=o;null!==c;){if(c.key===u){if((u=a.type)===S){if(7===c.tag){n(r,c.sibling),(o=i(c,a.props.children)).return=r,r=o;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===N&&Ho(u)===c.type){n(r,c.sibling),(o=i(c,a.props)).ref=Ko(r,c,a),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===S?((o=ju(a.props.children,r.mode,l,a.key)).return=r,r=o):((l=Iu(a.type,a.key,a.props,null,r.mode,l)).ref=Ko(r,o,a),l.return=r,r=l)}return s(r);case E:e:{for(c=a.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(r,o.sibling),(o=i(o,a.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=$u(a,r.mode,l)).return=r,r=o}return s(r);case N:return e(r,o,(c=a._init)(a._payload),l)}if(te(a))return y(r,o,a,l);if(j(a))return m(r,o,a,l);Zo(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==o&&6===o.tag?(n(r,o.sibling),(o=i(o,a)).return=r,r=o):(n(r,o),(o=Bu(a,r.mode,l)).return=r,r=o),s(r)):n(r,o)}}var Jo=Go(!0),Yo=Go(!1),Xo={},ea=Mi(Xo),ta=Mi(Xo),na=Mi(Xo);function ra(e){if(e===Xo)throw Error(o(174));return e}function ia(e,t){switch(Oi(na,t),Oi(ta,e),Oi(ea,Xo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ki(ea),Oi(ea,t)}function oa(){ki(ea),ki(ta),ki(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=le(t,e.type);t!==n&&(Oi(ta,e),Oi(ea,n))}function sa(e){ta.current===e&&(ki(ea),ki(ta))}var la=Mi(0);function ua(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ca=[];function pa(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var fa=w.ReactCurrentDispatcher,da=w.ReactCurrentBatchConfig,ha=0,ya=null,ma=null,ga=null,va=!1,ba=!1,wa=0,xa=0;function Ea(){throw Error(o(321))}function Sa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function Ma(e,t,n,r,i,a){if(ha=a,ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fa.current=null===e||null===e.memoizedState?ss:ls,e=n(r,i),ba){a=0;do{if(ba=!1,wa=0,25<=a)throw Error(o(301));a+=1,ga=ma=null,t.updateQueue=null,fa.current=us,e=n(r,i)}while(ba)}if(fa.current=as,t=null!==ma&&null!==ma.next,ha=0,ga=ma=ya=null,va=!1,t)throw Error(o(300));return e}function ka(){var e=0!==wa;return wa=0,e}function Oa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ga?ya.memoizedState=ga=e:ga=ga.next=e,ga}function Ca(){if(null===ma){var e=ya.alternate;e=null!==e?e.memoizedState:null}else e=ma.next;var t=null===ga?ya.memoizedState:ga.next;if(null!==t)ga=t,ma=e;else{if(null===e)throw Error(o(310));e={memoizedState:(ma=e).memoizedState,baseState:ma.baseState,baseQueue:ma.baseQueue,queue:ma.queue,next:null},null===ga?ya.memoizedState=ga=e:ga=ga.next=e}return ga}function Ta(e,t){return"function"==typeof t?t(e):t}function _a(e){var t=Ca(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=ma,i=r.baseQueue,a=n.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}r.baseQueue=i=a,n.pending=null}if(null!==i){a=i.next,r=r.baseState;var l=s=null,u=null,c=a;do{var p=c.lane;if((ha&p)===p)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:p,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=f,s=r):u=u.next=f,ya.lanes|=p,Ll|=p}c=c.next}while(null!==c&&c!==a);null===u?s=r:u.next=l,sr(r,t.memoizedState)||(ws=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){i=e;do{a=i.lane,ya.lanes|=a,Ll|=a,i=i.next}while(i!==e)}else null===i&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Aa(e){var t=Ca(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{a=e(a,s.action),s=s.next}while(s!==i);sr(a,t.memoizedState)||(ws=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Pa(){}function Na(e,t){var n=ya,r=Ca(),i=t(),a=!sr(r.memoizedState,i);if(a&&(r.memoizedState=i,ws=!0),r=r.queue,Wa(ja.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ga&&1&ga.memoizedState.tag){if(n.flags|=2048,Fa(9,Ia.bind(null,n,r,i,t),void 0,null),null===_l)throw Error(o(349));0!=(30&ha)||Ra(n,t,i)}return i}function Ra(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ya.updateQueue)?(t={lastEffect:null,stores:null},ya.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ia(e,t,n,r){t.value=n,t.getSnapshot=r,La(t)&&Ba(e)}function ja(e,t,n){return n((function(){La(t)&&Ba(e)}))}function La(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function Ba(e){var t=Ao(e,1);null!==t&&nu(t,e,1,-1)}function $a(e){var t=Oa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ta,lastRenderedState:e},t.queue=e,e=e.dispatch=ns.bind(null,ya,e),[t.memoizedState,e]}function Fa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ya.updateQueue)?(t={lastEffect:null,stores:null},ya.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Da(){return Ca().memoizedState}function Ua(e,t,n,r){var i=Oa();ya.flags|=e,i.memoizedState=Fa(1|t,n,void 0,void 0===r?null:r)}function za(e,t,n,r){var i=Ca();r=void 0===r?null:r;var o=void 0;if(null!==ma){var a=ma.memoizedState;if(o=a.destroy,null!==r&&Sa(r,a.deps))return void(i.memoizedState=Fa(t,n,o,r))}ya.flags|=e,i.memoizedState=Fa(1|t,n,o,r)}function Va(e,t){return Ua(8390656,8,e,t)}function Wa(e,t){return za(2048,8,e,t)}function qa(e,t){return za(4,2,e,t)}function Qa(e,t){return za(4,4,e,t)}function Ka(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Za(e,t,n){return n=null!=n?n.concat([e]):null,za(4,4,Ka.bind(null,t,e),n)}function Ha(){}function Ga(e,t){var n=Ca();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Sa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ja(e,t){var n=Ca();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Sa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ya(e,t,n){return 0==(21&ha)?(e.baseState&&(e.baseState=!1,ws=!0),e.memoizedState=n):(sr(n,t)||(n=yt(),ya.lanes|=n,Ll|=n,e.baseState=!0),t)}function Xa(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=da.transition;da.transition={};try{e(!1),t()}finally{bt=n,da.transition=r}}function es(){return Ca().memoizedState}function ts(e,t,n){var r=tu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rs(e)?is(t,n):null!==(n=_o(e,t,n,r))&&(nu(n,e,r,eu()),os(n,t,r))}function ns(e,t,n){var r=tu(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rs(e))is(t,i);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=o(a,n);if(i.hasEagerState=!0,i.eagerState=s,sr(s,a)){var l=t.interleaved;return null===l?(i.next=i,To(t)):(i.next=l.next,l.next=i),void(t.interleaved=i)}}catch(e){}null!==(n=_o(e,t,i,r))&&(nu(n,e,r,i=eu()),os(n,t,r))}}function rs(e){var t=e.alternate;return e===ya||null!==t&&t===ya}function is(e,t){ba=va=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function os(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var as={readContext:Oo,useCallback:Ea,useContext:Ea,useEffect:Ea,useImperativeHandle:Ea,useInsertionEffect:Ea,useLayoutEffect:Ea,useMemo:Ea,useReducer:Ea,useRef:Ea,useState:Ea,useDebugValue:Ea,useDeferredValue:Ea,useTransition:Ea,useMutableSource:Ea,useSyncExternalStore:Ea,useId:Ea,unstable_isNewReconciler:!1},ss={readContext:Oo,useCallback:function(e,t){return Oa().memoizedState=[e,void 0===t?null:t],e},useContext:Oo,useEffect:Va,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ua(4194308,4,Ka.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ua(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ua(4,2,e,t)},useMemo:function(e,t){var n=Oa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Oa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ts.bind(null,ya,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Oa().memoizedState=e},useState:$a,useDebugValue:Ha,useDeferredValue:function(e){return Oa().memoizedState=e},useTransition:function(){var e=$a(!1),t=e[0];return e=Xa.bind(null,e[1]),Oa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ya,i=Oa();if(io){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===_l)throw Error(o(349));0!=(30&ha)||Ra(r,t,n)}i.memoizedState=n;var a={value:n,getSnapshot:t};return i.queue=a,Va(ja.bind(null,r,a,e),[e]),r.flags|=2048,Fa(9,Ia.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=Oa(),t=_l.identifierPrefix;if(io){var n=Ji;t=":"+t+"R"+(n=(Gi&~(1<<32-at(Gi)-1)).toString(32)+n),0<(n=wa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=xa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ls={readContext:Oo,useCallback:Ga,useContext:Oo,useEffect:Wa,useImperativeHandle:Za,useInsertionEffect:qa,useLayoutEffect:Qa,useMemo:Ja,useReducer:_a,useRef:Da,useState:function(){return _a(Ta)},useDebugValue:Ha,useDeferredValue:function(e){return Ya(Ca(),ma.memoizedState,e)},useTransition:function(){return[_a(Ta)[0],Ca().memoizedState]},useMutableSource:Pa,useSyncExternalStore:Na,useId:es,unstable_isNewReconciler:!1},us={readContext:Oo,useCallback:Ga,useContext:Oo,useEffect:Wa,useImperativeHandle:Za,useInsertionEffect:qa,useLayoutEffect:Qa,useMemo:Ja,useReducer:Aa,useRef:Da,useState:function(){return Aa(Ta)},useDebugValue:Ha,useDeferredValue:function(e){var t=Ca();return null===ma?t.memoizedState=e:Ya(t,ma.memoizedState,e)},useTransition:function(){return[Aa(Ta)[0],Ca().memoizedState]},useMutableSource:Pa,useSyncExternalStore:Na,useId:es,unstable_isNewReconciler:!1};function cs(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i,digest:null}}function ps(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ds="function"==typeof WeakMap?WeakMap:Map;function hs(e,t,n){(n=Io(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,ql=r),fs(0,t)},n}function ys(e,t,n){(n=Io(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){fs(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){fs(0,t),"function"!=typeof r&&(null===Ql?Ql=new Set([this]):Ql.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ms(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ds;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=ku.bind(null,e,t,n),t.then(e,e))}function gs(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vs(e,t,n,r,i){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Io(-1,1)).tag=2,jo(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=i,e)}var bs=w.ReactCurrentOwner,ws=!1;function xs(e,t,n,r){t.child=null===e?Yo(t,null,n,r):Jo(t,e.child,n,r)}function Es(e,t,n,r,i){n=n.render;var o=t.ref;return ko(t,i),r=Ma(e,t,n,r,o,i),n=ka(),null===e||ws?(io&&n&&eo(t),t.flags|=1,xs(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Ws(e,t,i))}function Ss(e,t,n,r,i){if(null===e){var o=n.type;return"function"!=typeof o||Nu(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Iu(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ms(e,t,o,r,i))}if(o=e.child,0==(e.lanes&i)){var a=o.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(a,r)&&e.ref===t.ref)return Ws(e,t,i)}return t.flags|=1,(e=Ru(o,r)).ref=t.ref,e.return=t,t.child=e}function Ms(e,t,n,r,i){if(null!==e){var o=e.memoizedProps;if(lr(o,r)&&e.ref===t.ref){if(ws=!1,t.pendingProps=r=o,0==(e.lanes&i))return t.lanes=e.lanes,Ws(e,t,i);0!=(131072&e.flags)&&(ws=!0)}}return Cs(e,t,n,r,i)}function ks(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Oi(Rl,Nl),Nl|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Oi(Rl,Nl),Nl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Oi(Rl,Nl),Nl|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Oi(Rl,Nl),Nl|=r;return xs(e,t,i,n),t.child}function Os(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Cs(e,t,n,r,i){var o=Ni(n)?Ai:Ti.current;return o=Pi(t,o),ko(t,i),n=Ma(e,t,n,r,o,i),r=ka(),null===e||ws?(io&&r&&eo(t),t.flags|=1,xs(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Ws(e,t,i))}function Ts(e,t,n,r,i){if(Ni(n)){var o=!0;Li(t)}else o=!1;if(ko(t,i),null===t.stateNode)Vs(e,t),Wo(t,n,r),Qo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;u="object"==typeof u&&null!==u?Oo(u):Pi(t,u=Ni(n)?Ai:Ti.current);var c=n.getDerivedStateFromProps,p="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;p||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&qo(t,a,r,u),Po=!1;var f=t.memoizedState;a.state=f,$o(t,r,a,i),l=t.memoizedState,s!==r||f!==l||_i.current||Po?("function"==typeof c&&(Uo(t,n,c,r),l=t.memoizedState),(s=Po||Vo(t,n,s,r,f,l,u))?(p||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Ro(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:go(t.type,s),a.props=u,p=t.pendingProps,f=a.context,l="object"==typeof(l=n.contextType)&&null!==l?Oo(l):Pi(t,l=Ni(n)?Ai:Ti.current);var d=n.getDerivedStateFromProps;(c="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==p||f!==l)&&qo(t,a,r,l),Po=!1,f=t.memoizedState,a.state=f,$o(t,r,a,i);var h=t.memoizedState;s!==p||f!==h||_i.current||Po?("function"==typeof d&&(Uo(t,n,d,r),h=t.memoizedState),(u=Po||Vo(t,n,u,r,f,h,l)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return _s(e,t,n,r,o,i)}function _s(e,t,n,r,i,o){Os(e,t);var a=0!=(128&t.flags);if(!r&&!a)return i&&Bi(t,n,!1),Ws(e,t,o);r=t.stateNode,bs.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Jo(t,e.child,null,o),t.child=Jo(t,null,s,o)):xs(e,t,s,o),t.memoizedState=r.state,i&&Bi(t,n,!0),t.child}function As(e){var t=e.stateNode;t.pendingContext?Ii(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ii(0,t.context,!1),ia(e,t.containerInfo)}function Ps(e,t,n,r,i){return ho(),yo(i),t.flags|=256,xs(e,t,n,r),t.child}var Ns,Rs,Is,js={dehydrated:null,treeContext:null,retryLane:0};function Ls(e){return{baseLanes:e,cachePool:null,transitions:null}}function Bs(e,t,n){var r,i=t.pendingProps,a=la.current,s=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Oi(la,1&a),null===e)return uo(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=i.children,e=i.fallback,s?(i=t.mode,s=t.child,l={mode:"hidden",children:l},0==(1&i)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=Lu(l,i,0,null),e=ju(e,i,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=Ls(n),t.memoizedState=js,e):$s(t,l));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,i,a,s){if(n)return 256&t.flags?(t.flags&=-257,Fs(e,t,s,r=ps(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,i=t.mode,r=Lu({mode:"visible",children:r.children},i,0,null),(a=ju(a,i,s,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Jo(t,e.child,null,s),t.child.memoizedState=Ls(s),t.memoizedState=js,a);if(0==(1&t.mode))return Fs(e,t,s,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var l=r.dgst;return r=l,Fs(e,t,s,r=ps(a=Error(o(419)),r,void 0))}if(l=0!=(s&e.childLanes),ws||l){if(null!==(r=_l)){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(r.suspendedLanes|s))?0:i)&&i!==a.retryLane&&(a.retryLane=i,Ao(e,i),nu(r,e,i,-1))}return yu(),Fs(e,t,s,r=ps(Error(o(421))))}return"$?"===i.data?(t.flags|=128,t.child=e.child,t=Cu.bind(null,e),i._reactRetry=t,null):(e=a.treeContext,ro=ui(i.nextSibling),no=t,io=!0,oo=null,null!==e&&(Ki[Zi++]=Gi,Ki[Zi++]=Ji,Ki[Zi++]=Hi,Gi=e.id,Ji=e.overflow,Hi=t),(t=$s(t,r.children)).flags|=4096,t)}(e,t,l,i,r,a,n);if(s){s=i.fallback,l=t.mode,r=(a=e.child).sibling;var u={mode:"hidden",children:i.children};return 0==(1&l)&&t.child!==a?((i=t.child).childLanes=0,i.pendingProps=u,t.deletions=null):(i=Ru(a,u)).subtreeFlags=14680064&a.subtreeFlags,null!==r?s=Ru(r,s):(s=ju(s,l,n,null)).flags|=2,s.return=t,i.return=t,i.sibling=s,t.child=i,i=s,s=t.child,l=null===(l=e.child.memoizedState)?Ls(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=js,i}return e=(s=e.child).sibling,i=Ru(s,{mode:"visible",children:i.children}),0==(1&t.mode)&&(i.lanes=n),i.return=t,i.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=i,t.memoizedState=null,i}function $s(e,t){return(t=Lu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fs(e,t,n,r){return null!==r&&yo(r),Jo(t,e.child,null,n),(e=$s(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Ds(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Mo(e.return,t,n)}function Us(e,t,n,r,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i)}function zs(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(xs(e,t,r.children,n),0!=(2&(r=la.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ds(e,n,t);else if(19===e.tag)Ds(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Oi(la,r),0==(1&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===ua(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Us(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===ua(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Us(t,!0,n,null,o);break;case"together":Us(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vs(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ws(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ll|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ru(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ru(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function qs(e,t){if(!io)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Qs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ks(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Qs(t),null;case 1:case 17:return Ni(t.type)&&Ri(),Qs(t),null;case 3:return r=t.stateNode,oa(),ki(_i),ki(Ti),pa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(po(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(au(oo),oo=null))),Qs(t),null;case 5:sa(t);var i=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Rs(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Qs(t),null}if(e=ra(ea.current),po(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[fi]=t,r[di]=a,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(i=0;i<jr.length;i++)Fr(jr[i],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":G(r,a),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Fr("invalid",r);break;case"textarea":ie(r,a),Fr("invalid",r)}for(var l in ve(n,a),i=null,a)if(a.hasOwnProperty(l)){var u=a[l];"children"===l?"string"==typeof u?r.textContent!==u&&(!0!==a.suppressHydrationWarning&&Yr(r.textContent,u,e),i=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==a.suppressHydrationWarning&&Yr(r.textContent,u,e),i=["children",""+u]):s.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&Fr("scroll",r)}switch(n){case"input":Q(r),X(r,a,!0);break;case"textarea":Q(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Xr)}r=i,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[fi]=t,e[di]=r,Ns(e,t),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),i=r;break;case"iframe":case"object":case"embed":Fr("load",e),i=r;break;case"video":case"audio":for(i=0;i<jr.length;i++)Fr(jr[i],e);i=r;break;case"source":Fr("error",e),i=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),i=r;break;case"details":Fr("toggle",e),i=r;break;case"input":G(e,r),i=H(e,r),Fr("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=B({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),Fr("invalid",e)}for(a in ve(n,i),u=i)if(u.hasOwnProperty(a)){var c=u[a];"style"===a?me(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&pe(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Fr("scroll",e):null!=c&&b(e,a,c,l))}switch(n){case"input":Q(e),X(e,r,!1);break;case"textarea":Q(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Xr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Qs(t),null;case 6:if(e&&null!=t.stateNode)Is(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=ra(na.current),ra(ea.current),po(t)){if(r=t.stateNode,n=t.memoizedProps,r[fi]=t,(a=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Yr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Yr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fi]=t,t.stateNode=r}return Qs(t),null;case 13:if(ki(la),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(io&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))fo(),ho(),t.flags|=98560,a=!1;else if(a=po(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[fi]=t}else ho(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Qs(t),a=!1}else null!==oo&&(au(oo),oo=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&la.current)?0===Il&&(Il=3):yu())),null!==t.updateQueue&&(t.flags|=4),Qs(t),null);case 4:return oa(),null===e&&zr(t.stateNode.containerInfo),Qs(t),null;case 10:return So(t.type._context),Qs(t),null;case 19:if(ki(la),null===(a=t.memoizedState))return Qs(t),null;if(r=0!=(128&t.flags),null===(l=a.rendering))if(r)qs(a,!1);else{if(0!==Il||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=ua(e))){for(t.flags|=128,qs(a,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Oi(la,1&la.current|2),t.child}e=e.sibling}null!==a.tail&&Je()>zl&&(t.flags|=128,r=!0,qs(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ua(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),qs(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!io)return Qs(t),null}else 2*Je()-a.renderingStartTime>zl&&1073741824!==n&&(t.flags|=128,r=!0,qs(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=a.last)?n.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Je(),t.sibling=null,n=la.current,Oi(la,r?1&n|2:1&n),t):(Qs(t),null);case 22:case 23:return pu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Nl)&&(Qs(t),6&t.subtreeFlags&&(t.flags|=8192)):Qs(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Zs(e,t){switch(to(t),t.tag){case 1:return Ni(t.type)&&Ri(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return oa(),ki(_i),ki(Ti),pa(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return sa(t),null;case 13:if(ki(la),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ki(la),null;case 4:return oa(),null;case 10:return So(t.type._context),null;case 22:case 23:return pu(),null;default:return null}}Ns=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Rs=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,ra(ea.current);var o,a=null;switch(n){case"input":i=H(e,i),r=H(e,r),a=[];break;case"select":i=B({},i,{value:void 0}),r=B({},r,{value:void 0}),a=[];break;case"textarea":i=re(e,i),r=re(e,r),a=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Xr)}for(c in ve(n,r),n=null,i)if(!r.hasOwnProperty(c)&&i.hasOwnProperty(c)&&null!=i[c])if("style"===c){var l=i[c];for(o in l)l.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(s.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var u=r[c];if(l=null!=i?i[c]:void 0,r.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(o in l)!l.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in u)u.hasOwnProperty(o)&&l[o]!==u[o]&&(n||(n={}),n[o]=u[o])}else n||(a||(a=[]),a.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(a=a||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(a=a||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(s.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Fr("scroll",e),a||l===u||(a=[])):(a=a||[]).push(c,u))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Is=function(e,t,n,r){n!==r&&(t.flags|=4)};var Hs=!1,Gs=!1,Js="function"==typeof WeakSet?WeakSet:Set,Ys=null;function Xs(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Mu(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){Mu(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,void 0!==o&&el(t,n,o)}i=i.next}while(i!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ol(e){var t=e.alternate;null!==t&&(e.alternate=null,ol(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fi],delete t[di],delete t[yi],delete t[mi],delete t[gi]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}var cl=null,pl=!1;function fl(e,t,n){for(n=n.child;null!==n;)dl(e,t,n),n=n.sibling}function dl(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:Gs||Xs(n,t);case 6:var r=cl,i=pl;cl=null,fl(e,t,n),pl=i,null!==(cl=r)&&(pl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(pl?(e=cl,n=n.stateNode,8===e.nodeType?li(e.parentNode,n):1===e.nodeType&&li(e,n),zt(e)):li(cl,n.stateNode));break;case 4:r=cl,i=pl,cl=n.stateNode.containerInfo,pl=!0,fl(e,t,n),cl=r,pl=i;break;case 0:case 11:case 14:case 15:if(!Gs&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var o=i,a=o.destroy;o=o.tag,void 0!==a&&(0!=(2&o)||0!=(4&o))&&el(n,t,a),i=i.next}while(i!==r)}fl(e,t,n);break;case 1:if(!Gs&&(Xs(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Mu(n,t,e)}fl(e,t,n);break;case 21:fl(e,t,n);break;case 22:1&n.mode?(Gs=(r=Gs)||null!==n.memoizedState,fl(e,t,n),Gs=r):fl(e,t,n);break;default:fl(e,t,n)}}function hl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Js),t.forEach((function(t){var r=Tu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function yl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r];try{var a=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,pl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,pl=!0;break e}l=l.return}if(null===cl)throw Error(o(160));dl(a,s,i),cl=null,pl=!1;var u=i.alternate;null!==u&&(u.return=null),i.return=null}catch(e){Mu(i,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)ml(t,e),t=t.sibling}function ml(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(yl(t,e),gl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){Mu(e,e.return,t)}try{nl(5,e,e.return)}catch(t){Mu(e,e.return,t)}}break;case 1:yl(t,e),gl(e),512&r&&null!==n&&Xs(n,n.return);break;case 5:if(yl(t,e),gl(e),512&r&&null!==n&&Xs(n,n.return),32&e.flags){var i=e.stateNode;try{fe(i,"")}catch(t){Mu(e,e.return,t)}}if(4&r&&null!=(i=e.stateNode)){var a=e.memoizedProps,s=null!==n?n.memoizedProps:a,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===a.type&&null!=a.name&&J(i,a),be(l,s);var c=be(l,a);for(s=0;s<u.length;s+=2){var p=u[s],f=u[s+1];"style"===p?me(i,f):"dangerouslySetInnerHTML"===p?pe(i,f):"children"===p?fe(i,f):b(i,p,f,c)}switch(l){case"input":Y(i,a);break;case"textarea":oe(i,a);break;case"select":var d=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(i,!!a.multiple,h,!1):d!==!!a.multiple&&(null!=a.defaultValue?ne(i,!!a.multiple,a.defaultValue,!0):ne(i,!!a.multiple,a.multiple?[]:"",!1))}i[di]=a}catch(t){Mu(e,e.return,t)}}break;case 6:if(yl(t,e),gl(e),4&r){if(null===e.stateNode)throw Error(o(162));i=e.stateNode,a=e.memoizedProps;try{i.nodeValue=a}catch(t){Mu(e,e.return,t)}}break;case 3:if(yl(t,e),gl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{zt(t.containerInfo)}catch(t){Mu(e,e.return,t)}break;case 4:default:yl(t,e),gl(e);break;case 13:yl(t,e),gl(e),8192&(i=e.child).flags&&(a=null!==i.memoizedState,i.stateNode.isHidden=a,!a||null!==i.alternate&&null!==i.alternate.memoizedState||(Ul=Je())),4&r&&hl(e);break;case 22:if(p=null!==n&&null!==n.memoizedState,1&e.mode?(Gs=(c=Gs)||p,yl(t,e),Gs=c):yl(t,e),gl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!p&&0!=(1&e.mode))for(Ys=e,p=e.child;null!==p;){for(f=Ys=p;null!==Ys;){switch(h=(d=Ys).child,d.tag){case 0:case 11:case 14:case 15:nl(4,d,d.return);break;case 1:Xs(d,d.return);var y=d.stateNode;if("function"==typeof y.componentWillUnmount){r=d,n=d.return;try{t=r,y.props=t.memoizedProps,y.state=t.memoizedState,y.componentWillUnmount()}catch(e){Mu(r,n,e)}}break;case 5:Xs(d,d.return);break;case 22:if(null!==d.memoizedState){xl(f);continue}}null!==h?(h.return=d,Ys=h):xl(f)}p=p.sibling}e:for(p=null,f=e;;){if(5===f.tag){if(null===p){p=f;try{i=f.stateNode,c?"function"==typeof(a=i.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=f.stateNode,s=null!=(u=f.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=ye("display",s))}catch(t){Mu(e,e.return,t)}}}else if(6===f.tag){if(null===p)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Mu(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;p===f&&(p=null),f=f.return}p===f&&(p=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:yl(t,e),gl(e),4&r&&hl(e);case 21:}}function gl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(al(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(fe(i,""),r.flags&=-33),ul(e,sl(e),i);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(e,sl(e),a);break;default:throw Error(o(161))}}catch(t){Mu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function vl(e,t,n){Ys=e,bl(e,t,n)}function bl(e,t,n){for(var r=0!=(1&e.mode);null!==Ys;){var i=Ys,o=i.child;if(22===i.tag&&r){var a=null!==i.memoizedState||Hs;if(!a){var s=i.alternate,l=null!==s&&null!==s.memoizedState||Gs;s=Hs;var u=Gs;if(Hs=a,(Gs=l)&&!u)for(Ys=i;null!==Ys;)l=(a=Ys).child,22===a.tag&&null!==a.memoizedState?El(i):null!==l?(l.return=a,Ys=l):El(i);for(;null!==o;)Ys=o,bl(o,t,n),o=o.sibling;Ys=i,Hs=s,Gs=u}wl(e)}else 0!=(8772&i.subtreeFlags)&&null!==o?(o.return=i,Ys=o):wl(e)}}function wl(e){for(;null!==Ys;){var t=Ys;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Gs||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Gs)if(null===n)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:go(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Fo(t,a,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fo(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var p=c.memoizedState;if(null!==p){var f=p.dehydrated;null!==f&&zt(f)}}}break;default:throw Error(o(163))}Gs||512&t.flags&&il(t)}catch(e){Mu(t,t.return,e)}}if(t===e){Ys=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ys=n;break}Ys=t.return}}function xl(e){for(;null!==Ys;){var t=Ys;if(t===e){Ys=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ys=n;break}Ys=t.return}}function El(e){for(;null!==Ys;){var t=Ys;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){Mu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var i=t.return;try{r.componentDidMount()}catch(e){Mu(t,i,e)}}var o=t.return;try{il(t)}catch(e){Mu(t,o,e)}break;case 5:var a=t.return;try{il(t)}catch(e){Mu(t,a,e)}}}catch(e){Mu(t,t.return,e)}if(t===e){Ys=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Ys=s;break}Ys=t.return}}var Sl,Ml=Math.ceil,kl=w.ReactCurrentDispatcher,Ol=w.ReactCurrentOwner,Cl=w.ReactCurrentBatchConfig,Tl=0,_l=null,Al=null,Pl=0,Nl=0,Rl=Mi(0),Il=0,jl=null,Ll=0,Bl=0,$l=0,Fl=null,Dl=null,Ul=0,zl=1/0,Vl=null,Wl=!1,ql=null,Ql=null,Kl=!1,Zl=null,Hl=0,Gl=0,Jl=null,Yl=-1,Xl=0;function eu(){return 0!=(6&Tl)?Je():-1!==Yl?Yl:Yl=Je()}function tu(e){return 0==(1&e.mode)?1:0!=(2&Tl)&&0!==Pl?Pl&-Pl:null!==mo.transition?(0===Xl&&(Xl=yt()),Xl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Gt(e.type)}function nu(e,t,n,r){if(50<Gl)throw Gl=0,Jl=null,Error(o(185));gt(e,n,r),0!=(2&Tl)&&e===_l||(e===_l&&(0==(2&Tl)&&(Bl|=n),4===Il&&su(e,Pl)),ru(e,r),1===n&&0===Tl&&0==(1&t.mode)&&(zl=Je()+500,Fi&&zi()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var a=31-at(o),s=1<<a,l=i[a];-1===l?0!=(s&n)&&0==(s&r)||(i[a]=dt(s,t)):l<=t&&(e.expiredLanes|=s),o&=~s}}(e,t);var r=ft(e,e===_l?Pl:0);if(0===r)null!==n&&Ze(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ze(n),1===t)0===e.tag?function(e){Fi=!0,Ui(e)}(lu.bind(null,e)):Ui(lu.bind(null,e)),ai((function(){0==(6&Tl)&&zi()})),n=null;else{switch(wt(r)){case 1:n=Xe;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=_u(n,iu.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function iu(e,t){if(Yl=-1,Xl=0,0!=(6&Tl))throw Error(o(327));var n=e.callbackNode;if(Eu()&&e.callbackNode!==n)return null;var r=ft(e,e===_l?Pl:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=mu(e,r);else{t=r;var i=Tl;Tl|=2;var a=hu();for(_l===e&&Pl===t||(Vl=null,zl=Je()+500,fu(e,t));;)try{vu();break}catch(t){du(e,t)}Eo(),kl.current=a,Tl=i,null!==Al?t=0:(_l=null,Pl=0,t=Il)}if(0!==t){if(2===t&&0!==(i=ht(e))&&(r=i,t=ou(e,i)),1===t)throw n=jl,fu(e,0),su(e,r),ru(e,Je()),n;if(6===t)su(e,r);else{if(i=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],o=i.getSnapshot;i=i.value;try{if(!sr(o(),i))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(i)&&(2===(t=mu(e,r))&&0!==(a=ht(e))&&(r=a,t=ou(e,a)),1===t))throw n=jl,fu(e,0),su(e,r),ru(e,Je()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:xu(e,Dl,Vl);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=Ul+500-Je())){if(0!==ft(e,0))break;if(((i=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(xu.bind(null,e,Dl,Vl),t);break}xu(e,Dl,Vl);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,i=-1;0<r;){var s=31-at(r);a=1<<s,(s=t[s])>i&&(i=s),r&=~a}if(r=i,10<(r=(120>(r=Je()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ml(r/1960))-r)){e.timeoutHandle=ri(xu.bind(null,e,Dl,Vl),r);break}xu(e,Dl,Vl);break;default:throw Error(o(329))}}}return ru(e,Je()),e.callbackNode===n?iu.bind(null,e):null}function ou(e,t){var n=Fl;return e.current.memoizedState.isDehydrated&&(fu(e,t).flags|=256),2!==(e=mu(e,t))&&(t=Dl,Dl=n,null!==t&&au(t)),e}function au(e){null===Dl?Dl=e:Dl.push.apply(Dl,e)}function su(e,t){for(t&=~$l,t&=~Bl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function lu(e){if(0!=(6&Tl))throw Error(o(327));Eu();var t=ft(e,0);if(0==(1&t))return ru(e,Je()),null;var n=mu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ou(e,r))}if(1===n)throw n=jl,fu(e,0),su(e,t),ru(e,Je()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,xu(e,Dl,Vl),ru(e,Je()),null}function uu(e,t){var n=Tl;Tl|=1;try{return e(t)}finally{0===(Tl=n)&&(zl=Je()+500,Fi&&zi())}}function cu(e){null!==Zl&&0===Zl.tag&&0==(6&Tl)&&Eu();var t=Tl;Tl|=1;var n=Cl.transition,r=bt;try{if(Cl.transition=null,bt=1,e)return e()}finally{bt=r,Cl.transition=n,0==(6&(Tl=t))&&zi()}}function pu(){Nl=Rl.current,ki(Rl)}function fu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ii(n)),null!==Al)for(n=Al.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ri();break;case 3:oa(),ki(_i),ki(Ti),pa();break;case 5:sa(r);break;case 4:oa();break;case 13:case 19:ki(la);break;case 10:So(r.type._context);break;case 22:case 23:pu()}n=n.return}if(_l=e,Al=e=Ru(e.current,null),Pl=Nl=t,Il=0,jl=null,$l=Bl=Ll=0,Dl=Fl=null,null!==Co){for(t=0;t<Co.length;t++)if(null!==(r=(n=Co[t]).interleaved)){n.interleaved=null;var i=r.next,o=n.pending;if(null!==o){var a=o.next;o.next=i,r.next=a}n.pending=r}Co=null}return e}function du(e,t){for(;;){var n=Al;try{if(Eo(),fa.current=as,va){for(var r=ya.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}va=!1}if(ha=0,ga=ma=ya=null,ba=!1,wa=0,Ol.current=null,null===n||null===n.return){Il=1,jl=t,Al=null;break}e:{var a=e,s=n.return,l=n,u=t;if(t=Pl,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,p=l,f=p.tag;if(0==(1&p.mode)&&(0===f||11===f||15===f)){var d=p.alternate;d?(p.updateQueue=d.updateQueue,p.memoizedState=d.memoizedState,p.lanes=d.lanes):(p.updateQueue=null,p.memoizedState=null)}var h=gs(s);if(null!==h){h.flags&=-257,vs(h,s,l,0,t),1&h.mode&&ms(a,c,t),u=c;var y=(t=h).updateQueue;if(null===y){var m=new Set;m.add(u),t.updateQueue=m}else y.add(u);break e}if(0==(1&t)){ms(a,c,t),yu();break e}u=Error(o(426))}else if(io&&1&l.mode){var g=gs(s);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),vs(g,s,l,0,t),yo(cs(u,l));break e}}a=u=cs(u,l),4!==Il&&(Il=2),null===Fl?Fl=[a]:Fl.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Bo(a,hs(0,u,t));break e;case 1:l=u;var v=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Ql||!Ql.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,Bo(a,ys(a,l,t));break e}}a=a.return}while(null!==a)}wu(n)}catch(e){t=e,Al===n&&null!==n&&(Al=n=n.return);continue}break}}function hu(){var e=kl.current;return kl.current=as,null===e?as:e}function yu(){0!==Il&&3!==Il&&2!==Il||(Il=4),null===_l||0==(268435455&Ll)&&0==(268435455&Bl)||su(_l,Pl)}function mu(e,t){var n=Tl;Tl|=2;var r=hu();for(_l===e&&Pl===t||(Vl=null,fu(e,t));;)try{gu();break}catch(t){du(e,t)}if(Eo(),Tl=n,kl.current=r,null!==Al)throw Error(o(261));return _l=null,Pl=0,Il}function gu(){for(;null!==Al;)bu(Al)}function vu(){for(;null!==Al&&!He();)bu(Al)}function bu(e){var t=Sl(e.alternate,e,Nl);e.memoizedProps=e.pendingProps,null===t?wu(e):Al=t,Ol.current=null}function wu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ks(n,t,Nl)))return void(Al=n)}else{if(null!==(n=Zs(n,t)))return n.flags&=32767,void(Al=n);if(null===e)return Il=6,void(Al=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Al=t);Al=t=e}while(null!==t);0===Il&&(Il=5)}function xu(e,t,n){var r=bt,i=Cl.transition;try{Cl.transition=null,bt=1,function(e,t,n,r){do{Eu()}while(null!==Zl);if(0!=(6&Tl))throw Error(o(327));n=e.finishedWork;var i=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-at(n),o=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~o}}(e,a),e===_l&&(Al=_l=null,Pl=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Kl||(Kl=!0,_u(tt,(function(){return Eu(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=Cl.transition,Cl.transition=null;var s=bt;bt=1;var l=Tl;Tl|=4,Ol.current=null,function(e,t){if(ei=Wt,dr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var s=0,l=-1,u=-1,c=0,p=0,f=e,d=null;t:for(;;){for(var h;f!==n||0!==i&&3!==f.nodeType||(l=s+i),f!==a||0!==r&&3!==f.nodeType||(u=s+r),3===f.nodeType&&(s+=f.nodeValue.length),null!==(h=f.firstChild);)d=f,f=h;for(;;){if(f===e)break t;if(d===n&&++c===i&&(l=s),d===a&&++p===r&&(u=s),null!==(h=f.nextSibling))break;d=(f=d).parentNode}f=h}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ti={focusedElem:e,selectionRange:n},Wt=!1,Ys=t;null!==Ys;)if(e=(t=Ys).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Ys=e;else for(;null!==Ys;){t=Ys;try{var y=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==y){var m=y.memoizedProps,g=y.memoizedState,v=t.stateNode,b=v.getSnapshotBeforeUpdate(t.elementType===t.type?m:go(t.type,m),g);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(o(163))}}catch(e){Mu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ys=e;break}Ys=t.return}y=tl,tl=!1}(e,n),ml(n,e),hr(ti),Wt=!!ei,ti=ei=null,e.current=n,vl(n,e,i),Ge(),Tl=l,bt=s,Cl.transition=a}else e.current=n;if(Kl&&(Kl=!1,Zl=e,Hl=i),0===(a=e.pendingLanes)&&(Ql=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(it,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ru(e,Je()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((i=t[n]).value,{componentStack:i.stack,digest:i.digest});if(Wl)throw Wl=!1,e=ql,ql=null,e;0!=(1&Hl)&&0!==e.tag&&Eu(),0!=(1&(a=e.pendingLanes))?e===Jl?Gl++:(Gl=0,Jl=e):Gl=0,zi()}(e,t,n,r)}finally{Cl.transition=i,bt=r}return null}function Eu(){if(null!==Zl){var e=wt(Hl),t=Cl.transition,n=bt;try{if(Cl.transition=null,bt=16>e?16:e,null===Zl)var r=!1;else{if(e=Zl,Zl=null,Hl=0,0!=(6&Tl))throw Error(o(331));var i=Tl;for(Tl|=4,Ys=e.current;null!==Ys;){var a=Ys,s=a.child;if(0!=(16&Ys.flags)){var l=a.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for(Ys=c;null!==Ys;){var p=Ys;switch(p.tag){case 0:case 11:case 15:nl(8,p,a)}var f=p.child;if(null!==f)f.return=p,Ys=f;else for(;null!==Ys;){var d=(p=Ys).sibling,h=p.return;if(ol(p),p===c){Ys=null;break}if(null!==d){d.return=h,Ys=d;break}Ys=h}}}var y=a.alternate;if(null!==y){var m=y.child;if(null!==m){y.child=null;do{var g=m.sibling;m.sibling=null,m=g}while(null!==m)}}Ys=a}}if(0!=(2064&a.subtreeFlags)&&null!==s)s.return=a,Ys=s;else e:for(;null!==Ys;){if(0!=(2048&(a=Ys).flags))switch(a.tag){case 0:case 11:case 15:nl(9,a,a.return)}var v=a.sibling;if(null!==v){v.return=a.return,Ys=v;break e}Ys=a.return}}var b=e.current;for(Ys=b;null!==Ys;){var w=(s=Ys).child;if(0!=(2064&s.subtreeFlags)&&null!==w)w.return=s,Ys=w;else e:for(s=b;null!==Ys;){if(0!=(2048&(l=Ys).flags))try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){Mu(l,l.return,e)}if(l===s){Ys=null;break e}var x=l.sibling;if(null!==x){x.return=l.return,Ys=x;break e}Ys=l.return}}if(Tl=i,zi(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{bt=n,Cl.transition=t}}return!1}function Su(e,t,n){e=jo(e,t=hs(0,t=cs(n,t),1),1),t=eu(),null!==e&&(gt(e,1,t),ru(e,t))}function Mu(e,t,n){if(3===e.tag)Su(e,e,n);else for(;null!==t;){if(3===t.tag){Su(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ql||!Ql.has(r))){t=jo(t,e=ys(t,e=cs(n,e),1),1),e=eu(),null!==t&&(gt(t,1,e),ru(t,e));break}}t=t.return}}function ku(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&n,_l===e&&(Pl&n)===n&&(4===Il||3===Il&&(130023424&Pl)===Pl&&500>Je()-Ul?fu(e,0):$l|=n),ru(e,t)}function Ou(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=eu();null!==(e=Ao(e,t))&&(gt(e,t,n),ru(e,n))}function Cu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Ou(e,n)}function Tu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Ou(e,n)}function _u(e,t){return Ke(e,t)}function Au(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Pu(e,t,n,r){return new Au(e,t,n,r)}function Nu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ru(e,t){var n=e.alternate;return null===n?((n=Pu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Iu(e,t,n,r,i,a){var s=2;if(r=e,"function"==typeof e)Nu(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case S:return ju(n.children,i,a,t);case M:s=8,i|=8;break;case k:return(e=Pu(12,n,t,2|i)).elementType=k,e.lanes=a,e;case _:return(e=Pu(13,n,t,i)).elementType=_,e.lanes=a,e;case A:return(e=Pu(19,n,t,i)).elementType=A,e.lanes=a,e;case R:return Lu(n,i,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:s=10;break e;case C:s=9;break e;case T:s=11;break e;case P:s=14;break e;case N:s=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Pu(s,n,t,i)).elementType=e,t.type=r,t.lanes=a,t}function ju(e,t,n,r){return(e=Pu(7,e,r,t)).lanes=n,e}function Lu(e,t,n,r){return(e=Pu(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function Bu(e,t,n){return(e=Pu(6,e,null,t)).lanes=n,e}function $u(e,t,n){return(t=Pu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fu(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Du(e,t,n,r,i,o,a,s,l){return e=new Fu(e,t,n,s,l),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Pu(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},No(o),e}function Uu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function zu(e){if(!e)return Ci;e:{if(ze(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ni(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ni(n))return ji(e,n,t)}return t}function Vu(e,t,n,r,i,o,a,s,l){return(e=Du(n,r,!0,e,0,o,0,s,l)).context=zu(null),n=e.current,(o=Io(r=eu(),i=tu(n))).callback=null!=t?t:null,jo(n,o,i),e.current.lanes=i,gt(e,i,r),ru(e,r),e}function Wu(e,t,n,r){var i=t.current,o=eu(),a=tu(i);return n=zu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Io(o,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=jo(i,t,a))&&(nu(e,i,a,o),Lo(e,i,a)),a}function qu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Qu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ku(e,t){Qu(e,t),(e=e.alternate)&&Qu(e,t)}Sl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||_i.current)ws=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return ws=!1,function(e,t,n){switch(t.tag){case 3:As(t),ho();break;case 5:aa(t);break;case 1:Ni(t.type)&&Li(t);break;case 4:ia(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;Oi(vo,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Oi(la,1&la.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Bs(e,t,n):(Oi(la,1&la.current),null!==(e=Ws(e,t,n))?e.sibling:null);Oi(la,1&la.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return zs(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),Oi(la,la.current),r)break;return null;case 22:case 23:return t.lanes=0,ks(e,t,n)}return Ws(e,t,n)}(e,t,n);ws=0!=(131072&e.flags)}else ws=!1,io&&0!=(1048576&t.flags)&&Xi(t,Qi,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vs(e,t),e=t.pendingProps;var i=Pi(t,Ti.current);ko(t,n),i=Ma(null,t,r,e,i,n);var a=ka();return t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ni(r)?(a=!0,Li(t)):a=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,No(t),i.updater=zo,t.stateNode=i,i._reactInternals=t,Qo(t,r,e,n),t=_s(null,t,r,!0,a,n)):(t.tag=0,io&&a&&eo(t),xs(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vs(e,t),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return Nu(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===P)return 14}return 2}(r),e=go(r,e),i){case 0:t=Cs(null,t,r,e,n);break e;case 1:t=Ts(null,t,r,e,n);break e;case 11:t=Es(null,t,r,e,n);break e;case 14:t=Ss(null,t,r,go(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,Cs(e,t,r,i=t.elementType===r?i:go(r,i),n);case 1:return r=t.type,i=t.pendingProps,Ts(e,t,r,i=t.elementType===r?i:go(r,i),n);case 3:e:{if(As(t),null===e)throw Error(o(387));r=t.pendingProps,i=(a=t.memoizedState).element,Ro(e,t),$o(t,r,null,n);var s=t.memoizedState;if(r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Ps(e,t,r,n,i=cs(Error(o(423)),t));break e}if(r!==i){t=Ps(e,t,r,n,i=cs(Error(o(424)),t));break e}for(ro=ui(t.stateNode.containerInfo.firstChild),no=t,io=!0,oo=null,n=Yo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===i){t=Ws(e,t,n);break e}xs(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&uo(t),r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,s=i.children,ni(r,i)?s=null:null!==a&&ni(r,a)&&(t.flags|=32),Os(e,t),xs(e,t,s,n),t.child;case 6:return null===e&&uo(t),null;case 13:return Bs(e,t,n);case 4:return ia(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Jo(t,null,r,n):xs(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Es(e,t,r,i=t.elementType===r?i:go(r,i),n);case 7:return xs(e,t,t.pendingProps,n),t.child;case 8:case 12:return xs(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,a=t.memoizedProps,s=i.value,Oi(vo,r._currentValue),r._currentValue=s,null!==a)if(sr(a.value,s)){if(a.children===i.children&&!_i.current){t=Ws(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){s=a.child;for(var u=l.firstContext;null!==u;){if(u.context===r){if(1===a.tag){(u=Io(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var p=(c=c.shared).pending;null===p?u.next=u:(u.next=p.next,p.next=u),c.pending=u}}a.lanes|=n,null!==(u=a.alternate)&&(u.lanes|=n),Mo(a.return,n,t),l.lanes|=n;break}u=u.next}}else if(10===a.tag)s=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(o(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),Mo(s,n,t),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===t){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}xs(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,ko(t,n),r=r(i=Oo(i)),t.flags|=1,xs(e,t,r,n),t.child;case 14:return i=go(r=t.type,t.pendingProps),Ss(e,t,r,i=go(r.type,i),n);case 15:return Ms(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:go(r,i),Vs(e,t),t.tag=1,Ni(r)?(e=!0,Li(t)):e=!1,ko(t,n),Wo(t,r,i),Qo(t,r,i,n),_s(null,t,r,!0,e,n);case 19:return zs(e,t,n);case 22:return ks(e,t,n)}throw Error(o(156,t.tag))};var Zu="function"==typeof reportError?reportError:function(e){console.error(e)};function Hu(e){this._internalRoot=e}function Gu(e){this._internalRoot=e}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Yu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xu(){}function ec(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o;if("function"==typeof i){var s=i;i=function(){var e=qu(a);s.call(e)}}Wu(t,a,e,i)}else a=function(e,t,n,r,i){if(i){if("function"==typeof r){var o=r;r=function(){var e=qu(a);o.call(e)}}var a=Vu(t,r,e,0,null,!1,0,"",Xu);return e._reactRootContainer=a,e[hi]=a.current,zr(8===e.nodeType?e.parentNode:e),cu(),a}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var s=r;r=function(){var e=qu(l);s.call(e)}}var l=Du(e,0,!1,null,0,!1,0,"",Xu);return e._reactRootContainer=l,e[hi]=l.current,zr(8===e.nodeType?e.parentNode:e),cu((function(){Wu(t,l,n,r)})),l}(n,t,e,i,r);return qu(a)}Gu.prototype.render=Hu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Wu(e,t,null,null)},Gu.prototype.unmount=Hu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu((function(){Wu(null,e,null,null)})),t[hi]=null}},Gu.prototype.unstable_scheduleHydration=function(e){if(e){var t=Mt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&Bt(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=pt(t.pendingLanes);0!==n&&(vt(t,1|n),ru(t,Je()),0==(6&Tl)&&(zl=Je()+500,zi()))}break;case 13:cu((function(){var t=Ao(e,1);if(null!==t){var n=eu();nu(t,e,1,n)}})),Ku(e,1)}},Et=function(e){if(13===e.tag){var t=Ao(e,134217728);null!==t&&nu(t,e,134217728,eu()),Ku(e,134217728)}},St=function(e){if(13===e.tag){var t=tu(e),n=Ao(e,t);null!==n&&nu(n,e,t,eu()),Ku(e,t)}},Mt=function(){return bt},kt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ee=function(e,t,n){switch(t){case"input":if(Y(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=xi(r);if(!i)throw Error(o(90));K(r),Y(r,i)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Te=uu,_e=cu;var tc={usingClientEntryPoint:!1,Events:[bi,wi,xi,Oe,Ce,uu]},nc={findFiberByHostInstance:vi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=qe(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{it=ic.inject(rc),ot=ic}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ju(t))throw Error(o(200));return Uu(e,t,null,n)},t.createRoot=function(e,t){if(!Ju(e))throw Error(o(299));var n=!1,r="",i=Zu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),t=Du(e,1,!1,null,0,n,0,r,i),e[hi]=t.current,zr(8===e.nodeType?e.parentNode:e),new Hu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=qe(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,n){if(!Yu(t))throw Error(o(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ju(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,i=!1,a="",s=Zu;if(null!=n&&(!0===n.unstable_strictMode&&(i=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Vu(t,null,e,1,null!=n?n:null,i,0,a,s),e[hi]=t.current,zr(e),r)for(e=0;e<r.length;e++)i=(i=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Gu(t)},t.render=function(e,t,n){if(!Yu(t))throw Error(o(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Yu(e))throw Error(o(40));return!!e._reactRootContainer&&(cu((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[hi]=null}))})),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Yu(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(3935);t.s=r.createRoot,r.hydrateRoot},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context");var n=Symbol.for("react.forward_ref"),r=(Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"));Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference"),t.ForwardRef=n,t.Memo=r},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},5251:(e,t,n)=>{"use strict";var r=n(7294),i=Symbol.for("react.element"),o=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,n){var r,l={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)o.call(t,r)&&!s.hasOwnProperty(r)&&(l[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===l[r]&&(l[r]=t[r]);return{$$typeof:i,type:e,key:u,ref:c,props:l,_owner:a.current}}t.jsx=l,t.jsxs=l},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),p=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),d=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y=Object.assign,m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var w=b.prototype=new v;w.constructor=b,y(w,g.prototype),w.isPureReactComponent=!0;var x=Array.isArray,E=Object.prototype.hasOwnProperty,S={current:null},M={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,r){var i,o={},a=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)E.call(t,i)&&!M.hasOwnProperty(i)&&(o[i]=t[i]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:n,type:e,key:a,ref:s,props:o,_owner:S.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function _(e,t,i,o,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return a=a(l=e),e=""===o?"."+T(l,0):o,x(a)?(i="",null!=e&&(i=e.replace(C,"$&/")+"/"),_(a,t,i,"",(function(e){return e}))):null!=a&&(O(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,i+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(l=0,o=""===o?".":o+":",x(e))for(var u=0;u<e.length;u++){var c=o+T(s=e[u],u);l+=_(s,t,i,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=_(s=s.value,t,i,c=o+T(s,u++),a);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function A(e,t,n){if(null==e)return e;var r=[],i=0;return _(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function P(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},R={transition:null},I={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:R,ReactCurrentOwner:S};t.Children={map:A,forEach:function(e,t,n){A(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return A(e,(function(){t++})),t},toArray:function(e){return A(e,(function(e){return e}))||[]},only:function(e){if(!O(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=i,t.Profiler=a,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=y({},e.props),o=e.key,a=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,s=S.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)E.call(t,u)&&!M.hasOwnProperty(u)&&(i[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];i.children=l}return{$$typeof:n,type:e.type,key:o,ref:a,props:i,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:p,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},8660:(e,t,n)=>{var r;!function(e){!function(t){var r="object"==typeof n.g?n.g:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),i=o(e);function o(e,t){return function(n,r){"function"!=typeof e[n]&&Object.defineProperty(e,n,{configurable:!0,writable:!0,value:r}),t&&t(n,r)}}void 0===r.Reflect?r.Reflect=e:i=o(r.Reflect,i),function(e){var t=Object.prototype.hasOwnProperty,n="function"==typeof Symbol,r=n&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=n&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",o="function"==typeof Object.create,a={__proto__:[]}instanceof Array,s=!o&&!a,l={create:o?function(){return j(Object.create(null))}:a?function(){return j({__proto__:null})}:function(){return j({})},has:s?function(e,n){return t.call(e,n)}:function(e,t){return t in e},get:s?function(e,n){return t.call(e,n)?e[n]:void 0}:function(e,t){return e[t]}},u=Object.getPrototypeOf(Function),c="object"==typeof process&&process.env&&"true"===process.env.REFLECT_METADATA_USE_MAP_POLYFILL,p=c||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var e={},t=[],n=function(){function e(e,t,n){this._index=0,this._keys=e,this._values=t,this._selector=n}return e.prototype["@@iterator"]=function(){return this},e.prototype[i]=function(){return this},e.prototype.next=function(){var e=this._index;if(e>=0&&e<this._keys.length){var n=this._selector(this._keys[e],this._values[e]);return e+1>=this._keys.length?(this._index=-1,this._keys=t,this._values=t):this._index++,{value:n,done:!1}}return{value:void 0,done:!0}},e.prototype.throw=function(e){throw this._index>=0&&(this._index=-1,this._keys=t,this._values=t),e},e.prototype.return=function(e){return this._index>=0&&(this._index=-1,this._keys=t,this._values=t),{value:e,done:!0}},e}();return function(){function t(){this._keys=[],this._values=[],this._cacheKey=e,this._cacheIndex=-2}return Object.defineProperty(t.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),t.prototype.has=function(e){return this._find(e,!1)>=0},t.prototype.get=function(e){var t=this._find(e,!1);return t>=0?this._values[t]:void 0},t.prototype.set=function(e,t){var n=this._find(e,!0);return this._values[n]=t,this},t.prototype.delete=function(t){var n=this._find(t,!1);if(n>=0){for(var r=this._keys.length,i=n+1;i<r;i++)this._keys[i-1]=this._keys[i],this._values[i-1]=this._values[i];return this._keys.length--,this._values.length--,t===this._cacheKey&&(this._cacheKey=e,this._cacheIndex=-2),!0}return!1},t.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=e,this._cacheIndex=-2},t.prototype.keys=function(){return new n(this._keys,this._values,r)},t.prototype.values=function(){return new n(this._keys,this._values,o)},t.prototype.entries=function(){return new n(this._keys,this._values,a)},t.prototype["@@iterator"]=function(){return this.entries()},t.prototype[i]=function(){return this.entries()},t.prototype._find=function(e,t){return this._cacheKey!==e&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=e)),this._cacheIndex<0&&t&&(this._cacheIndex=this._keys.length,this._keys.push(e),this._values.push(void 0)),this._cacheIndex},t}();function r(e,t){return e}function o(e,t){return t}function a(e,t){return[e,t]}}():Map,f=c||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function e(){this._map=new p}return Object.defineProperty(e.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.add=function(e){return this._map.set(e,e),this},e.prototype.delete=function(e){return this._map.delete(e)},e.prototype.clear=function(){this._map.clear()},e.prototype.keys=function(){return this._map.keys()},e.prototype.values=function(){return this._map.values()},e.prototype.entries=function(){return this._map.entries()},e.prototype["@@iterator"]=function(){return this.keys()},e.prototype[i]=function(){return this.keys()},e}():Set,d=new(c||"function"!=typeof WeakMap?function(){var e=l.create(),n=r();return function(){function e(){this._key=r()}return e.prototype.has=function(e){var t=i(e,!1);return void 0!==t&&l.has(t,this._key)},e.prototype.get=function(e){var t=i(e,!1);return void 0!==t?l.get(t,this._key):void 0},e.prototype.set=function(e,t){return i(e,!0)[this._key]=t,this},e.prototype.delete=function(e){var t=i(e,!1);return void 0!==t&&delete t[this._key]},e.prototype.clear=function(){this._key=r()},e}();function r(){var t;do{t="@@WeakMap@@"+a()}while(l.has(e,t));return e[t]=!0,t}function i(e,r){if(!t.call(e,n)){if(!r)return;Object.defineProperty(e,n,{value:l.create()})}return e[n]}function o(e,t){for(var n=0;n<t;++n)e[n]=255*Math.random()|0;return e}function a(){var e,t=(e=16,"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(e)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(e)):o(new Uint8Array(e),e):o(new Array(e),e));t[6]=79&t[6]|64,t[8]=191&t[8]|128;for(var n="",r=0;r<16;++r){var i=t[r];4!==r&&6!==r&&8!==r||(n+="-"),i<16&&(n+="0"),n+=i.toString(16).toLowerCase()}return n}}():WeakMap);function h(e,t,n){var r=d.get(e);if(S(r)){if(!n)return;r=new p,d.set(e,r)}var i=r.get(t);if(S(i)){if(!n)return;i=new p,r.set(t,i)}return i}function y(e,t,n){if(m(e,t,n))return!0;var r=I(t);return!M(r)&&y(e,r,n)}function m(e,t,n){var r=h(t,n,!1);return!S(r)&&!!r.has(e)}function g(e,t,n){if(m(e,t,n))return v(e,t,n);var r=I(t);return M(r)?void 0:g(e,r,n)}function v(e,t,n){var r=h(t,n,!1);if(!S(r))return r.get(e)}function b(e,t,n,r){h(n,r,!0).set(e,t)}function w(e,t){var n=x(e,t),r=I(e);if(null===r)return n;var i=w(r,t);if(i.length<=0)return n;if(n.length<=0)return i;for(var o=new f,a=[],s=0,l=n;s<l.length;s++){var u=l[s];o.has(u)||(o.add(u),a.push(u))}for(var c=0,p=i;c<p.length;c++)u=p[c],o.has(u)||(o.add(u),a.push(u));return a}function x(e,t){var n=[],r=h(e,t,!1);if(S(r))return n;for(var o=function(e){var t=P(e,i);if(!_(t))throw new TypeError;var n=t.call(e);if(!k(n))throw new TypeError;return n}(r.keys()),a=0;;){var s=N(o);if(!s)return n.length=a,n;var l=s.value;try{n[a]=l}catch(e){try{R(o)}finally{throw e}}a++}}function E(e){if(null===e)return 1;switch(typeof e){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===e?1:6;default:return 6}}function S(e){return void 0===e}function M(e){return null===e}function k(e){return"object"==typeof e?null!==e:"function"==typeof e}function O(e,t){switch(E(e)){case 0:case 1:case 2:case 3:case 4:case 5:return e}var n=3===t?"string":5===t?"number":"default",i=P(e,r);if(void 0!==i){var o=i.call(e,n);if(k(o))throw new TypeError;return o}return function(e,t){if("string"===t){var n=e.toString;if(_(n)&&!k(i=n.call(e)))return i;if(_(r=e.valueOf)&&!k(i=r.call(e)))return i}else{var r;if(_(r=e.valueOf)&&!k(i=r.call(e)))return i;var i,o=e.toString;if(_(o)&&!k(i=o.call(e)))return i}throw new TypeError}(e,"default"===n?"number":n)}function C(e){var t=O(e,3);return"symbol"==typeof t?t:function(e){return""+e}(t)}function T(e){return Array.isArray?Array.isArray(e):e instanceof Object?e instanceof Array:"[object Array]"===Object.prototype.toString.call(e)}function _(e){return"function"==typeof e}function A(e){return"function"==typeof e}function P(e,t){var n=e[t];if(null!=n){if(!_(n))throw new TypeError;return n}}function N(e){var t=e.next();return!t.done&&t}function R(e){var t=e.return;t&&t.call(e)}function I(e){var t=Object.getPrototypeOf(e);if("function"!=typeof e||e===u)return t;if(t!==u)return t;var n=e.prototype,r=n&&Object.getPrototypeOf(n);if(null==r||r===Object.prototype)return t;var i=r.constructor;return"function"!=typeof i||i===e?t:i}function j(e){return e.__=void 0,delete e.__,e}e("decorate",(function(e,t,n,r){if(S(n)){if(!T(e))throw new TypeError;if(!A(t))throw new TypeError;return function(e,t){for(var n=e.length-1;n>=0;--n){var r=(0,e[n])(t);if(!S(r)&&!M(r)){if(!A(r))throw new TypeError;t=r}}return t}(e,t)}if(!T(e))throw new TypeError;if(!k(t))throw new TypeError;if(!k(r)&&!S(r)&&!M(r))throw new TypeError;return M(r)&&(r=void 0),function(e,t,n,r){for(var i=e.length-1;i>=0;--i){var o=(0,e[i])(t,n,r);if(!S(o)&&!M(o)){if(!k(o))throw new TypeError;r=o}}return r}(e,t,n=C(n),r)})),e("metadata",(function(e,t){return function(n,r){if(!k(n))throw new TypeError;if(!S(r)&&!function(e){switch(E(e)){case 3:case 4:return!0;default:return!1}}(r))throw new TypeError;b(e,t,n,r)}})),e("defineMetadata",(function(e,t,n,r){if(!k(n))throw new TypeError;return S(r)||(r=C(r)),b(e,t,n,r)})),e("hasMetadata",(function(e,t,n){if(!k(t))throw new TypeError;return S(n)||(n=C(n)),y(e,t,n)})),e("hasOwnMetadata",(function(e,t,n){if(!k(t))throw new TypeError;return S(n)||(n=C(n)),m(e,t,n)})),e("getMetadata",(function(e,t,n){if(!k(t))throw new TypeError;return S(n)||(n=C(n)),g(e,t,n)})),e("getOwnMetadata",(function(e,t,n){if(!k(t))throw new TypeError;return S(n)||(n=C(n)),v(e,t,n)})),e("getMetadataKeys",(function(e,t){if(!k(e))throw new TypeError;return S(t)||(t=C(t)),w(e,t)})),e("getOwnMetadataKeys",(function(e,t){if(!k(e))throw new TypeError;return S(t)||(t=C(t)),x(e,t)})),e("deleteMetadata",(function(e,t,n){if(!k(t))throw new TypeError;S(n)||(n=C(n));var r=h(t,n,!1);if(S(r))return!1;if(!r.delete(e))return!1;if(r.size>0)return!0;var i=d.get(t);return i.delete(n),i.size>0||d.delete(t),!0}))}(i)}()}(r||(r={}))},9509:(e,t,n)=>{var r=n(8764),i=r.Buffer;function o(e,t){for(var n in e)t[n]=e[n]}function a(e,t,n){return i(e,t,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=r:(o(r,t),t.Buffer=a),a.prototype=Object.create(i.prototype),o(i,a),a.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,n)},a.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var r=i(e);return void 0!==t?"string"==typeof n?r.fill(t,n):r.fill(t):r.fill(0),r},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<o(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,a=i>>>1;r<a;){var s=2*(r+1)-1,l=e[s],u=s+1,c=e[u];if(0>o(l,n))u<i&&0>o(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[s]=n,r=s);else{if(!(u<i&&0>o(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var u=[],c=[],p=1,f=null,d=3,h=!1,y=!1,m=!1,g="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)i(c);else{if(!(t.startTime<=e))break;i(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function x(e){if(m=!1,w(e),!y)if(null!==r(u))y=!0,R(E);else{var t=r(c);null!==t&&I(x,t.startTime-e)}}function E(e,n){y=!1,m&&(m=!1,v(O),O=-1),h=!0;var o=d;try{for(w(n),f=r(u);null!==f&&(!(f.expirationTime>n)||e&&!_());){var a=f.callback;if("function"==typeof a){f.callback=null,d=f.priorityLevel;var s=a(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?f.callback=s:f===r(u)&&i(u),w(n)}else i(u);f=r(u)}if(null!==f)var l=!0;else{var p=r(c);null!==p&&I(x,p.startTime-n),l=!1}return l}finally{f=null,d=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,M=!1,k=null,O=-1,C=5,T=-1;function _(){return!(t.unstable_now()-T<C)}function A(){if(null!==k){var e=t.unstable_now();T=e;var n=!0;try{n=k(!0,e)}finally{n?S():(M=!1,k=null)}}else M=!1}if("function"==typeof b)S=function(){b(A)};else if("undefined"!=typeof MessageChannel){var P=new MessageChannel,N=P.port2;P.port1.onmessage=A,S=function(){N.postMessage(null)}}else S=function(){g(A,0)};function R(e){k=e,M||(M=!0,S())}function I(e,n){O=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){y||h||(y=!0,R(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return d},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(d){case 1:case 2:case 3:var t=3;break;default:t=d}var n=d;d=t;try{return e()}finally{d=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=d;d=e;try{return t()}finally{d=n}},t.unstable_scheduleCallback=function(e,i,o){var a=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?a+o:a,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:p++,callback:i,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>a?(e.sortIndex=o,n(c,e),null===r(u)&&e===r(c)&&(m?(v(O),O=-1):m=!0,I(x,o-a))):(e.sortIndex=s,n(u,e),y||h||(y=!0,R(E))),e},t.unstable_shouldYield=_,t.unstable_wrapCallback=function(e){var t=d;return function(){var n=d;d=t;try{return e.apply(this,arguments)}finally{d=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},4189:(e,t,n)=>{var r=n(9509).Buffer;function i(e,t){this._block=r.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}i.prototype.update=function(e,t){"string"==typeof e&&(t=t||"utf8",e=r.from(e,t));for(var n=this._block,i=this._blockSize,o=e.length,a=this._len,s=0;s<o;){for(var l=a%i,u=Math.min(o-s,i-l),c=0;c<u;c++)n[l+c]=e[s+c];s+=u,(a+=u)%i==0&&this._update(n)}return this._len+=o,this},i.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var n=8*this._len;if(n<=4294967295)this._block.writeUInt32BE(n,this._blockSize-4);else{var r=(4294967295&n)>>>0,i=(n-r)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(r,this._blockSize-4)}this._update(this._block);var o=this._hash();return e?o.toString(e):o},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},e.exports=i},9072:(e,t,n)=>{var r=e.exports=function(e){e=e.toLowerCase();var t=r[e];if(!t)throw new Error(e+" is not supported (we accept pull requests)");return new t};r.sha=n(2349),r.sha1=n(8336),r.sha224=n(8432),r.sha256=n(7499),r.sha384=n(1686),r.sha512=n(7816)},2349:(e,t,n)=>{var r=n(5717),i=n(4189),o=n(9509).Buffer,a=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function l(){this.init(),this._w=s,i.call(this,64,56)}function u(e){return e<<30|e>>>2}function c(e,t,n,r){return 0===e?t&n|~t&r:2===e?t&n|t&r|n&r:t^n^r}r(l,i),l.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},l.prototype._update=function(e){for(var t,n=this._w,r=0|this._a,i=0|this._b,o=0|this._c,s=0|this._d,l=0|this._e,p=0;p<16;++p)n[p]=e.readInt32BE(4*p);for(;p<80;++p)n[p]=n[p-3]^n[p-8]^n[p-14]^n[p-16];for(var f=0;f<80;++f){var d=~~(f/20),h=0|((t=r)<<5|t>>>27)+c(d,i,o,s)+l+n[f]+a[d];l=s,s=o,o=u(i),i=r,r=h}this._a=r+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=l+this._e|0},l.prototype._hash=function(){var e=o.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=l},8336:(e,t,n)=>{var r=n(5717),i=n(4189),o=n(9509).Buffer,a=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function l(){this.init(),this._w=s,i.call(this,64,56)}function u(e){return e<<5|e>>>27}function c(e){return e<<30|e>>>2}function p(e,t,n,r){return 0===e?t&n|~t&r:2===e?t&n|t&r|n&r:t^n^r}r(l,i),l.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},l.prototype._update=function(e){for(var t,n=this._w,r=0|this._a,i=0|this._b,o=0|this._c,s=0|this._d,l=0|this._e,f=0;f<16;++f)n[f]=e.readInt32BE(4*f);for(;f<80;++f)n[f]=(t=n[f-3]^n[f-8]^n[f-14]^n[f-16])<<1|t>>>31;for(var d=0;d<80;++d){var h=~~(d/20),y=u(r)+p(h,i,o,s)+l+n[d]+a[h]|0;l=s,s=o,o=c(i),i=r,r=y}this._a=r+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=l+this._e|0},l.prototype._hash=function(){var e=o.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=l},8432:(e,t,n)=>{var r=n(5717),i=n(7499),o=n(4189),a=n(9509).Buffer,s=new Array(64);function l(){this.init(),this._w=s,o.call(this,64,56)}r(l,i),l.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},l.prototype._hash=function(){var e=a.allocUnsafe(28);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e},e.exports=l},7499:(e,t,n)=>{var r=n(5717),i=n(4189),o=n(9509).Buffer,a=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=new Array(64);function l(){this.init(),this._w=s,i.call(this,64,56)}function u(e,t,n){return n^e&(t^n)}function c(e,t,n){return e&t|n&(e|t)}function p(e){return(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10)}function f(e){return(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7)}function d(e){return(e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3}r(l,i),l.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},l.prototype._update=function(e){for(var t,n=this._w,r=0|this._a,i=0|this._b,o=0|this._c,s=0|this._d,l=0|this._e,h=0|this._f,y=0|this._g,m=0|this._h,g=0;g<16;++g)n[g]=e.readInt32BE(4*g);for(;g<64;++g)n[g]=0|(((t=n[g-2])>>>17|t<<15)^(t>>>19|t<<13)^t>>>10)+n[g-7]+d(n[g-15])+n[g-16];for(var v=0;v<64;++v){var b=m+f(l)+u(l,h,y)+a[v]+n[v]|0,w=p(r)+c(r,i,o)|0;m=y,y=h,h=l,l=s+b|0,s=o,o=i,i=r,r=b+w|0}this._a=r+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=l+this._e|0,this._f=h+this._f|0,this._g=y+this._g|0,this._h=m+this._h|0},l.prototype._hash=function(){var e=o.allocUnsafe(32);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e.writeInt32BE(this._h,28),e},e.exports=l},1686:(e,t,n)=>{var r=n(5717),i=n(7816),o=n(4189),a=n(9509).Buffer,s=new Array(160);function l(){this.init(),this._w=s,o.call(this,128,112)}r(l,i),l.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},l.prototype._hash=function(){var e=a.allocUnsafe(48);function t(t,n,r){e.writeInt32BE(t,r),e.writeInt32BE(n,r+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),e},e.exports=l},7816:(e,t,n)=>{var r=n(5717),i=n(4189),o=n(9509).Buffer,a=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],s=new Array(160);function l(){this.init(),this._w=s,i.call(this,128,112)}function u(e,t,n){return n^e&(t^n)}function c(e,t,n){return e&t|n&(e|t)}function p(e,t){return(e>>>28|t<<4)^(t>>>2|e<<30)^(t>>>7|e<<25)}function f(e,t){return(e>>>14|t<<18)^(e>>>18|t<<14)^(t>>>9|e<<23)}function d(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^e>>>7}function h(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^(e>>>7|t<<25)}function y(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^e>>>6}function m(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^(e>>>6|t<<26)}function g(e,t){return e>>>0<t>>>0?1:0}r(l,i),l.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},l.prototype._update=function(e){for(var t=this._w,n=0|this._ah,r=0|this._bh,i=0|this._ch,o=0|this._dh,s=0|this._eh,l=0|this._fh,v=0|this._gh,b=0|this._hh,w=0|this._al,x=0|this._bl,E=0|this._cl,S=0|this._dl,M=0|this._el,k=0|this._fl,O=0|this._gl,C=0|this._hl,T=0;T<32;T+=2)t[T]=e.readInt32BE(4*T),t[T+1]=e.readInt32BE(4*T+4);for(;T<160;T+=2){var _=t[T-30],A=t[T-30+1],P=d(_,A),N=h(A,_),R=y(_=t[T-4],A=t[T-4+1]),I=m(A,_),j=t[T-14],L=t[T-14+1],B=t[T-32],$=t[T-32+1],F=N+L|0,D=P+j+g(F,N)|0;D=(D=D+R+g(F=F+I|0,I)|0)+B+g(F=F+$|0,$)|0,t[T]=D,t[T+1]=F}for(var U=0;U<160;U+=2){D=t[U],F=t[U+1];var z=c(n,r,i),V=c(w,x,E),W=p(n,w),q=p(w,n),Q=f(s,M),K=f(M,s),Z=a[U],H=a[U+1],G=u(s,l,v),J=u(M,k,O),Y=C+K|0,X=b+Q+g(Y,C)|0;X=(X=(X=X+G+g(Y=Y+J|0,J)|0)+Z+g(Y=Y+H|0,H)|0)+D+g(Y=Y+F|0,F)|0;var ee=q+V|0,te=W+z+g(ee,q)|0;b=v,C=O,v=l,O=k,l=s,k=M,s=o+X+g(M=S+Y|0,S)|0,o=i,S=E,i=r,E=x,r=n,x=w,n=X+te+g(w=Y+ee|0,Y)|0}this._al=this._al+w|0,this._bl=this._bl+x|0,this._cl=this._cl+E|0,this._dl=this._dl+S|0,this._el=this._el+M|0,this._fl=this._fl+k|0,this._gl=this._gl+O|0,this._hl=this._hl+C|0,this._ah=this._ah+n+g(this._al,w)|0,this._bh=this._bh+r+g(this._bl,x)|0,this._ch=this._ch+i+g(this._cl,E)|0,this._dh=this._dh+o+g(this._dl,S)|0,this._eh=this._eh+s+g(this._el,M)|0,this._fh=this._fh+l+g(this._fl,k)|0,this._gh=this._gh+v+g(this._gl,O)|0,this._hh=this._hh+b+g(this._hl,C)|0},l.prototype._hash=function(){var e=o.allocUnsafe(64);function t(t,n,r){e.writeInt32BE(t,r),e.writeInt32BE(n,r+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),t(this._gh,this._gl,48),t(this._hh,this._hl,56),e},e.exports=l},6745:(e,t,n)=>{"use strict";n.d(t,{z:()=>a});var r=n(5022);class i{static isGreaterOrEqual(e,t){const n=o(e),r=o(t);return n[0]>r[0]||n[0]===r[0]&&n[1]>r[1]||n[0]===r[0]&&n[1]===r[1]&&n[2]>=r[2]}}function o(e=""){const t=[0,0,0];return e.split(".").forEach(((e,n)=>t[n]=parseInt(e,10))),t}class a{static isSQLiteFamily(e){return["sqlite","cordova","react-native","nativescript","sqljs","expo","better-sqlite3","capacitor"].includes(e.options.type)}static isMySQLFamily(e){return["mysql","mariadb"].includes(e.options.type)}static isReleaseVersionOrGreater(e,t){return null!=e.version&&i.isGreaterOrEqual(e.version,t)}static isPostgresFamily(e){return["postgres","aurora-postgres"].includes(e.options.type)}static buildDriverOptions(e,t){if(e.url){const n=this.parseConnectionUrl(e.url);t&&t.useSid&&n.database&&(n.sid=n.database);for(const e of Object.keys(n))void 0===n[e]&&delete n[e];return Object.assign({},e,n)}return Object.assign({},e)}static buildMongoDBDriverOptions(e,t){if(e.url){const n=this.parseMongoDBConnectionUrl(e.url);t&&t.useSid&&n.database&&(n.sid=n.database);for(const e of Object.keys(n))void 0===n[e]&&delete n[e];return Object.assign({},e,n)}return Object.assign({},e)}static buildAlias({maxAliasLength:e},t,...n){"string"==typeof t?(n.unshift(t),t={shorten:!1,joiner:"_"}):t=Object.assign({shorten:!1,joiner:"_"},t);const i=1===n.length?n[0]:n.join(t.joiner);if(e&&e>0&&i.length>e){if(!0===t.shorten){const t=(0,r.OV)(i);if(t.length<e)return t}return(0,r.vp)(i,{length:e})}return i}static buildColumnAlias({maxAliasLength:e},t,...n){return this.buildAlias({maxAliasLength:e},t,...n)}static parseConnectionUrl(e){const t=e.split(":")[0],n=e.indexOf("//"),r=e.substr(n+2),i=r.indexOf("/"),o=-1!==i?r.substr(0,i):r;let a=-1!==i?r.substr(i+1):void 0;a&&-1!==a.indexOf("?")&&(a=a.substr(0,a.indexOf("?")));const s=o.lastIndexOf("@"),l=o.substr(0,s),u=o.substr(s+1);let c=l,p="";const f=l.indexOf(":");-1!==f&&(c=l.substr(0,f),p=l.substr(f+1));const[d,h]=u.split(":");return{type:t,host:d,username:decodeURIComponent(c),password:decodeURIComponent(p),port:h?parseInt(h):void 0,database:a||void 0}}static parseMongoDBConnectionUrl(e){const t=e.split(":")[0],n=e.indexOf("//"),r=e.substr(n+2),i=r.indexOf("/"),o=-1!==i?r.substr(0,i):r;let a,s,l,u,c=-1!==i?r.substr(i+1):void 0,p="",f={};if(c&&-1!==c.indexOf("?")){let e,t;p=c.substr(c.indexOf("?")+1,c.length),p.split("&").forEach((n=>{e=n.split("=")[0],t=n.split("=")[1],f[e]=t})),u=f.replicaSet,c=c.substr(0,c.indexOf("?"))}const d=o.lastIndexOf("@"),h=o.substr(0,d),y=o.substr(d+1);let m=h,g="";const v=h.indexOf(":");-1!==v&&(m=h.substr(0,v),g=h.substr(v+1)),u?l=y:[a,s]=y.split(":");let b={type:t,host:a,hostReplicaSet:l,username:decodeURIComponent(m),password:decodeURIComponent(g),port:s?parseInt(s):void 0,database:c||void 0};for(const[e,t]of Object.entries(f))b[e]=t;return b}}},7497:(e,t,n)=>{"use strict";n(5066)},6759:(e,t,n)=>{"use strict";n(5066)},5578:(e,t,n)=>{"use strict";n(5066)},9381:(e,t,n)=>{"use strict";n(5066)},393:(e,t,n)=>{"use strict";n(5066)},8974:(e,t,n)=>{"use strict";n.d(t,{s:()=>i});var r=n(5066);class i extends r.K{constructor(e,t){super(`Column type for ${e.constructor.name}#${t} is not defined and cannot be guessed. Make sure you have turned on an "emitDecoratorMetadata": true option in tsconfig.json. Also make sure you have imported "reflect-metadata" on top of the main entry file in your application (before any entity imported).If you are using JavaScript instead of TypeScript you must explicitly provide a column type.`)}}},3972:(e,t,n)=>{"use strict";n(5066)},3095:(e,t,n)=>{"use strict";n(5066)},8714:(e,t,n)=>{"use strict";n(5066)},8970:(e,t,n)=>{"use strict";n(5066)},4547:(e,t,n)=>{"use strict";n(5066)},6908:(e,t,n)=>{"use strict";n(5066)},497:(e,t,n)=>{"use strict";n.d(t,{E:()=>a});var r=n(5066),i=n(7264),o=n(7378);class a extends r.K{constructor(e,t){super(),this.message=`Could not find any entity of type "${this.stringifyTarget(e)}" matching: ${this.stringifyCriteria(t)}`}stringifyTarget(e){return o.a.isEntitySchema(e)?e.options.name:"function"==typeof e||i.g.isObject(e)&&"name"in e?e.name:e}stringifyCriteria(e){try{return JSON.stringify(e,null,4)}catch(e){}return""+e}}},1962:(e,t,n)=>{"use strict";n.d(t,{B:()=>i});var r=n(5066);class i extends r.K{constructor(e,t){super(e),Object.setPrototypeOf(this,i.prototype),this.message=`Property "${e}" was not found in "${t.targetName}". Make sure your query is correct.`}}},4706:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var r=n(5066);class i extends r.K{constructor(e){super(),1===e.length?this.message=`Relation "${e[0]}" was not found; please check if it is correct and really exists in your entity.`:this.message=`Relations ${e.map((e=>`"${e}"`)).join(", ")} were not found; please check if relations are correct and they exist in your entities.`}}},2882:(e,t,n)=>{"use strict";n(5066)},4606:(e,t,n)=>{"use strict";n.d(t,{D:()=>i});var r=n(5066);class i extends r.K{constructor(){super('Cannot perform insert query because values are not defined. Call "qb.values(...)" method to specify inserted values.')}}},2270:(e,t,n)=>{"use strict";n.d(t,{T:()=>i});var r=n(5066);class i extends r.K{constructor(){super("Your database does not support LIMIT on UPDATE statements.")}}},5106:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var r=n(5066);class i extends r.K{constructor(){super("Locking not supported on given driver.")}}},6723:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var r=n(5066);class i extends r.K{constructor(e){super(`Entity "${e.name}" does not have delete date columns.`)}}},9700:(e,t,n)=>{"use strict";n(5066)},9689:(e,t,n)=>{"use strict";n(5066)},8360:(e,t,n)=>{"use strict";n(5066)},4162:(e,t,n)=>{"use strict";n(5066)},8522:(e,t,n)=>{"use strict";n(5066)},8955:(e,t,n)=>{"use strict";n.d(t,{f:()=>i});var r=n(5066);class i extends r.K{constructor(e){super(`Entity ${e} does not have version or update date columns.`)}}},4885:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var r=n(5066);class i extends r.K{constructor(){super("RDBMS does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).")}}},2475:(e,t,n)=>{"use strict";n.d(t,{Y:()=>i});var r=n(5066);class i extends r.K{constructor(){super("The optimistic lock can be used only with getOne() method.")}}},3683:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(5066);class i extends r.K{constructor(e,t,n){super(`The optimistic lock on entity ${e} failed, version ${t} was expected, but is actually ${n}.`)}}},2757:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var r=n(5066);class i extends r.K{constructor(){super("An open transaction is required for pessimistic lock.")}}},8147:(e,t,n)=>{"use strict";n(5066)},7316:(e,t,n)=>{"use strict";n(5066)},5128:(e,t,n)=>{"use strict";n(5066)},8042:(e,t,n)=>{"use strict";n(5066)},581:(e,t,n)=>{"use strict";n.d(t,{y:()=>i});var r=n(5066);class i extends r.K{constructor(){super("OUTPUT or RETURNING clause only supported by Microsoft SQL Server or PostgreSQL or MariaDB databases.")}}},7150:(e,t,n)=>{"use strict";n(5066)},3448:(e,t,n)=>{"use strict";n(5066)},6556:(e,t,n)=>{"use strict";n(5066)},5066:(e,t,n)=>{"use strict";n.d(t,{K:()=>r});class r extends Error{get name(){return this.constructor.name}constructor(e){super(e),Object.setPrototypeOf?Object.setPrototypeOf(this,new.target.prototype):this.__proto__=new.target.prototype}}},210:(e,t,n)=>{"use strict";n.d(t,{y:()=>i});var r=n(5066);class i extends r.K{constructor(){super('Cannot perform update query because update values are not defined. Call "qb.set(...)" method to specify updated values.')}}},7862:(e,t,n)=>{"use strict";n.d(t,{K_:()=>r.K});var r=n(5066);n(7497),n(3448),n(5106),n(5578),n(9381),n(210),n(8714),n(6556),n(497),n(8360),n(3683),n(2270),n(8147),n(8042),n(6759),n(3095),n(6723),n(393),n(581),n(9689),n(1962),n(9700),n(6908),n(3972),n(8955),n(4606),n(2475),n(4547),n(4706),n(2757),n(8970),n(2882),n(7316),n(8522),n(7150),n(8974),n(5128),n(4885),n(4162)},5093:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4706),i=n(6745);class o{static isFindOneOptions(e){const t=e;return t&&(Array.isArray(t.select)||Array.isArray(t.relations)||"object"==typeof t.select||"object"==typeof t.relations||"object"==typeof t.where||"object"==typeof t.join||"object"==typeof t.order||"object"==typeof t.cache||"boolean"==typeof t.cache||"number"==typeof t.cache||"string"==typeof t.comment||"object"==typeof t.lock||"object"==typeof t.loadRelationIds||"boolean"==typeof t.loadRelationIds||"boolean"==typeof t.loadEagerRelations||"boolean"==typeof t.withDeleted||"string"==typeof t.relationLoadStrategy||"boolean"==typeof t.transaction)}static isFindManyOptions(e){const t=e;return t&&(this.isFindOneOptions(t)||"number"==typeof t.skip||"number"==typeof t.take||"string"==typeof t.skip||"string"==typeof t.take)}static extractFindManyOptionsAlias(e){if(this.isFindManyOptions(e)&&e.join)return e.join.alias}static applyOptionsToTreeQueryBuilder(e,t){if(null==t?void 0:t.relations){const n=[...t.relations];if(o.applyRelationsRecursively(e,n,e.expressionMap.mainAlias.name,e.expressionMap.mainAlias.metadata,""),n.length>0)throw new r.P(n)}return e}static applyRelationsRecursively(e,t,n,r,o){let a=[];if(o){const e=new RegExp("^"+o.replace(".","\\.")+"\\.");a=t.filter((t=>t.match(e))).map((t=>t.replace(e,""))).filter((e=>r.findRelationWithPropertyPath(e)))}else a=t.filter((e=>r.findRelationWithPropertyPath(e)));a.forEach((a=>{let s=i.z.buildAlias(e.connection.driver,{joiner:"__"},n,a);const l=n+"."+a;e.leftJoinAndSelect(l,s),t.splice(t.indexOf(o?o+"."+a:a),1);const u=e.expressionMap.joinAttributes.find((e=>e.entityOrProperty===l));this.applyRelationsRecursively(e,t,u.alias.name,u.metadata,o?o+"."+a:a);const c=r.relations.find((e=>e.propertyName===a));c&&this.joinEagerRelations(e,s,c.inverseEntityMetadata)}))}static joinEagerRelations(e,t,n){n.eagerRelations.forEach((n=>{let r=i.z.buildAlias(e.connection.driver,e.connection.namingStrategy.eagerJoinRelationAlias(t,n.propertyPath)),o=!0;for(const i of e.expressionMap.joinAttributes)if(void 0===i.condition&&void 0===i.mapToProperty&&void 0===i.isMappingMany&&"LEFT"===i.direction&&i.entityOrProperty===`${t}.${n.propertyPath}`){o=!1,r=i.alias.name;break}o&&e.leftJoin(t+"."+n.propertyPath,r);let a=!0;for(const t of e.expressionMap.selects)if(void 0===t.aliasName&&void 0===t.virtual&&t.selection===r){a=!1;break}a&&e.addSelect(r),this.joinEagerRelations(e,r,n.inverseEntityMetadata)}))}}},8876:(e,t,n)=>{"use strict";n.d(t,{T:()=>s});var r=n(9928);class i{static from(e){const t=new this;return t.raw=e.records,t.affected=e.affected,t}}var o=n(581),a=n(7378);class s extends r.z{constructor(e,t){super(e,t),this["@instanceof"]=Symbol.for("DeleteQueryBuilder"),this.expressionMap.aliasNamePrefixingEnabled=!1}getQuery(){let e=this.createComment();return e+=this.createCteExpression(),e+=this.createDeleteExpression(),e.trim()}async execute(){const[e,t]=this.getQueryAndParameters(),n=this.obtainQueryRunner();let r=!1;try{!0===this.expressionMap.useTransaction&&!1===n.isTransactionActive&&(await n.startTransaction(),r=!0),!0===this.expressionMap.callListeners&&this.expressionMap.mainAlias.hasMetadata&&await n.broadcaster.broadcast("BeforeRemove",this.expressionMap.mainAlias.metadata);const o=await n.query(e,t,!0),a=i.from(o);return!0===this.expressionMap.callListeners&&this.expressionMap.mainAlias.hasMetadata&&await n.broadcaster.broadcast("AfterRemove",this.expressionMap.mainAlias.metadata),r&&await n.commitTransaction(),a}catch(e){if(r)try{await n.rollbackTransaction()}catch(e){}throw e}finally{n!==this.queryRunner&&await n.release()}}from(e,t){e=a.a.isEntitySchema(e)?e.options.name:e;const n=this.createFromAlias(e,t);return this.expressionMap.setMainAlias(n),this}where(e,t){this.expressionMap.wheres=[];const n=this.getWhereCondition(e);return n&&(this.expressionMap.wheres=[{type:"simple",condition:n}]),t&&this.setParameters(t),this}andWhere(e,t){return this.expressionMap.wheres.push({type:"and",condition:this.getWhereCondition(e)}),t&&this.setParameters(t),this}orWhere(e,t){return this.expressionMap.wheres.push({type:"or",condition:this.getWhereCondition(e)}),t&&this.setParameters(t),this}whereInIds(e){return this.where(this.getWhereInIdsCondition(e))}andWhereInIds(e){return this.andWhere(this.getWhereInIdsCondition(e))}orWhereInIds(e){return this.orWhere(this.getWhereInIdsCondition(e))}output(e){return this.returning(e)}returning(e){if(!this.connection.driver.isReturningSqlSupported("delete"))throw new o.y;return this.expressionMap.returning=e,this}createDeleteExpression(){const e=this.getTableName(this.getMainTableName()),t=this.createWhereExpression(),n=this.createReturningExpression("delete");return""===n?`DELETE FROM ${e}${t}`:"mssql"===this.connection.driver.options.type?`DELETE FROM ${e} OUTPUT ${n}${t}`:`DELETE FROM ${e}${t} RETURNING ${n}`}}},1931:(e,t,n)=>{"use strict";n.d(t,{O:()=>x});var r=n(9928);class i{constructor(){this.identifiers=[],this.generatedMaps=[]}static from(e){const t=new this;return t.raw=e.raw,t}}var o=n(581),a=n(4606),s=n(6120);class l{constructor(){this.count=0,this.promises=[]}async wait(){return this.promises.length>0&&await Promise.all(this.promises),this}}var u,c=n(7862),p=new Uint8Array(16);function f(){if(!u&&!(u="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return u(p)}const d=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,h=function(e){return"string"==typeof e&&d.test(e)};for(var y=[],m=0;m<256;++m)y.push((m+256).toString(16).substr(1));const g=function(e,t,n){var r=(e=e||{}).random||(e.rng||f)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var i=0;i<16;++i)t[n+i]=r[i];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(y[e[t+0]]+y[e[t+1]]+y[e[t+2]]+y[e[t+3]]+"-"+y[e[t+4]]+y[e[t+5]]+"-"+y[e[t+6]]+y[e[t+7]]+"-"+y[e[t+8]]+y[e[t+9]]+"-"+y[e[t+10]]+y[e[t+11]]+y[e[t+12]]+y[e[t+13]]+y[e[t+14]]+y[e[t+15]]).toLowerCase();if(!h(n))throw TypeError("Stringified UUID is invalid");return n}(r)};var v=n(6745),b=n(7264),w=n(7378);class x extends r.z{constructor(){super(...arguments),this["@instanceof"]=Symbol.for("InsertQueryBuilder")}getQuery(){let e=this.createComment();return e+=this.createCteExpression(),e+=this.createInsertExpression(),e.trim()}async execute(){const e=this.getValueSets();if(0===e.length)return new i;const t=this.obtainQueryRunner();let n=!1;try{if(!0===this.expressionMap.useTransaction&&!1===t.isTransactionActive&&(await t.startTransaction(),n=!0),!0===this.expressionMap.callListeners&&this.expressionMap.mainAlias.hasMetadata){const n=new l;e.forEach((e=>{t.broadcaster.broadcastBeforeInsertEvent(n,this.expressionMap.mainAlias.metadata,e)})),await n.wait()}let r=null,o=null;const a=new s.v(t,this.expressionMap),u=[];if(Array.isArray(this.expressionMap.returning)&&this.expressionMap.mainAlias.hasMetadata)for(const e of this.expressionMap.returning)u.push(...this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(e));!0===this.expressionMap.updateEntity&&this.expressionMap.mainAlias.hasMetadata&&(e.length>1&&"oracle"===this.connection.driver.options.type||(this.expressionMap.extraReturningColumns=this.expressionMap.mainAlias.metadata.getInsertionReturningColumns()),u.push(...this.expressionMap.extraReturningColumns.filter((e=>!u.includes(e))))),u.length>0&&"mssql"===this.connection.driver.options.type&&(r=this.connection.driver.buildTableVariableDeclaration("@OutputTable",u),o="SELECT * FROM @OutputTable");const[c,p]=this.getQueryAndParameters(),f=[r,c,o].filter((e=>null!=e)).join(";\n\n"),d=await t.query(f,p,!0),h=i.from(d);if(!0===this.expressionMap.updateEntity&&this.expressionMap.mainAlias.hasMetadata&&await a.insert(h,e),!0===this.expressionMap.callListeners&&this.expressionMap.mainAlias.hasMetadata){const n=new l;e.forEach((e=>{t.broadcaster.broadcastAfterInsertEvent(n,this.expressionMap.mainAlias.metadata,e)})),await n.wait()}return n&&await t.commitTransaction(),h}catch(e){if(n)try{await t.rollbackTransaction()}catch(e){}throw e}finally{t!==this.queryRunner&&await t.release()}}into(e,t){e=w.a.isEntitySchema(e)?e.options.name:e;const n=this.createFromAlias(e);return this.expressionMap.setMainAlias(n),this.expressionMap.insertColumns=t||[],this}values(e){return this.expressionMap.valuesSet=e,this}output(e){return this.returning(e)}returning(e){if(!this.connection.driver.isReturningSqlSupported("insert"))throw new o.y;return this.expressionMap.returning=e,this}updateEntity(e){return this.expressionMap.updateEntity=e,this}onConflict(e){return this.expressionMap.onConflict=e,this}orIgnore(e=!0){return this.expressionMap.onIgnore=!!e,this}orUpdate(e,t,n){return Array.isArray(e)?(this.expressionMap.onUpdate={overwrite:e,conflict:t,skipUpdateIfNoValuesChanged:null==n?void 0:n.skipUpdateIfNoValuesChanged,indexPredicate:null==n?void 0:n.indexPredicate},this):(this.expressionMap.onUpdate={conflict:null==e?void 0:e.conflict_target,columns:null==e?void 0:e.columns,overwrite:null==e?void 0:e.overwrite,skipUpdateIfNoValuesChanged:null==n?void 0:n.skipUpdateIfNoValuesChanged},this)}createInsertExpression(){const e=this.getTableName(this.getMainTableName()),t=this.createValuesExpression(),n="oracle"===this.connection.driver.options.type&&this.getValueSets().length>1?null:this.createReturningExpression("insert"),r=this.createColumnNamesExpression();let i="INSERT ";if((v.z.isMySQLFamily(this.connection.driver)||"aurora-mysql"===this.connection.driver.options.type)&&(i+=this.expressionMap.onIgnore?" IGNORE ":""),i+=`INTO ${e}`,this.alias!==this.getMainTableName()&&v.z.isPostgresFamily(this.connection.driver)&&(i+=` AS "${this.alias}"`),r?i+=`(${r})`:t||!v.z.isMySQLFamily(this.connection.driver)&&"aurora-mysql"!==this.connection.driver.options.type||(i+="()"),n&&"mssql"===this.connection.driver.options.type&&(i+=` OUTPUT ${n}`),t?"oracle"===this.connection.driver.options.type&&this.getValueSets().length>1?i+=` ${t}`:i+=` VALUES ${t}`:v.z.isMySQLFamily(this.connection.driver)||"aurora-mysql"===this.connection.driver.options.type?i+=" VALUES ()":i+=" DEFAULT VALUES","on-conflict-do-update"===this.connection.driver.supportedUpsertType){if(this.expressionMap.onIgnore)i+=" ON CONFLICT DO NOTHING ";else if(this.expressionMap.onConflict)i+=` ON CONFLICT ${this.expressionMap.onConflict} `;else if(this.expressionMap.onUpdate){const{overwrite:t,columns:n,conflict:r,skipUpdateIfNoValuesChanged:o,indexPredicate:a}=this.expressionMap.onUpdate;let s="ON CONFLICT";if(Array.isArray(r)){if(s+=` ( ${r.map((e=>this.escape(e))).join(", ")} )`,a&&!v.z.isPostgresFamily(this.connection.driver))throw new c.K_("indexPredicate option is not supported by the current database driver");a&&v.z.isPostgresFamily(this.connection.driver)&&(s+=` WHERE ( ${this.escape(a)} )`)}else r&&(s+=` ON CONSTRAINT ${this.escape(r)}`);Array.isArray(t)?(i+=` ${s} DO UPDATE SET `,i+=null==t?void 0:t.map((e=>`${this.escape(e)} = EXCLUDED.${this.escape(e)}`)).join(", "),i+=" "):n&&(i+=` ${s} DO UPDATE SET `,i+=n.map((e=>`${this.escape(e)} = :${e}`)).join(", "),i+=" "),Array.isArray(t)&&o&&v.z.isPostgresFamily(this.connection.driver)&&(i+=" WHERE (",i+=t.map((t=>`${e}.${this.escape(t)} IS DISTINCT FROM EXCLUDED.${this.escape(t)}`)).join(" OR "),i+=") ")}}else if("on-duplicate-key-update"===this.connection.driver.supportedUpsertType){if(this.expressionMap.onUpdate){const{overwrite:e,columns:t}=this.expressionMap.onUpdate;Array.isArray(e)?(i+=" ON DUPLICATE KEY UPDATE ",i+=e.map((e=>`${this.escape(e)} = VALUES(${this.escape(e)})`)).join(", "),i+=" "):Array.isArray(t)&&(i+=" ON DUPLICATE KEY UPDATE ",i+=t.map((e=>`${this.escape(e)} = :${e}`)).join(", "),i+=" ")}}else if(this.expressionMap.onUpdate)throw new c.K_("onUpdate is not supported by the current database driver");return n&&(v.z.isPostgresFamily(this.connection.driver)||"oracle"===this.connection.driver.options.type||"cockroachdb"===this.connection.driver.options.type||v.z.isMySQLFamily(this.connection.driver))&&(i+=` RETURNING ${n}`),"mssql"===this.connection.driver.options.type&&this.expressionMap.mainAlias.hasMetadata&&this.expressionMap.mainAlias.metadata.columns.filter((e=>this.expressionMap.insertColumns.length>0?-1!==this.expressionMap.insertColumns.indexOf(e.propertyPath):e.isInsert)).some((e=>this.isOverridingAutoIncrementBehavior(e)))&&(i=`SET IDENTITY_INSERT ${e} ON; ${i}; SET IDENTITY_INSERT ${e} OFF`),i}getInsertedColumns(){return this.expressionMap.mainAlias.hasMetadata?this.expressionMap.mainAlias.metadata.columns.filter((e=>this.expressionMap.insertColumns.length?-1!==this.expressionMap.insertColumns.indexOf(e.propertyPath):!!e.isInsert&&!!(!e.isGenerated||"increment"!==e.generationStrategy||"spanner"===this.connection.driver.options.type||"oracle"===this.connection.driver.options.type||v.z.isSQLiteFamily(this.connection.driver)||v.z.isMySQLFamily(this.connection.driver)||"aurora-mysql"===this.connection.driver.options.type||"mssql"===this.connection.driver.options.type&&this.isOverridingAutoIncrementBehavior(e)))):[]}createColumnNamesExpression(){const e=this.getInsertedColumns();if(e.length>0)return e.map((e=>this.escape(e.databaseName))).join(", ");if(!this.expressionMap.mainAlias.hasMetadata&&!this.expressionMap.insertColumns.length){const e=this.getValueSets();if(1===e.length)return Object.keys(e[0]).map((e=>this.escape(e))).join(", ")}return this.expressionMap.insertColumns.map((e=>this.escape(e))).join(", ")}createValuesExpression(){const e=this.getValueSets(),t=this.getInsertedColumns();if(t.length>0){let n="";return e.forEach(((r,i)=>{t.forEach(((o,a)=>{0===a&&("oracle"===this.connection.driver.options.type&&e.length>1||"sap"===this.connection.driver.options.type&&e.length>1?n+=" SELECT ":n+="(");let s=o.getEntityValue(r);if("function"!=typeof s&&(s=this.connection.driver.preparePersistentValue(s,o)),o.isVersion&&void 0===s)n+="1";else if(o.isDiscriminator)n+=this.createParameter(this.expressionMap.mainAlias.metadata.discriminatorValue);else if(o.isGenerated&&"uuid"===o.generationStrategy&&!this.connection.driver.isUUIDGenerationSupported()&&void 0===s)s=g(),n+=this.createParameter(s),i in this.expressionMap.locallyGenerated||(this.expressionMap.locallyGenerated[i]={}),o.setEntityValue(this.expressionMap.locallyGenerated[i],s);else if(void 0===s)"oracle"===this.connection.driver.options.type&&e.length>1||v.z.isSQLiteFamily(this.connection.driver)||"sap"===this.connection.driver.options.type||"spanner"===this.connection.driver.options.type?void 0!==o.default&&null!==o.default?n+=this.connection.driver.normalizeDefault(o):n+="NULL":n+="DEFAULT";else if(null===s&&"spanner"===this.connection.driver.options.type)n+="NULL";else if("function"==typeof s)n+=s();else{"mssql"===this.connection.driver.options.type&&(s=this.connection.driver.parametrizeValue(o,s));const e=this.createParameter(s);if(!v.z.isMySQLFamily(this.connection.driver)&&"aurora-mysql"!==this.connection.driver.options.type||-1===this.connection.driver.spatialTypes.indexOf(o.type))v.z.isPostgresFamily(this.connection.driver)&&-1!==this.connection.driver.spatialTypes.indexOf(o.type)?null!=o.srid?n+=`ST_SetSRID(ST_GeomFromGeoJSON(${e}), ${o.srid})::${o.type}`:n+=`ST_GeomFromGeoJSON(${e})::${o.type}`:"mssql"===this.connection.driver.options.type&&-1!==this.connection.driver.spatialTypes.indexOf(o.type)?n+=o.type+"::STGeomFromText("+e+", "+(o.srid||"0")+")":n+=e;else{const t=this.connection.driver.options.legacySpatialSupport?"GeomFromText":"ST_GeomFromText";null!=o.srid?n+=`${t}(${e}, ${o.srid})`:n+=`${t}(${e})`}}a===t.length-1?i===e.length-1?"oracle"===this.connection.driver.options.type&&e.length>1?n+=" FROM DUAL ":"sap"===this.connection.driver.options.type&&e.length>1?n+=" FROM dummy ":n+=")":"oracle"===this.connection.driver.options.type&&e.length>1?n+=" FROM DUAL UNION ALL ":"sap"===this.connection.driver.options.type&&e.length>1?n+=" FROM dummy UNION ALL ":n+="), ":n+=", "}))})),"()"===n?"":n}{let t="";return e.forEach(((n,r)=>{Object.keys(n).forEach(((i,o)=>{0===o&&(t+="(");const a=n[i];"function"==typeof a?t+=a():void 0===a?"oracle"===this.connection.driver.options.type&&e.length>1||v.z.isSQLiteFamily(this.connection.driver)||"sap"===this.connection.driver.options.type||"spanner"===this.connection.driver.options.type?t+="NULL":t+="DEFAULT":null===a&&"spanner"===this.connection.driver.options.type||(t+=this.createParameter(a)),o===Object.keys(n).length-1?r===e.length-1?t+=")":t+="), ":t+=", "}))})),"()"===t?"":t}}getValueSets(){if(Array.isArray(this.expressionMap.valuesSet))return this.expressionMap.valuesSet;if(b.g.isObject(this.expressionMap.valuesSet))return[this.expressionMap.valuesSet];throw new a.D}isOverridingAutoIncrementBehavior(e){return e.isPrimary&&e.isGenerated&&"increment"===e.generationStrategy&&this.getValueSets().some((t=>void 0!==e.getEntityValue(t)&&null!==e.getEntityValue(t)))}}},5784:(e,t,n)=>{"use strict";n.d(t,{k:()=>s});var r=n(2749),i=n(7264),o=n(7862),a=n(6745);class s{constructor(e,t,n){this.connection=e,this.queryExpressionMap=t,this.isSelectedEvaluated=!1,this.relationEvaluated=!1,i.g.assign(this,n||{})}get isMany(){return void 0!==this.isMappingMany?this.isMappingMany:!!this.relation&&(this.relation.isManyToMany||this.relation.isOneToMany)}get isSelected(){if(!this.isSelectedEvaluated){let e=()=>{for(const e of this.queryExpressionMap.selects){if(e.selection===this.alias.name)return!0;if(this.metadata&&this.metadata.columns.find((t=>e.selection===this.alias.name+"."+t.propertyPath)))return!0}return!1};this.isSelectedCache=e(),this.isSelectedEvaluated=!0}return this.isSelectedCache}get tablePath(){return this.metadata?this.metadata.tablePath:this.entityOrProperty}get parentAlias(){if(r.G.isAliasProperty(this.entityOrProperty))return this.entityOrProperty.substr(0,this.entityOrProperty.indexOf("."))}get relationPropertyPath(){if(r.G.isAliasProperty(this.entityOrProperty))return this.entityOrProperty.substr(this.entityOrProperty.indexOf(".")+1)}get relation(){if(!this.relationEvaluated){let e=()=>{if(!r.G.isAliasProperty(this.entityOrProperty))return;const e=this.queryExpressionMap.findAliasByName(this.parentAlias);let t=e.metadata.findRelationWithPropertyPath(this.relationPropertyPath);if(t)return t;if(e.metadata.parentEntityMetadata&&(t=e.metadata.parentEntityMetadata.findRelationWithPropertyPath(this.relationPropertyPath),t))return t;throw new o.K_(`Relation with property path ${this.relationPropertyPath} in entity was not found.`)};this.relationCache=e.bind(this)(),this.relationEvaluated=!0}return this.relationCache}get metadata(){return this.relation?this.relation.inverseEntityMetadata:this.connection.hasMetadata(this.entityOrProperty)?this.connection.getMetadata(this.entityOrProperty):void 0}get junctionAlias(){if(!this.relation)throw new o.K_("Cannot get junction table for join without relation.");return this.relation.isOwning?a.z.buildAlias(this.connection.driver,this.parentAlias,this.alias.name):a.z.buildAlias(this.connection.driver,this.alias.name,this.parentAlias)}get mapToPropertyParentAlias(){if(this.mapToProperty)return this.mapToProperty.split(".")[0]}get mapToPropertyPropertyName(){if(this.mapToProperty)return this.mapToProperty.split(".")[1]}}},9928:(e,t,n)=>{"use strict";n.d(t,{z:()=>y});var r=n(7264),i=n(7862);class o{constructor(e){r.g.assign(this,e||{})}get target(){return this.metadata.target}get hasMetadata(){return!!this._metadata}set metadata(e){this._metadata=e}get metadata(){if(!this._metadata)throw new i.K_(`Cannot get entity metadata for the given alias "${this.name}"`);return this._metadata}}var a=n(5784),s=n(6869),l=n(58);class u{constructor(e){this.connection=e,this.relationLoadStrategy="join",this.queryEntity=!1,this.aliases=[],this.queryType="select",this.selects=[],this.maxExecutionTime=0,this.selectDistinct=!1,this.selectDistinctOn=[],this.extraReturningColumns=[],this.onConflict="",this.onIgnore=!1,this.joinAttributes=[],this.relationIdAttributes=[],this.relationCountAttributes=[],this.wheres=[],this.havings=[],this.orderBys={},this.groupBys=[],this.withDeleted=!1,this.parameters={},this.disableEscaping=!0,this.enableRelationIdValues=!1,this.extraAppendedAndWhereCondition="",this.subQuery=!1,this.aliasNamePrefixingEnabled=!0,this.cache=!1,this.options=[],this.insertColumns=[],this.whereEntities=[],this.updateEntity=!0,this.callListeners=!0,this.useTransaction=!1,this.nativeParameters={},this.locallyGenerated={},this.commonTableExpressions=[],e.options.relationLoadStrategy&&(this.relationLoadStrategy=e.options.relationLoadStrategy)}get allOrderBys(){if(!Object.keys(this.orderBys).length&&this.mainAlias.hasMetadata&&-1===this.options.indexOf("disable-global-order")){const e=this.mainAlias.metadata.orderBy||{};return Object.keys(e).reduce(((t,n)=>(t[this.mainAlias.name+"."+n]=e[n],t)),{})}return this.orderBys}setMainAlias(e){return this.mainAlias=e,e}createAlias(e){let t=e.name;!t&&e.tablePath&&(t=e.tablePath),t||"function"!=typeof e.target||(t=e.target.name),t||"string"!=typeof e.target||(t=e.target);const n=new o;return n.type=e.type,t&&(n.name=t),e.metadata&&(n.metadata=e.metadata),e.target&&!n.hasMetadata&&(n.metadata=this.connection.getMetadata(e.target)),e.tablePath&&(n.tablePath=e.tablePath),e.subQuery&&(n.subQuery=e.subQuery),this.aliases.push(n),n}findAliasByName(e){const t=this.aliases.find((t=>t.name===e));if(!t)throw new i.K_(`"${e}" alias was not found. Maybe you forgot to join it?`);return t}findColumnByAliasExpression(e){const[t,n]=e.split(".");return this.findAliasByName(t).metadata.findColumnWithPropertyName(n)}get relationMetadata(){if(!this.mainAlias)throw new i.K_("Entity to work with is not specified!");const e=this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);if(!e)throw new i.K_(`Relation ${this.relationPropertyPath} was not found in entity ${this.mainAlias.name}`);return e}clone(){const e=new u(this.connection);return e.queryType=this.queryType,e.selects=this.selects.map((e=>e)),e.maxExecutionTime=this.maxExecutionTime,e.selectDistinct=this.selectDistinct,e.selectDistinctOn=this.selectDistinctOn,this.aliases.forEach((t=>e.aliases.push(new o(t)))),e.relationLoadStrategy=this.relationLoadStrategy,e.mainAlias=this.mainAlias,e.valuesSet=this.valuesSet,e.returning=this.returning,e.onConflict=this.onConflict,e.onIgnore=this.onIgnore,e.onUpdate=this.onUpdate,e.joinAttributes=this.joinAttributes.map((e=>new a.k(this.connection,this,e))),e.relationIdAttributes=this.relationIdAttributes.map((e=>new s.b(this,e))),e.relationCountAttributes=this.relationCountAttributes.map((e=>new l.$(this,e))),e.wheres=this.wheres.map((e=>({...e}))),e.havings=this.havings.map((e=>({...e}))),e.orderBys=Object.assign({},this.orderBys),e.groupBys=this.groupBys.map((e=>e)),e.limit=this.limit,e.offset=this.offset,e.skip=this.skip,e.take=this.take,e.lockMode=this.lockMode,e.onLocked=this.onLocked,e.lockVersion=this.lockVersion,e.lockTables=this.lockTables,e.withDeleted=this.withDeleted,e.parameters=Object.assign({},this.parameters),e.disableEscaping=this.disableEscaping,e.enableRelationIdValues=this.enableRelationIdValues,e.extraAppendedAndWhereCondition=this.extraAppendedAndWhereCondition,e.subQuery=this.subQuery,e.aliasNamePrefixingEnabled=this.aliasNamePrefixingEnabled,e.cache=this.cache,e.cacheId=this.cacheId,e.cacheDuration=this.cacheDuration,e.relationPropertyPath=this.relationPropertyPath,e.of=this.of,e.insertColumns=this.insertColumns,e.whereEntities=this.whereEntities,e.updateEntity=this.updateEntity,e.callListeners=this.callListeners,e.useTransaction=this.useTransaction,e.nativeParameters=Object.assign({},this.nativeParameters),e.comment=this.comment,e.commonTableExpressions=this.commonTableExpressions.map((e=>({alias:e.alias,queryBuilder:"string"==typeof e.queryBuilder?e.queryBuilder:e.queryBuilder.clone(),options:e.options}))),e}}class c{constructor(e){this["@instanceof"]=Symbol.for("Brackets"),this.whereFactory=e}}var p=n(7378);class f{constructor(e,t,n=!0,r=!1,i,o){this["@instanceof"]=Symbol.for("FindOperator"),this._type=e,this._value=t,this._useParameter=n,this._multipleParameters=r,this._getSql=i,this._objectLiteralParameters=o}get useParameter(){return p.a.isFindOperator(this._value)?this._value.useParameter:this._useParameter}get multipleParameters(){return p.a.isFindOperator(this._value)?this._value.multipleParameters:this._multipleParameters}get type(){return this._type}get value(){return p.a.isFindOperator(this._value)?this._value.value:this._value}get objectLiteralParameters(){return p.a.isFindOperator(this._value)?this._value.objectLiteralParameters:this._objectLiteralParameters}get child(){if(p.a.isFindOperator(this._value))return this._value}get getSql(){return p.a.isFindOperator(this._value)?this._value.getSql:this._getSql}}var d=n(1962);const h=/[.*+\-?^${}()|[\]\\]/g;class y{constructor(e,t){this["@instanceof"]=Symbol.for("QueryBuilder"),this.parameterIndex=0,p.a.isQueryBuilder(e)?(this.connection=e.connection,this.queryRunner=e.queryRunner,this.expressionMap=e.expressionMap.clone()):(this.connection=e,this.queryRunner=t,this.expressionMap=new u(this.connection))}get alias(){if(!this.expressionMap.mainAlias)throw new i.K_("Main alias is not set");return this.expressionMap.mainAlias.name}select(e,t){this.expressionMap.queryType="select",Array.isArray(e)?this.expressionMap.selects=e.map((e=>({selection:e}))):e&&(this.expressionMap.selects=[{selection:e,aliasName:t}]);const r=n(900).Z;return p.a.isSelectQueryBuilder(this)?this:new r(this)}insert(){this.expressionMap.queryType="insert";const e=n(1931).O;return p.a.isInsertQueryBuilder(this)?this:new e(this)}update(e,t){const r=t||e;if("function"==typeof(e=p.a.isEntitySchema(e)?e.options.name:e)||"string"==typeof e){const t=this.createFromAlias(e);this.expressionMap.setMainAlias(t)}this.expressionMap.queryType="update",this.expressionMap.valuesSet=r;const i=n(8394).T;return p.a.isUpdateQueryBuilder(this)?this:new i(this)}delete(){this.expressionMap.queryType="delete";const e=n(8876).T;return p.a.isDeleteQueryBuilder(this)?this:new e(this)}softDelete(){this.expressionMap.queryType="soft-delete";const e=n(7302).B;return p.a.isSoftDeleteQueryBuilder(this)?this:new e(this)}restore(){this.expressionMap.queryType="restore";const e=n(7302).B;return p.a.isSoftDeleteQueryBuilder(this)?this:new e(this)}relation(e,t){const r=2===arguments.length?e:void 0,i=2===arguments.length?t:e;if(this.expressionMap.queryType="relation",this.expressionMap.relationPropertyPath=i,r){const e=this.createFromAlias(r);this.expressionMap.setMainAlias(e)}const o=n(1655).K;return p.a.isRelationQueryBuilder(this)?this:new o(this)}hasRelation(e,t){const n=this.connection.getMetadata(e);return(Array.isArray(t)?t:[t]).every((e=>!!n.findRelationWithPropertyPath(e)))}hasParameter(e){var t;return(null===(t=this.parentQueryBuilder)||void 0===t?void 0:t.hasParameter(e))||e in this.expressionMap.parameters}setParameter(e,t){if("function"==typeof t)throw new i.K_(`Function parameter isn't supported in the parameters. Please check "${e}" parameter.`);if(!e.match(/^([A-Za-z0-9_.]+)$/))throw new i.K_("QueryBuilder parameter keys may only contain numbers, letters, underscores, or periods.");return this.parentQueryBuilder&&this.parentQueryBuilder.setParameter(e,t),this.expressionMap.parameters[e]=t,this}setParameters(e){for(const[t,n]of Object.entries(e))this.setParameter(t,n);return this}createParameter(e){let t;do{t="orm_param_"+this.parameterIndex++}while(this.hasParameter(t));return this.setParameter(t,e),`:${t}`}setNativeParameters(e){return this.parentQueryBuilder&&this.parentQueryBuilder.setNativeParameters(e),Object.keys(e).forEach((t=>{this.expressionMap.nativeParameters[t]=e[t]})),this}getParameters(){const e=Object.assign({},this.expressionMap.parameters);if(this.expressionMap.mainAlias&&this.expressionMap.mainAlias.hasMetadata){const t=this.expressionMap.mainAlias.metadata;if(t.discriminatorColumn&&t.parentEntityMetadata){const n=t.childEntityMetadatas.filter((e=>e.discriminatorColumn)).map((e=>e.discriminatorValue));n.push(t.discriminatorValue),e.discriminatorColumnValues=n}}return e}printSql(){const[e,t]=this.getQueryAndParameters();return this.connection.logger.logQuery(e,t),this}getSql(){return this.getQueryAndParameters()[0]}getQueryAndParameters(){const e=this.getQuery(),t=this.getParameters();return this.connection.driver.escapeQueryWithParameters(e,t,this.expressionMap.nativeParameters)}async execute(){const[e,t]=this.getQueryAndParameters(),n=this.obtainQueryRunner();try{return await n.query(e,t)}finally{n!==this.queryRunner&&await n.release()}}createQueryBuilder(){return new this.constructor(this.connection,this.queryRunner)}clone(){return new this.constructor(this)}comment(e){return this.expressionMap.comment=e,this}disableEscaping(){return this.expressionMap.disableEscaping=!1,this}escape(e){return this.expressionMap.disableEscaping?this.connection.driver.escape(e):e}setQueryRunner(e){return this.queryRunner=e,this}callListeners(e){return this.expressionMap.callListeners=e,this}useTransaction(e){return this.expressionMap.useTransaction=e,this}addCommonTableExpression(e,t,n){return this.expressionMap.commonTableExpressions.push({queryBuilder:e,alias:t,options:n||{}}),this}getTableName(e){return e.split(".").map((e=>""===e?e:this.escape(e))).join(".")}getMainTableName(){if(!this.expressionMap.mainAlias)throw new i.K_('Entity where values should be inserted is not specified. Call "qb.into(entity)" method to specify it.');return this.expressionMap.mainAlias.hasMetadata?this.expressionMap.mainAlias.metadata.tablePath:this.expressionMap.mainAlias.tablePath}createFromAlias(e,t){if(this.connection.hasMetadata(e)){const n=this.connection.getMetadata(e);return this.expressionMap.createAlias({type:"from",name:t,metadata:this.connection.getMetadata(e),tablePath:n.tablePath})}{if("string"==typeof e){const n="("===e.substr(0,1)&&")"===e.substr(-1);return this.expressionMap.createAlias({type:"from",name:t,tablePath:n?void 0:e,subQuery:n?e:void 0})}const n=e(this.subQuery());this.setParameters(n.getParameters());const r=n.getQuery();return this.expressionMap.createAlias({type:"from",name:t,subQuery:r})}}replacePropertyNames(e){for(const n of this.expressionMap.aliases){if(!n.hasMetadata)continue;const r=this.expressionMap.aliasNamePrefixingEnabled?`${n.name}.`:"",i=this.expressionMap.aliasNamePrefixingEnabled?`${this.escape(n.name)}.`:"",o={};for(const e of n.metadata.relations)e.joinColumns.length>0&&(o[e.propertyPath]=e.joinColumns[0].databaseName);for(const e of n.metadata.relations)for(const t of[...e.joinColumns,...e.inverseJoinColumns]){const n=`${e.propertyPath}.${t.referencedColumn.propertyPath}`;o[n]=t.databaseName}for(const e of n.metadata.columns)o[e.databaseName]=e.databaseName;for(const e of n.metadata.columns)o[e.propertyName]=e.databaseName;for(const e of n.metadata.columns)o[e.propertyPath]=e.databaseName;e=e.replace(new RegExp(`([ =(]|^.{0})${t=r,t.replace(h,"\\$&")}([^ =(),]+)(?=[ =),]|.{0}$)`,"gm"),((e,t,n)=>o[n]?`${t}${i}${this.escape(o[n])}`:e))}var t;return e}createComment(){return this.expressionMap.comment?`/* ${this.expressionMap.comment.replace("*/","")} */ `:""}createWhereExpression(){const e=[],t=this.createWhereClausesExpression(this.expressionMap.wheres);if(t.length>0&&"1=1"!==t&&e.push(this.replacePropertyNames(t)),this.expressionMap.mainAlias.hasMetadata){const t=this.expressionMap.mainAlias.metadata;if("select"===this.expressionMap.queryType&&!this.expressionMap.withDeleted&&t.deleteDateColumn){const n=this.expressionMap.aliasNamePrefixingEnabled?this.expressionMap.mainAlias.name+"."+t.deleteDateColumn.propertyName:t.deleteDateColumn.propertyName,r=`${this.replacePropertyNames(n)} IS NULL`;e.push(r)}if(t.discriminatorColumn&&t.parentEntityMetadata){const n=this.expressionMap.aliasNamePrefixingEnabled?this.expressionMap.mainAlias.name+"."+t.discriminatorColumn.databaseName:t.discriminatorColumn.databaseName,r=`${this.replacePropertyNames(n)} IN (:...discriminatorColumnValues)`;e.push(r)}}if(this.expressionMap.extraAppendedAndWhereCondition){const t=this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);e.push(t)}return e.length?1===e.length?` WHERE ${e[0]}`:` WHERE ( ${e.join(" ) AND ( ")} )`:""}createReturningExpression(e){const t=this.getReturningColumns(),n=this.connection.driver;if("string"!=typeof this.expressionMap.returning&&this.expressionMap.extraReturningColumns.length>0&&n.isReturningSqlSupported(e)&&t.push(...this.expressionMap.extraReturningColumns.filter((e=>-1===t.indexOf(e)))),t.length){let e=t.map((e=>{const t=this.escape(e.databaseName);return"mssql"===n.options.type?"insert"===this.expressionMap.queryType||"update"===this.expressionMap.queryType||"soft-delete"===this.expressionMap.queryType||"restore"===this.expressionMap.queryType?"INSERTED."+t:this.escape(this.getMainTableName())+"."+t:t})).join(", ");return"oracle"===n.options.type&&(e+=" INTO "+t.map((e=>this.createParameter({type:n.columnTypeToNativeParameter(e.type),dir:n.oracle.BIND_OUT}))).join(", ")),"mssql"===n.options.type&&("insert"!==this.expressionMap.queryType&&"update"!==this.expressionMap.queryType||(e+=" INTO @OutputTable")),e}return"string"==typeof this.expressionMap.returning?this.expressionMap.returning:""}getReturningColumns(){const e=[];return Array.isArray(this.expressionMap.returning)&&this.expressionMap.returning.forEach((t=>{this.expressionMap.mainAlias.hasMetadata&&e.push(...this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(t))})),e}createWhereClausesExpression(e){return e.map(((e,t)=>{const n=this.createWhereConditionExpression(e.condition);switch(e.type){case"and":return(t>0?"AND ":"")+n;case"or":return(t>0?"OR ":"")+n}return n})).join(" ").trim()}createWhereConditionExpression(e,t=!1){if("string"==typeof e)return e;if(Array.isArray(e))return 0===e.length?"1=1":1!==e.length||t?"("+this.createWhereClausesExpression(e)+")":this.createWhereClausesExpression(e);const{driver:n}=this.connection;switch(e.operator){case"lessThan":return`${e.parameters[0]} < ${e.parameters[1]}`;case"lessThanOrEqual":return`${e.parameters[0]} <= ${e.parameters[1]}`;case"arrayContains":return`${e.parameters[0]} @> ${e.parameters[1]}`;case"arrayContainedBy":return`${e.parameters[0]} <@ ${e.parameters[1]}`;case"arrayOverlap":return`${e.parameters[0]} && ${e.parameters[1]}`;case"moreThan":return`${e.parameters[0]} > ${e.parameters[1]}`;case"moreThanOrEqual":return`${e.parameters[0]} >= ${e.parameters[1]}`;case"notEqual":return`${e.parameters[0]} != ${e.parameters[1]}`;case"equal":return`${e.parameters[0]} = ${e.parameters[1]}`;case"ilike":return"postgres"===n.options.type||"cockroachdb"===n.options.type?`${e.parameters[0]} ILIKE ${e.parameters[1]}`:`UPPER(${e.parameters[0]}) LIKE UPPER(${e.parameters[1]})`;case"like":return`${e.parameters[0]} LIKE ${e.parameters[1]}`;case"between":return`${e.parameters[0]} BETWEEN ${e.parameters[1]} AND ${e.parameters[2]}`;case"in":return e.parameters.length<=1?"0=1":`${e.parameters[0]} IN (${e.parameters.slice(1).join(", ")})`;case"any":return`${e.parameters[0]} = ANY(${e.parameters[1]})`;case"isNull":return`${e.parameters[0]} IS NULL`;case"not":return`NOT(${this.createWhereConditionExpression(e.condition)})`;case"brackets":return`${this.createWhereConditionExpression(e.condition,!0)}`;case"and":return e.parameters.join(" AND ")}throw new TypeError(`Unsupported FindOperator ${f.constructor.name}`)}createCteExpression(){if(!this.hasCommonTableExpressions())return"";const e=this.connection.driver.cteCapabilities.requiresRecursiveHint;return"WITH "+this.expressionMap.commonTableExpressions.map((t=>{const n="string"==typeof t.queryBuilder?t.queryBuilder:t.queryBuilder.getQuery();if("string"!=typeof t.queryBuilder){if(t.queryBuilder.hasCommonTableExpressions())throw new i.K_(`Nested CTEs aren't supported (CTE: ${t.alias})`);if(!this.connection.driver.cteCapabilities.writable&&!p.a.isSelectQueryBuilder(t.queryBuilder))throw new i.K_(`Only select queries are supported in CTEs in ${this.connection.options.type} (CTE: ${t.alias})`);this.setParameters(t.queryBuilder.getParameters())}let r=this.escape(t.alias);if(t.options.columnNames){const e=t.options.columnNames.map((e=>this.escape(e)));if(p.a.isSelectQueryBuilder(t.queryBuilder)&&t.queryBuilder.expressionMap.selects.length&&t.options.columnNames.length!==t.queryBuilder.expressionMap.selects.length)throw new i.K_(`cte.options.columnNames length (${t.options.columnNames.length}) doesn't match subquery select list length ${t.queryBuilder.expressionMap.selects.length} (CTE: ${t.alias})`);r+=`(${e.join(", ")})`}return[t.options.recursive&&e?"RECURSIVE":"",r,t.options.materialized&&this.connection.driver.cteCapabilities.materializedHint?"MATERIALIZED":"","AS",`(${n})`].filter(Boolean).join(" ")})).join(", ")+" "}getWhereInIdsCondition(e){const t=this.expressionMap.mainAlias.metadata,n=(Array.isArray(e)?e:[e]).map((e=>t.ensureEntityIdMap(e)));if(!t.hasMultiplePrimaryKeys){const e=t.primaryColumns[0];if(!e.transformer&&!e.relationMetadata&&!e.embeddedMetadata)return{[e.propertyName]:(r=n.map((t=>e.getEntityValue(t,!1))),new f("in",r,!0,!0))}}var r;return new c((e=>{for(const t of n)e.orWhere(new c((e=>e.where(t))))}))}getExistsCondition(e){const t=e.clone().orderBy().groupBy().offset(void 0).limit(void 0).skip(void 0).take(void 0).select("1").setOption("disable-global-order");return[`EXISTS (${t.getQuery()})`,t.getParameters()]}findColumnsForPropertyPath(e){let t=this.expressionMap.mainAlias;const n=[],r=e.split(".");for(;r.length>1;){const e=r[0];if(!(null==t?void 0:t.hasMetadata))break;if(t.metadata.hasEmbeddedWithPropertyPath(e))r.unshift(`${r.shift()}.${r.shift()}`);else{if(!t.metadata.hasRelationWithPropertyPath(e))break;{const i=this.expressionMap.joinAttributes.find((t=>t.relationPropertyPath===e));if(!(null==i?void 0:i.alias)){const t=n.length>0?`${n.join(".")}.${e}`:e;throw new Error(`Cannot find alias for relation at ${t}`)}t=i.alias,n.push(...e.split(".")),r.shift()}}}if(!t)throw new Error(`Cannot find alias for property ${e}`);const i=r.join("."),o=t.metadata.findColumnsWithPropertyPath(i);if(!o.length)throw new d.B(e,t.metadata);return[t,n,o]}createPropertyPath(e,t,n=""){const r=[];for(const i of Object.keys(t)){const o=n?`${n}.${i}`:i;if(null===t[i]||"object"!=typeof t[i]||p.a.isFindOperator(t[i]))r.push(o);else if(e.hasEmbeddedWithPropertyPath(o)){const n=this.createPropertyPath(e,t[i],o);r.push(...n)}else if(e.hasRelationWithPropertyPath(o)){const n=e.findRelationWithPropertyPath(o);if("one-to-one"===n.relationType||"many-to-one"===n.relationType){const e=n.joinColumns.map((e=>e.referencedColumn)).filter((e=>!!e));if(e.length>0&&e.every((e=>e.getEntityValue(t[i],!1)))){r.push(o);continue}}if("one-to-many"===n.relationType||"many-to-many"===n.relationType)throw new Error(`Cannot query across ${n.relationType} for property ${o}`);const a=n.inverseEntityMetadata.primaryColumns;if(a.length>0&&a.every((e=>e.getEntityValue(t[i],!1)))){const e=a.map((e=>`${o}.${e.propertyPath}`));r.push(...e);continue}const s=this.createPropertyPath(n.inverseEntityMetadata,t[i]).map((e=>`${o}.${e}`));r.push(...s)}else r.push(o)}return r}*getPredicates(e){if(this.expressionMap.mainAlias.hasMetadata){const t=this.createPropertyPath(this.expressionMap.mainAlias.metadata,e);for(const n of t){const[t,r,i]=this.findColumnsForPropertyPath(n);for(const n of i){let i=e;for(const e of r){if(!i||!(e in i)){i={};break}i=i[e]}const o=this.expressionMap.aliasNamePrefixingEnabled?`${t.name}.${n.propertyPath}`:n.propertyPath,a=n.getEntityValue(i,!0);yield[o,a]}}}else for(const t of Object.keys(e)){const n=e[t],r=this.expressionMap.aliasNamePrefixingEnabled?`${this.alias}.${t}`:t;yield[r,n]}}getWherePredicateCondition(e,t){if(p.a.isFindOperator(t)){let n=[];if(t.useParameter)if(t.objectLiteralParameters)this.setParameters(t.objectLiteralParameters);else if(t.multipleParameters)for(const e of t.value)n.push(this.createParameter(e));else n.push(this.createParameter(t.value));if("raw"===t.type)return t.getSql?t.getSql(e):{operator:"equal",parameters:[e,t.value]};if("not"===t.type)return t.child?{operator:t.type,condition:this.getWherePredicateCondition(e,t.child)}:{operator:"notEqual",parameters:[e,...n]};if("and"===t.type){const n=t.value;return{operator:t.type,parameters:n.map((t=>this.createWhereConditionExpression(this.getWherePredicateCondition(e,t))))}}return{operator:t.type,parameters:[e,...n]}}return{operator:"equal",parameters:[e,this.createParameter(t)]}}getWhereCondition(e){if("string"==typeof e)return e;if(p.a.isBrackets(e)){const t=this.createQueryBuilder();return t.parentQueryBuilder=this,t.expressionMap.mainAlias=this.expressionMap.mainAlias,t.expressionMap.aliasNamePrefixingEnabled=this.expressionMap.aliasNamePrefixingEnabled,t.expressionMap.parameters=this.expressionMap.parameters,t.expressionMap.nativeParameters=this.expressionMap.nativeParameters,t.expressionMap.wheres=[],e.whereFactory(t),{operator:p.a.isNotBrackets(e)?"not":"brackets",condition:t.expressionMap.wheres}}if("function"==typeof e)return e(this);const t=Array.isArray(e)?e:[e],n=[];for(const e of t){const t=[];for(const[n,r]of this.getPredicates(e))t.push({type:"and",condition:this.getWherePredicateCondition(n,r)});n.push({type:"or",condition:t})}return 1===n.length?n[0].condition:n}obtainQueryRunner(){return this.queryRunner||this.connection.createQueryRunner()}hasCommonTableExpressions(){return this.expressionMap.commonTableExpressions.length>0}}},2749:(e,t,n)=>{"use strict";n.d(t,{G:()=>r});class r{static isAliasProperty(e){if("string"!=typeof e||-1===e.indexOf("."))return!1;const[t,n]=e.split(".");return!(!t||!n)&&-1===e.indexOf("(")&&-1===e.indexOf(")")}}},1655:(e,t,n)=>{"use strict";n.d(t,{K:()=>l});var r=n(9928),i=n(7862),o=n(7264);class a{constructor(e,t){this.queryBuilder=e,this.expressionMap=t}async update(e){const t=this.expressionMap.relationMetadata;if(t.isManyToOne||t.isOneToOneOwner){const n=t.joinColumns.reduce(((t,n)=>{const r=o.g.isObject(e)?n.referencedColumn.getEntityValue(e):e;return n.setEntityValue(t,r),t}),{});if(!this.expressionMap.of||Array.isArray(this.expressionMap.of)&&!this.expressionMap.of.length)return;await this.queryBuilder.createQueryBuilder().update(t.entityMetadata.target).set(n).whereInIds(this.expressionMap.of).execute()}else if((t.isOneToOneNotOwner||t.isOneToMany)&&null===e){const e={};t.inverseRelation.joinColumns.forEach((t=>{e[t.propertyName]=null}));const n=Array.isArray(this.expressionMap.of)?this.expressionMap.of:[this.expressionMap.of],r={},i=[];n.forEach(((e,n)=>{t.inverseRelation.joinColumns.map(((t,a)=>{const s="joinColumn_"+n+"_"+a;r[s]=o.g.isObject(e)?t.referencedColumn.getEntityValue(e):e,i.push(`${t.propertyPath} = :${s}`)}))}));const a=i.map((e=>"("+e+")")).join(" OR ");if(!a)return;await this.queryBuilder.createQueryBuilder().update(t.inverseEntityMetadata.target).set(e).where(a).setParameters(r).execute()}else if(t.isOneToOneNotOwner||t.isOneToMany){if(Array.isArray(this.expressionMap.of))throw new i.K_("You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.");const n=this.expressionMap.of,r=t.inverseRelation.joinColumns.reduce(((e,t)=>{const r=o.g.isObject(n)?t.referencedColumn.getEntityValue(n):n;return t.setEntityValue(e,r),e}),{});if(!e||Array.isArray(e)&&!e.length)return;await this.queryBuilder.createQueryBuilder().update(t.inverseEntityMetadata.target).set(r).whereInIds(e).execute()}else{const n=t.junctionEntityMetadata,r=Array.isArray(this.expressionMap.of)?this.expressionMap.of:[this.expressionMap.of],i=Array.isArray(e)?e:[e],a=t.isManyToManyOwner?r:i,s=t.isManyToManyOwner?i:r,l=[];if(a.forEach((e=>{s.forEach((t=>{const r={};n.ownerColumns.forEach((t=>{r[t.databaseName]=o.g.isObject(e)?t.referencedColumn.getEntityValue(e):e})),n.inverseColumns.forEach((e=>{r[e.databaseName]=o.g.isObject(t)?e.referencedColumn.getEntityValue(t):t})),l.push(r)}))})),!l.length)return;"oracle"===this.queryBuilder.connection.driver.options.type||"sap"===this.queryBuilder.connection.driver.options.type?await Promise.all(l.map((e=>this.queryBuilder.createQueryBuilder().insert().into(n.tableName).values(e).execute()))):await this.queryBuilder.createQueryBuilder().insert().into(n.tableName).values(l).execute()}}}class s{constructor(e,t){this.queryBuilder=e,this.expressionMap=t}async remove(e){const t=this.expressionMap.relationMetadata;if(t.isOneToMany){const n=Array.isArray(this.expressionMap.of)?this.expressionMap.of:[this.expressionMap.of],r=Array.isArray(e)?e:[e],i={};t.inverseRelation.joinColumns.forEach((e=>{i[e.propertyName]=null}));const a={},s=[];n.forEach(((e,n)=>{s.push(...r.map(((r,i)=>[...t.inverseRelation.joinColumns.map(((t,r)=>{const s="joinColumn_"+n+"_"+i+"_"+r;return a[s]=o.g.isObject(e)?t.referencedColumn.getEntityValue(e):e,`${t.propertyPath} = :${s}`})),...t.inverseRelation.entityMetadata.primaryColumns.map(((e,t)=>{const n="primaryColumn_"+i+"_"+i+"_"+t;return a[n]=o.g.isObject(r)?e.getEntityValue(r):r,`${e.propertyPath} = :${n}`}))].join(" AND "))))}));const l=s.map((e=>"("+e+")")).join(" OR ");if(!l)return;await this.queryBuilder.createQueryBuilder().update(t.inverseEntityMetadata.target).set(i).where(l).setParameters(a).execute()}else{const n=t.junctionEntityMetadata,r=Array.isArray(this.expressionMap.of)?this.expressionMap.of:[this.expressionMap.of],i=Array.isArray(e)?e:[e],a=t.isManyToManyOwner?r:i,s=t.isManyToManyOwner?i:r,l={},u=[];a.forEach(((e,t)=>{u.push(...s.map(((r,i)=>[...n.ownerColumns.map(((n,r)=>{const a="firstValue_"+t+"_"+i+"_"+r;return l[a]=o.g.isObject(e)?n.referencedColumn.getEntityValue(e):e,`${n.databaseName} = :${a}`})),...n.inverseColumns.map(((e,n)=>{const a="secondValue_"+t+"_"+i+"_"+n;return l[a]=o.g.isObject(r)?e.referencedColumn.getEntityValue(r):r,`${e.databaseName} = :${a}`}))].join(" AND "))))}));const c=u.map((e=>"("+e+")")).join(" OR ");await this.queryBuilder.createQueryBuilder().delete().from(n.tableName).where(c).setParameters(l).execute()}}}class l extends r.z{constructor(){super(...arguments),this["@instanceof"]=Symbol.for("RelationQueryBuilder")}getQuery(){return""}of(e){return this.expressionMap.of=e,this}async set(e){const t=this.expressionMap.relationMetadata;if(!this.expressionMap.of)throw new i.K_("Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.");if(t.isManyToMany||t.isOneToMany)throw new i.K_(`Set operation is only supported for many-to-one and one-to-one relations. However given "${t.propertyPath}" has ${t.relationType} relation. Use .add() method instead.`);if(t.joinColumns&&t.joinColumns.length>1&&(!o.g.isObject(e)||Object.keys(e).length<t.joinColumns.length))throw new i.K_('Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: "...", lastName: "..." })');return new a(this,this.expressionMap).update(e)}async add(e){if(Array.isArray(e)&&0===e.length)return;const t=this.expressionMap.relationMetadata;if(!this.expressionMap.of)throw new i.K_("Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.");if(t.isManyToOne||t.isOneToOne)throw new i.K_(`Add operation is only supported for many-to-many and one-to-many relations. However given "${t.propertyPath}" has ${t.relationType} relation. Use .set() method instead.`);if(t.joinColumns&&t.joinColumns.length>1&&(!o.g.isObject(e)||Object.keys(e).length<t.joinColumns.length))throw new i.K_('Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: "...", lastName: "..." })');return new a(this,this.expressionMap).update(e)}async remove(e){if(Array.isArray(e)&&0===e.length)return;const t=this.expressionMap.relationMetadata;if(!this.expressionMap.of)throw new i.K_("Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.");if(t.isManyToOne||t.isOneToOne)throw new i.K_(`Add operation is only supported for many-to-many and one-to-many relations. However given "${t.propertyPath}" has ${t.relationType} relation. Use .set(null) method instead.`);return new s(this,this.expressionMap).remove(e)}async addAndRemove(e,t){await this.remove(t),await this.add(e)}async loadOne(){return this.loadMany().then((e=>e[0]))}async loadMany(){let e=this.expressionMap.of;if(!o.g.isObject(e)){const t=this.expressionMap.mainAlias.metadata;if(t.hasMultiplePrimaryKeys)throw new i.K_("Cannot load entity because only one primary key was specified, however entity contains multiple primary keys");e=t.primaryColumns[0].createValueMap(e)}return this.connection.relationLoader.load(this.expressionMap.relationMetadata,e,this.queryRunner)}}},6120:(e,t,n)=>{"use strict";n.d(t,{v:()=>i});var r=n(7862);class i{constructor(e,t){this.queryRunner=e,this.expressionMap=t}async update(e,t){const n=this.expressionMap.mainAlias.metadata;await Promise.all(t.map((async(t,i)=>{if(this.queryRunner.connection.driver.isReturningSqlSupported("update")){"oracle"===this.queryRunner.connection.driver.options.type&&Array.isArray(e.raw)&&this.expressionMap.extraReturningColumns.length>0&&(e.raw=e.raw.reduce(((e,t,n)=>(e[this.expressionMap.extraReturningColumns[n].databaseName]=t[0],e)),{}));const r=Array.isArray(e.raw)?e.raw[i]:e.raw,o=this.queryRunner.connection.driver.createGeneratedMap(n,r);o&&(this.queryRunner.manager.merge(n.target,t,o),e.generatedMaps.push(o))}else{const i=this.expressionMap.extraReturningColumns;if(i.length>0){const o=this.expressionMap.mainAlias.metadata.getEntityIdMap(t);if(!o)throw new r.K_("Cannot update entity because entity id is not set in the entity.");const a=await this.queryRunner.manager.createQueryBuilder().select(n.primaryColumns.map((e=>n.targetName+"."+e.propertyPath))).addSelect(i.map((e=>n.targetName+"."+e.propertyPath))).from(n.target,n.targetName).where(o).withDeleted().setOption("create-pojo").getOne();a&&(this.queryRunner.manager.merge(n.target,t,a),e.generatedMaps.push(a))}}})))}async insert(e,t){const n=this.expressionMap.mainAlias.metadata;let i=n.getInsertionReturningColumns();const o=this.queryRunner.connection.driver.isReturningSqlSupported("insert");i=i.filter((e=>!e.isGenerated||!0===o));const a=t.map(((r,i)=>{"oracle"===this.queryRunner.connection.driver.options.type&&Array.isArray(e.raw)&&this.expressionMap.extraReturningColumns.length>0&&(e.raw=e.raw.reduce(((e,t,n)=>(e[this.expressionMap.extraReturningColumns[n].databaseName]=t[0],e)),{}));const o=Array.isArray(e.raw)?e.raw[i]:e.raw,a=this.queryRunner.connection.driver.createGeneratedMap(n,o,i,t.length)||{};return i in this.expressionMap.locallyGenerated&&this.queryRunner.manager.merge(n.target,a,this.expressionMap.locallyGenerated[i]),this.queryRunner.manager.merge(n.target,r,a),a}));if(i.length>0&&!this.queryRunner.connection.driver.isReturningSqlSupported("insert")){const e=t.map((e=>{const t=n.getEntityIdMap(e);if(!t)throw new r.K_("Cannot update entity because entity id is not set in the entity.");return t})),o=await this.queryRunner.manager.createQueryBuilder().select(n.primaryColumns.map((e=>n.targetName+"."+e.propertyPath))).addSelect(i.map((e=>n.targetName+"."+e.propertyPath))).from(n.target,n.targetName).where(e).setOption("create-pojo").getMany();t.forEach(((e,t)=>{this.queryRunner.manager.merge(n.target,a[t],o[t]),this.queryRunner.manager.merge(n.target,e,o[t])}))}t.forEach(((t,r)=>{const i=n.getEntityIdMap(t);e.identifiers.push(i),e.generatedMaps.push(a[r])}))}getUpdationReturningColumns(){return this.expressionMap.mainAlias.metadata.columns.filter((e=>e.isUpdateDate||e.isVersion))}getSoftDeletionReturningColumns(){return this.expressionMap.mainAlias.metadata.columns.filter((e=>e.isUpdateDate||e.isVersion||e.isDeleteDate))}}},900:(e,t,n)=>{"use strict";n.d(t,{Z:()=>T});class r{static chunk(e,t){return Array.from(Array(Math.ceil(e.length/t)),((n,r)=>e.slice(r*t,r*t+t)))}static splitClassesAndStrings(e){return[e.filter((e=>"string"!=typeof e)),e.filter((e=>"string"==typeof e))]}static groupBy(e,t){return e.reduce(((e,n)=>{const r=t(n);let i=e.find((e=>e.id===r));return i||(i={id:r,items:[]},e.push(i)),i.items.push(n),e}),[])}static uniq(e,t){return e.reduce(((e,n)=>{let r=!1;if("function"==typeof t){const i=t(n);r=!!e.find((e=>t(e)===i))}else r="string"==typeof t?!!e.find((e=>e[t]===n[t])):-1!==e.indexOf(n);return r||e.push(n),e}),[])}static isPlainObject(e){return null!=e&&(!e.constructor||e.constructor===Object)}static mergeArrayKey(e,t,n,r){r.has(n)?e[t]=r.get(n):n instanceof Promise||(this.isPlainObject(n)||Array.isArray(n)?(e[t]||(e[t]=Array.isArray(n)?[]:{}),r.set(n,e[t]),this.merge(e[t],n,r),r.delete(n)):e[t]=n)}static mergeObjectKey(e,t,n,r){r.has(n)?Object.assign(e,{[t]:r.get(n)}):n instanceof Promise||(this.isPlainObject(n)||Array.isArray(n)?(e[t]||Object.assign(e,{[t]:Array.isArray(n)?[]:{}}),r.set(n,e[t]),this.merge(e[t],n,r),r.delete(n)):Object.assign(e,{[t]:n}))}static merge(e,t,n=new Map){if(this.isPlainObject(e)&&this.isPlainObject(t))for(const r of Object.keys(t))"__proto__"!==r&&this.mergeObjectKey(e,r,t[r],n);if(Array.isArray(e)&&Array.isArray(t))for(let r=0;r<t.length;r++)this.mergeArrayKey(e,r,t[r],n)}static mergeDeep(e,...t){if(!t.length)return e;for(const n of t)r.merge(e,n);return e}static deepCompare(...e){let t,n,r,i;if(arguments.length<1)return!0;for(t=1,n=arguments.length;t<n;t++)if(r=[],i=[],!this.compare2Objects(r,i,arguments[0],arguments[t]))return!1;return!0}static deepValue(e,t){const n=t.split(".");for(let t=0,r=n.length;t<r;t++)e=e[n[t]];return e}static replaceEmptyObjectsWithBooleans(e){for(let t in e)e[t]&&"object"==typeof e[t]&&(0===Object.keys(e[t]).length?e[t]=!0:this.replaceEmptyObjectsWithBooleans(e[t]))}static propertyPathsToTruthyObject(e){let t={};for(let n of e){const e=n.split(".");if(!e.length)continue;t[e[0]]&&!0!==t[e[0]]||(t[e[0]]={});let r=t[e[0]];for(let[t,n]of e.entries())0!==t&&(r[n]?r=r[n]:t===e.length-1?(r[n]={},r=null):(r[n]={},r=r[n]))}return this.replaceEmptyObjectsWithBooleans(t),t}static compareIds(e,t){return null!=e&&null!=t&&(("string"==typeof e.id&&"string"==typeof t.id||"number"==typeof e.id&&"number"==typeof t.id)&&1===Object.keys(e).length&&1===Object.keys(t).length?e.id===t.id:r.deepCompare(e,t))}static toBoolean(e){return"boolean"==typeof e?e:"string"==typeof e?"true"===e||"1"===e:"number"==typeof e&&e>0}static zipObject(e,t){return e.reduce(((e,n,r)=>(e[n]=t[r],e)),{})}static isArraysEqual(e,t){return e.length===t.length&&e.every((e=>-1!==t.indexOf(e)))}static areMutuallyExclusive(...e){return!e.some((t=>{const n=e.filter((e=>e!==t));return t.some((e=>n.some((t=>t.includes(e)))))}))}static compare2Objects(e,t,n,r){let i;if(Number.isNaN(n)&&Number.isNaN(r))return!0;if(n===r)return!0;if(null===n||null===r||void 0===n||void 0===r)return!1;if(("function"==typeof n.equals||"function"==typeof n.equals)&&n.equals(r))return!0;if("function"==typeof n&&"function"==typeof r||n instanceof Date&&r instanceof Date||n instanceof RegExp&&r instanceof RegExp||"string"==typeof n&&"string"==typeof r||"number"==typeof n&&"number"==typeof r)return n.toString()===r.toString();if("object"!=typeof n||"object"!=typeof r)return!1;if(Object.prototype.isPrototypeOf.call(n,r)||Object.prototype.isPrototypeOf.call(r,n))return!1;if(n.constructor!==r.constructor)return!1;if(n.prototype!==r.prototype)return!1;if(e.indexOf(n)>-1||t.indexOf(r)>-1)return!1;for(i in r){if(r.hasOwnProperty(i)!==n.hasOwnProperty(i))return!1;if(typeof r[i]!=typeof n[i])return!1}for(i in n){if(r.hasOwnProperty(i)!==n.hasOwnProperty(i))return!1;if(typeof r[i]!=typeof n[i])return!1;switch(typeof n[i]){case"object":case"function":if(e.push(n),t.push(r),!this.compare2Objects(e,t,n[i],r[i]))return!1;e.pop(),t.pop();break;default:if(n[i]!==r[i])return!1}}return!0}}var i=n(6745),o=n(7264);class a{constructor(e,t,n,r,i){this.expressionMap=e,this.driver=t,this.rawRelationIdResults=n,this.rawRelationCountResults=r,this.queryRunner=i}transform(e,t){const n=this.group(e,t),r=[];return n.forEach((e=>{const n=this.transformRawResultsGroup(e,t);void 0===n||Object.values(n).every((e=>null===e))||r.push(n)})),r}group(e,t){const n=new Map,r=[];return"view"===t.metadata.tableType?r.push(...t.metadata.columns.map((e=>i.z.buildAlias(this.driver,t.name,e.databaseName)))):r.push(...t.metadata.primaryColumns.map((e=>i.z.buildAlias(this.driver,t.name,e.databaseName)))),e.forEach((e=>{const t=r.map((t=>{const n=e[t];return Buffer.isBuffer(n)?n.toString("hex"):o.g.isObject(n)?JSON.stringify(n):n})).join("_"),i=n.get(t);i?i.push(e):n.set(t,[e])})),n}transformRawResultsGroup(e,t){let n=t.metadata;if(n.discriminatorColumn){const r=e.map((e=>e[i.z.buildAlias(this.driver,t.name,t.metadata.discriminatorColumn.databaseName)])),o=n.childEntityMetadatas.find((e=>void 0!==r.find((t=>t===e.discriminatorValue))));o&&(n=o)}let r=n.create(this.queryRunner,{fromDeserializer:!0,pojo:-1!==this.expressionMap.options.indexOf("create-pojo")});const o=this.transformColumns(e,t,r,n),a=this.transformJoins(e,r,t,n),s=this.transformRelationIds(e,t,r,n),l=this.transformRelationCounts(e,t,r);return o||0===n.primaryColumns.filter((e=>!1===e.isVirtual)).length&&(a||s||l)?r:void 0}transformColumns(e,t,n,r){let o=!1;return r.columns.forEach((a=>{if(r.childEntityMetadatas.length>0&&-1!==r.childEntityMetadatas.findIndex((e=>e.target===a.target)))return;const s=e[0][i.z.buildAlias(this.driver,t.name,a.databaseName)];void 0===s||a.isVirtual||this.expressionMap.selects.find((e=>e.selection===t.name||e.selection===t.name+"."+a.propertyPath))&&(a.setEntityValue(n,this.driver.prepareHydratedValue(s,a)),null!==s&&(o=!0))})),o}transformJoins(e,t,n,r){let i=!1;return this.expressionMap.joinAttributes.forEach((o=>{if(!o.metadata)return;if(!o.isSelected)return;if(o.relation&&!r.relations.find((e=>e===o.relation)))return;if(o.mapToProperty){if(o.mapToPropertyParentAlias!==n.name)return}else if(!o.relation||o.parentAlias!==n.name||o.relationPropertyPath!==o.relation.propertyPath)return;let a=this.transform(e,o.alias);a=o.isMany?a:a[0],a=o.isMany||void 0!==a?a:null,void 0!==a&&(o.mapToPropertyPropertyName?t[o.mapToPropertyPropertyName]=a:o.relation.setEntityValue(t,a),i=!0)})),i}transformRelationIds(e,t,n,r){let i=!1;return this.rawRelationIdResults.forEach(((r,o)=>{if(r.relationIdAttribute.parentAlias!==t.name)return;const a=r.relationIdAttribute.relation,s=this.createValueMapFromJoinColumns(a,r.relationIdAttribute.parentAlias,e);if(null==s)return;this.prepareDataForTransformRelationIds();const l=this.hashEntityIds(a,s),u=this.relationIdMaps[o][l]||[],c=r.relationIdAttribute.mapToPropertyPropertyPath.split("."),p=(e,t,n)=>{const r=e.shift();return r&&0===e.length?(t[r]=n,t):r&&e.length>0?void p(e,t[r],n):t};a.isOneToOne||a.isManyToOne?void 0!==u[0]&&(p(c,n,u[0]),i=!0):(p(c,n,u),i=i||u.length>0)})),i}transformRelationCounts(e,t,n){let r=!1;return this.rawRelationCountResults.filter((e=>e.relationCountAttribute.parentAlias===t.name)).forEach((o=>{const a=o.relationCountAttribute.relation;let s;s=a.isOneToMany?a.inverseRelation.joinColumns[0].referencedColumn.databaseName:a.isOwning?a.joinColumns[0].referencedColumn.databaseName:a.inverseRelation.joinColumns[0].referencedColumn.databaseName;const l=e[0][i.z.buildAlias(this.driver,t.name,s)];null!=l&&(n[o.relationCountAttribute.mapToPropertyPropertyName]=0,o.results.filter((e=>e.parentId===l)).forEach((e=>{n[o.relationCountAttribute.mapToPropertyPropertyName]=parseInt(e.cnt),r=!0})))})),r}createValueMapFromJoinColumns(e,t,n){let r;return r=e.isManyToOne||e.isOneToOneOwner?e.entityMetadata.primaryColumns.map((e=>e)):e.isOneToMany||e.isOneToOneNotOwner?e.inverseRelation.joinColumns.map((e=>e)):e.isOwning?e.joinColumns.map((e=>e)):e.inverseRelation.inverseJoinColumns.map((e=>e)),r.reduce(((r,o)=>(n.forEach((n=>{e.isManyToOne||e.isOneToOneOwner?r[o.databaseName]=this.driver.prepareHydratedValue(n[i.z.buildAlias(this.driver,t,o.databaseName)],o):r[o.databaseName]=this.driver.prepareHydratedValue(n[i.z.buildAlias(this.driver,t,o.referencedColumn.databaseName)],o)})),r)),{})}extractEntityPrimaryIds(e,t){let n;return n=e.isManyToOne||e.isOneToOneOwner?e.entityMetadata.primaryColumns.map((e=>e)):e.isOneToMany||e.isOneToOneNotOwner?e.inverseRelation.joinColumns.map((e=>e)):e.isOwning?e.joinColumns.map((e=>e)):e.inverseRelation.inverseJoinColumns.map((e=>e)),n.reduce(((e,n)=>(e[n.databaseName]=t[n.databaseName],e)),{})}prepareDataForTransformRelationIds(){this.relationIdMaps||(this.relationIdMaps=this.rawRelationIdResults.map((e=>{const t=e.relationIdAttribute.relation;let n;return n=t.isManyToOne||t.isOneToOneOwner?t.joinColumns:t.isOneToMany||t.isOneToOneNotOwner?t.inverseEntityMetadata.primaryColumns:t.isOwning?t.inverseJoinColumns:t.inverseRelation.joinColumns,e.results.reduce(((i,o)=>{let a=n.reduce(((e,n)=>{let i=o[n.databaseName];return t.isOneToMany||t.isOneToOneNotOwner?(n.isVirtual&&n.referencedColumn&&n.referencedColumn.propertyName!==n.propertyName&&(i=n.referencedColumn.createValueMap(i)),r.mergeDeep(e,n.createValueMap(i))):(!n.isPrimary&&n.referencedColumn.referencedColumn&&(i=n.referencedColumn.referencedColumn.createValueMap(i)),r.mergeDeep(e,n.referencedColumn.createValueMap(i)))}),{});if(1!==n.length||e.relationIdAttribute.disableMixedMap||(a=t.isOneToMany||t.isOneToOneNotOwner?n[0].getEntityValue(a):n[0].referencedColumn.getEntityValue(a)),void 0!==a){const e=this.hashEntityIds(t,o);i[e]?i[e].push(a):i[e]=[a]}return i}),{})})))}hashEntityIds(e,t){const n=this.extractEntityPrimaryIds(e,t);return JSON.stringify(n)}}var s=n(2757),l=n(8955),u=n(3683),c=n(2475),p=n(5784),f=n(6869),d=n(58),h=n(5066);class y{constructor(e,t,n){this.connection=e,this.queryRunner=t,this.relationIdAttributes=n}async load(e){const t=this.relationIdAttributes.map((async t=>{if(t.relation.isManyToOne||t.relation.isOneToOneOwner){if(t.queryBuilderFactory)throw new h.K("Additional condition can not be used with ManyToOne or OneToOne owner relations.");const n={},r=e.map((e=>{const r={},o=[];t.relation.joinColumns.forEach((n=>{r[n.databaseName]=this.connection.driver.prepareHydratedValue(e[i.z.buildAlias(this.connection.driver,t.parentAlias,n.databaseName)],n.referencedColumn);const a=`${n.databaseName}:${r[n.databaseName]}`;-1===o.indexOf(a)&&o.push(a)})),t.relation.entityMetadata.primaryColumns.forEach((n=>{r[n.databaseName]=this.connection.driver.prepareHydratedValue(e[i.z.buildAlias(this.connection.driver,t.parentAlias,n.databaseName)],n);const a=`${n.databaseName}:${r[n.databaseName]}`;-1===o.indexOf(a)&&o.push(a)})),o.sort();const a=o.join("::");return n[a]?null:(n[a]=!0,r)})).filter((e=>e));return{relationIdAttribute:t,results:r}}if(t.relation.isOneToMany||t.relation.isOneToOneNotOwner){const n=t.relation,o=n.isOwning?n.joinColumns:n.inverseRelation.joinColumns,a=n.inverseEntityMetadata.target,s=n.inverseEntityMetadata.tableName,l=t.alias||s,u={},c={},p=e.map(((e,n)=>{const r=[],a={},s=o.map((o=>{const s=o.databaseName+n,u=e[i.z.buildAlias(this.connection.driver,t.parentAlias,o.referencedColumn.databaseName)],c=`${l}:${o.propertyPath}:${u}`;return-1!==r.indexOf(c)?"":(r.push(c),a[s]=u,l+"."+o.propertyPath+" = :"+s)})).filter((e=>e)).join(" AND ");r.sort();const p=r.join("::");return u[p]?"":(u[p]=!0,Object.assign(c,a),s)})).filter((e=>e)).map((e=>"("+e+")")).join(" OR ");if(!p)return{relationIdAttribute:t,results:[]};const f=this.connection.createQueryBuilder(this.queryRunner);r.uniq([...o,...n.inverseRelation.entityMetadata.primaryColumns],(e=>e.propertyPath)).forEach((e=>{f.addSelect(l+"."+e.propertyPath,e.databaseName)})),f.from(a,l).where("("+p+")").setParameters(c),t.queryBuilderFactory&&t.queryBuilderFactory(f);const d=await f.getRawMany();return d.forEach((e=>{o.forEach((t=>{e[t.databaseName]=this.connection.driver.prepareHydratedValue(e[t.databaseName],t.referencedColumn)})),n.inverseRelation.entityMetadata.primaryColumns.forEach((t=>{e[t.databaseName]=this.connection.driver.prepareHydratedValue(e[t.databaseName],t)}))})),{relationIdAttribute:t,results:d}}{const n=t.relation,r=n.isOwning?n.joinColumns:n.inverseRelation.inverseJoinColumns,o=n.isOwning?n.inverseJoinColumns:n.inverseRelation.joinColumns,a=t.junctionAlias,s=t.joinInverseSideMetadata.tableName,l=t.alias||s,u=n.isOwning?n.junctionEntityMetadata.tableName:n.inverseRelation.junctionEntityMetadata.tableName,c=e.map((e=>r.reduce(((n,r)=>(n[r.propertyPath]=e[i.z.buildAlias(this.connection.driver,t.parentAlias,r.referencedColumn.databaseName)],n)),{})));if(0===c.length)return{relationIdAttribute:t,results:[]};const p={},f={},d=c.map(((e,t)=>{const n=[],r={},i=Object.keys(e).map((i=>{const o=i+t,s=e[i],l=`${a}:${i}:${s}`;return-1!==n.indexOf(l)?"":(n.push(l),r[o]=s,a+"."+i+" = :"+o)})).filter((e=>e)).join(" AND ");n.sort();const o=n.join("::");return f[o]?"":(f[o]=!0,Object.assign(p,r),i)})).filter((e=>e)),h=o.map((e=>a+"."+e.propertyPath+" = "+l+"."+e.referencedColumn.propertyPath)).join(" AND "),y=d.map((e=>"("+e+" AND "+h+")")).join(" OR "),m=this.connection.createQueryBuilder(this.queryRunner);o.forEach((e=>{m.addSelect(a+"."+e.propertyPath,e.databaseName).addOrderBy(a+"."+e.propertyPath)})),r.forEach((e=>{m.addSelect(a+"."+e.propertyPath,e.databaseName).addOrderBy(a+"."+e.propertyPath)})),m.from(s,l).innerJoin(u,a,y).setParameters(p),t.queryBuilderFactory&&t.queryBuilderFactory(m);const g=await m.getRawMany();return g.forEach((e=>{[...r,...o].forEach((t=>{e[t.databaseName]=this.connection.driver.prepareHydratedValue(e[t.databaseName],t.referencedColumn)}))})),{relationIdAttribute:t,results:g}}}));return Promise.all(t)}}class m{constructor(e){this.expressionMap=e}transform(){this.expressionMap.mainAlias&&this.expressionMap.mainAlias.metadata.relationIds.forEach((e=>{const t=this.metadataToAttribute(this.expressionMap.mainAlias.name,e);this.expressionMap.relationIdAttributes.push(t)})),this.expressionMap.joinAttributes.forEach((e=>{e.metadata&&!e.metadata.isJunction&&e.metadata.relationIds.forEach((t=>{const n=this.metadataToAttribute(e.alias.name,t);this.expressionMap.relationIdAttributes.push(n)}))}))}metadataToAttribute(e,t){return new f.b(this.expressionMap,{relationName:e+"."+t.relation.propertyName,mapToProperty:e+"."+t.propertyName,alias:t.alias,queryBuilderFactory:t.queryBuilderFactory})}}class g{constructor(e,t,n){this.connection=e,this.queryRunner=t,this.relationCountAttributes=n}async load(e){const t=(e,t,n)=>n.indexOf(e)===t,n=this.relationCountAttributes.map((async n=>{if(n.relation.isOneToMany){const r=n.relation,i=r.inverseRelation,o=i.joinColumns[0].referencedColumn.propertyName,a=r.inverseEntityMetadata.target,s=r.inverseEntityMetadata.tableName,l=n.alias||s,u=i.propertyName;let c=e.map((e=>e[n.parentAlias+"_"+o])).filter((e=>!!e));if(c=c.filter(t),0===c.length)return{relationCountAttribute:n,results:[]};const p=this.connection.createQueryBuilder(this.queryRunner);return p.select(l+"."+u,"parentId").addSelect("COUNT(*)","cnt").from(a,l).where(l+"."+u+" IN (:...ids)").addGroupBy(l+"."+u).setParameter("ids",c),n.queryBuilderFactory&&n.queryBuilderFactory(p),{relationCountAttribute:n,results:await p.getRawMany()}}{let r,i,o,a;n.relation.isOwning?(r=n.relation.joinColumns[0].referencedColumn.databaseName,i=n.relation.inverseJoinColumns[0].referencedColumn.databaseName,o=n.relation.junctionEntityMetadata.columns[0],a=n.relation.junctionEntityMetadata.columns[1]):(r=n.relation.inverseRelation.inverseJoinColumns[0].referencedColumn.databaseName,i=n.relation.inverseRelation.joinColumns[0].referencedColumn.databaseName,o=n.relation.junctionEntityMetadata.columns[1],a=n.relation.junctionEntityMetadata.columns[0]);let s=e.map((e=>e[n.parentAlias+"_"+r])).filter((e=>!!e));if(s=s.filter(t),0===s.length)return{relationCountAttribute:n,results:[]};const l=n.junctionAlias,u=n.joinInverseSideMetadata.tableName,c=n.alias||u,p=n.relation.junctionEntityMetadata.tableName,f=l+"."+o.propertyName+" IN ("+s.map((e=>isNaN(e)?"'"+e+"'":e))+") AND "+l+"."+a.propertyName+" = "+c+"."+i,d=this.connection.createQueryBuilder(this.queryRunner);return d.select(l+"."+o.propertyName,"parentId").addSelect("COUNT("+d.escape(c)+"."+d.escape(i)+")","cnt").from(u,c).innerJoin(p,l,f).addGroupBy(l+"."+o.propertyName),n.queryBuilderFactory&&n.queryBuilderFactory(d),{relationCountAttribute:n,results:await d.getRawMany()}}}));return Promise.all(n)}}class v{constructor(e){this.expressionMap=e}transform(){this.expressionMap.mainAlias&&this.expressionMap.mainAlias.metadata.relationCounts.forEach((e=>{const t=this.metadataToAttribute(this.expressionMap.mainAlias.name,e);this.expressionMap.relationCountAttributes.push(t)})),this.expressionMap.joinAttributes.forEach((e=>{e.metadata&&!e.metadata.isJunction&&e.metadata.relationCounts.forEach((t=>{const n=this.metadataToAttribute(e.alias.name,t);this.expressionMap.relationCountAttributes.push(n)}))}))}metadataToAttribute(e,t){return new d.$(this.expressionMap,{relationName:e+"."+t.relation.propertyName,mapToProperty:e+"."+t.propertyName,alias:t.alias,queryBuilderFactory:t.queryBuilderFactory})}}var b=n(9928),w=n(5106),x=n(4885),E=n(497),S=n(7862),M=n(5093);class k{static transformFrom(e,t){return Array.isArray(e)?e.slice().reverse().reduce(((e,t)=>t.from(e)),t):e.from(t)}static transformTo(e,t){return Array.isArray(e)?e.reduce(((e,t)=>t.to(e)),t):e.to(t)}}var O=n(1962),C=n(7378);class T extends b.z{constructor(){super(...arguments),this["@instanceof"]=Symbol.for("SelectQueryBuilder"),this.findOptions={},this.selects=[],this.joins=[],this.conditions="",this.orderBys=[],this.relationMetadatas=[]}getQuery(){let e=this.createComment();return e+=this.createCteExpression(),e+=this.createSelectExpression(),e+=this.createJoinExpression(),e+=this.createWhereExpression(),e+=this.createGroupByExpression(),e+=this.createHavingExpression(),e+=this.createOrderByExpression(),e+=this.createLimitOffsetExpression(),e+=this.createLockExpression(),e=e.trim(),this.expressionMap.subQuery&&(e="("+e+")"),e}setFindOptions(e){return this.findOptions=e,this.applyFindOptions(),this}subQuery(){const e=this.createQueryBuilder();return e.expressionMap.subQuery=!0,e.parentQueryBuilder=this,e}select(e,t){if(this.expressionMap.queryType="select",Array.isArray(e))this.expressionMap.selects=e.map((e=>({selection:e})));else if("function"==typeof e){const n=e(this.subQuery());this.setParameters(n.getParameters()),this.expressionMap.selects.push({selection:n.getQuery(),aliasName:t})}else e&&(this.expressionMap.selects=[{selection:e,aliasName:t}]);return this}addSelect(e,t){if(!e)return this;if(Array.isArray(e))this.expressionMap.selects=this.expressionMap.selects.concat(e.map((e=>({selection:e}))));else if("function"==typeof e){const n=e(this.subQuery());this.setParameters(n.getParameters()),this.expressionMap.selects.push({selection:n.getQuery(),aliasName:t})}else e&&this.expressionMap.selects.push({selection:e,aliasName:t});return this}maxExecutionTime(e){return this.expressionMap.maxExecutionTime=e,this}distinct(e=!0){return this.expressionMap.selectDistinct=e,this}distinctOn(e){return this.expressionMap.selectDistinctOn=e,this}fromDummy(){var e;return this.from(null!==(e=this.connection.driver.dummyTableName)&&void 0!==e?e:"(SELECT 1 AS dummy_column)","dummy_table")}from(e,t){const n=this.createFromAlias(e,t);return this.expressionMap.setMainAlias(n),this}addFrom(e,t){const n=this.createFromAlias(e,t);return this.expressionMap.mainAlias||this.expressionMap.setMainAlias(n),this}innerJoin(e,t,n,r){return this.join("INNER",e,t,n,r),this}leftJoin(e,t,n,r){return this.join("LEFT",e,t,n,r),this}innerJoinAndSelect(e,t,n,r){return this.addSelect(t),this.innerJoin(e,t,n,r),this}leftJoinAndSelect(e,t,n,r){return this.addSelect(t),this.leftJoin(e,t,n,r),this}innerJoinAndMapMany(e,t,n,r,i){return this.addSelect(n),this.join("INNER",t,n,r,i,e,!0),this}innerJoinAndMapOne(e,t,n,r,i){return this.addSelect(n),this.join("INNER",t,n,r,i,e,!1),this}leftJoinAndMapMany(e,t,n,r,i){return this.addSelect(n),this.join("LEFT",t,n,r,i,e,!0),this}leftJoinAndMapOne(e,t,n,r,i){return this.addSelect(n),this.join("LEFT",t,n,r,i,e,!1),this}loadRelationIdAndMap(e,t,n,r){const i=new f.b(this.expressionMap);return i.mapToProperty=e,i.relationName=t,"string"==typeof n&&(i.alias=n),"object"==typeof n&&n.disableMixedMap&&(i.disableMixedMap=!0),i.queryBuilderFactory=r,this.expressionMap.relationIdAttributes.push(i),i.relation.junctionEntityMetadata&&this.expressionMap.createAlias({type:"other",name:i.junctionAlias,metadata:i.relation.junctionEntityMetadata}),this}loadRelationCountAndMap(e,t,n,r){const i=new d.$(this.expressionMap);return i.mapToProperty=e,i.relationName=t,i.alias=n,i.queryBuilderFactory=r,this.expressionMap.relationCountAttributes.push(i),this.expressionMap.createAlias({type:"other",name:i.junctionAlias}),i.relation.junctionEntityMetadata&&this.expressionMap.createAlias({type:"other",name:i.junctionAlias,metadata:i.relation.junctionEntityMetadata}),this}loadAllRelationIds(e){return this.expressionMap.mainAlias.metadata.relations.forEach((t=>{void 0!==e&&void 0!==e.relations&&-1===e.relations.indexOf(t.propertyPath)||this.loadRelationIdAndMap(this.expressionMap.mainAlias.name+"."+t.propertyPath,this.expressionMap.mainAlias.name+"."+t.propertyPath,e)})),this}where(e,t){this.expressionMap.wheres=[];const n=this.getWhereCondition(e);return n&&(this.expressionMap.wheres=[{type:"simple",condition:n}]),t&&this.setParameters(t),this}andWhere(e,t){return this.expressionMap.wheres.push({type:"and",condition:this.getWhereCondition(e)}),t&&this.setParameters(t),this}orWhere(e,t){return this.expressionMap.wheres.push({type:"or",condition:this.getWhereCondition(e)}),t&&this.setParameters(t),this}whereExists(e){return this.where(...this.getExistsCondition(e))}andWhereExists(e){return this.andWhere(...this.getExistsCondition(e))}orWhereExists(e){return this.orWhere(...this.getExistsCondition(e))}whereInIds(e){return this.where(this.getWhereInIdsCondition(e))}andWhereInIds(e){return this.andWhere(this.getWhereInIdsCondition(e))}orWhereInIds(e){return this.orWhere(this.getWhereInIdsCondition(e))}having(e,t){return this.expressionMap.havings.push({type:"simple",condition:e}),t&&this.setParameters(t),this}andHaving(e,t){return this.expressionMap.havings.push({type:"and",condition:e}),t&&this.setParameters(t),this}orHaving(e,t){return this.expressionMap.havings.push({type:"or",condition:e}),t&&this.setParameters(t),this}groupBy(e){return this.expressionMap.groupBys=e?[e]:[],this}addGroupBy(e){return this.expressionMap.groupBys.push(e),this}orderBy(e,t="ASC",n){if(void 0!==t&&"ASC"!==t&&"DESC"!==t)throw new S.K_('SelectQueryBuilder.addOrderBy "order" can accept only "ASC" and "DESC" values.');if(void 0!==n&&"NULLS FIRST"!==n&&"NULLS LAST"!==n)throw new S.K_('SelectQueryBuilder.addOrderBy "nulls" can accept only "NULLS FIRST" and "NULLS LAST" values.');return this.expressionMap.orderBys=e?"object"==typeof e?e:n?{[e]:{order:t,nulls:n}}:{[e]:t}:{},this}addOrderBy(e,t="ASC",n){if(void 0!==t&&"ASC"!==t&&"DESC"!==t)throw new S.K_('SelectQueryBuilder.addOrderBy "order" can accept only "ASC" and "DESC" values.');if(void 0!==n&&"NULLS FIRST"!==n&&"NULLS LAST"!==n)throw new S.K_('SelectQueryBuilder.addOrderBy "nulls" can accept only "NULLS FIRST" and "NULLS LAST" values.');return this.expressionMap.orderBys[e]=n?{order:t,nulls:n}:t,this}limit(e){if(this.expressionMap.limit=this.normalizeNumber(e),void 0!==this.expressionMap.limit&&isNaN(this.expressionMap.limit))throw new S.K_('Provided "limit" value is not a number. Please provide a numeric value.');return this}offset(e){if(this.expressionMap.offset=this.normalizeNumber(e),void 0!==this.expressionMap.offset&&isNaN(this.expressionMap.offset))throw new S.K_('Provided "offset" value is not a number. Please provide a numeric value.');return this}take(e){if(this.expressionMap.take=this.normalizeNumber(e),void 0!==this.expressionMap.take&&isNaN(this.expressionMap.take))throw new S.K_('Provided "take" value is not a number. Please provide a numeric value.');return this}skip(e){if(this.expressionMap.skip=this.normalizeNumber(e),void 0!==this.expressionMap.skip&&isNaN(this.expressionMap.skip))throw new S.K_('Provided "skip" value is not a number. Please provide a numeric value.');return this}useIndex(e){return this.expressionMap.useIndex=e,this}setLock(e,t,n){return this.expressionMap.lockMode=e,this.expressionMap.lockVersion=t,this.expressionMap.lockTables=n,this}setOnLocked(e){return this.expressionMap.onLocked=e,this}withDeleted(){return this.expressionMap.withDeleted=!0,this}async getRawOne(){return(await this.getRawMany())[0]}async getRawMany(){if("optimistic"===this.expressionMap.lockMode)throw new c.Y;this.expressionMap.queryEntity=!1;const e=this.obtainQueryRunner();let t=!1;try{!0===this.expressionMap.useTransaction&&!1===e.isTransactionActive&&(await e.startTransaction(),t=!0);const n=await this.loadRawResults(e);return t&&await e.commitTransaction(),n}catch(n){if(t)try{await e.rollbackTransaction()}catch(e){}throw n}finally{e!==this.queryRunner&&await e.release()}}async getRawAndEntities(){const e=this.obtainQueryRunner();let t=!1;try{!0===this.expressionMap.useTransaction&&!1===e.isTransactionActive&&(await e.startTransaction(),t=!0),this.expressionMap.queryEntity=!0;const n=await this.executeEntitiesAndRawResults(e);return t&&await e.commitTransaction(),n}catch(n){if(t)try{await e.rollbackTransaction()}catch(e){}throw n}finally{e!==this.queryRunner&&await e.release()}}async getOne(){const e=(await this.getRawAndEntities()).entities[0];if(e&&"optimistic"===this.expressionMap.lockMode&&this.expressionMap.lockVersion){const t=this.expressionMap.mainAlias.metadata;if(this.expressionMap.lockVersion instanceof Date){const n=t.updateDateColumn.getEntityValue(e);if(n.getTime()!==this.expressionMap.lockVersion.getTime())throw new u.Z(t.name,this.expressionMap.lockVersion,n)}else{const n=t.versionColumn.getEntityValue(e);if(n!==this.expressionMap.lockVersion)throw new u.Z(t.name,this.expressionMap.lockVersion,n)}}return void 0===e?null:e}async getOneOrFail(){const e=await this.getOne();if(!e)throw new E.E(this.expressionMap.mainAlias.target,this);return e}async getMany(){if("optimistic"===this.expressionMap.lockMode)throw new c.Y;return(await this.getRawAndEntities()).entities}async getCount(){if("optimistic"===this.expressionMap.lockMode)throw new c.Y;const e=this.obtainQueryRunner();let t=!1;try{!0===this.expressionMap.useTransaction&&!1===e.isTransactionActive&&(await e.startTransaction(),t=!0),this.expressionMap.queryEntity=!1;const n=await this.executeCountQuery(e);return t&&await e.commitTransaction(),n}catch(n){if(t)try{await e.rollbackTransaction()}catch(e){}throw n}finally{e!==this.queryRunner&&await e.release()}}async getExists(){if("optimistic"===this.expressionMap.lockMode)throw new c.Y;const e=this.obtainQueryRunner();let t=!1;try{!0===this.expressionMap.useTransaction&&!1===e.isTransactionActive&&(await e.startTransaction(),t=!0),this.expressionMap.queryEntity=!1;const n=await this.executeExistsQuery(e);return t&&await e.commitTransaction(),n}catch(n){if(t)try{await e.rollbackTransaction()}catch(e){}throw n}finally{e!==this.queryRunner&&await e.release()}}async getManyAndCount(){if("optimistic"===this.expressionMap.lockMode)throw new c.Y;const e=this.obtainQueryRunner();let t=!1;try{!0===this.expressionMap.useTransaction&&!1===e.isTransactionActive&&(await e.startTransaction(),t=!0),this.expressionMap.queryEntity=!0;const n=await this.executeEntitiesAndRawResults(e);this.expressionMap.queryEntity=!1;const r=this.expressionMap.cacheId;this.expressionMap.cacheId=r?`${r}-count`:r;const i=await this.executeCountQuery(e),o=[n.entities,i];return t&&await e.commitTransaction(),o}catch(n){if(t)try{await e.rollbackTransaction()}catch(e){}throw n}finally{e!==this.queryRunner&&await e.release()}}async stream(){this.expressionMap.queryEntity=!1;const[e,t]=this.getQueryAndParameters(),n=this.obtainQueryRunner();let r=!1;try{!0===this.expressionMap.useTransaction&&!1===n.isTransactionActive&&(await n.startTransaction(),r=!0);const i=()=>{if(n!==this.queryRunner)return n.release()},o=n.stream(e,t,i,i);return r&&await n.commitTransaction(),o}catch(e){if(r)try{await n.rollbackTransaction()}catch(e){}throw e}}cache(e,t){return"boolean"==typeof e?this.expressionMap.cache=e:"number"==typeof e?(this.expressionMap.cache=!0,this.expressionMap.cacheDuration=e):"string"!=typeof e&&"number"!=typeof e||(this.expressionMap.cache=!0,this.expressionMap.cacheId=e),t&&(this.expressionMap.cacheDuration=t),this}setOption(e){return this.expressionMap.options.push(e),this}join(e,t,n,r,i,o,a){this.setParameters(i||{});const s=new p.k(this.connection,this.expressionMap);if(s.direction=e,s.mapToProperty=o,s.isMappingMany=a,s.entityOrProperty=t,s.condition=r||void 0,this.expressionMap.joinAttributes.push(s),s.metadata){if(s.metadata.deleteDateColumn&&!this.expressionMap.withDeleted){const e=`${n}.${s.metadata.deleteDateColumn.propertyName} IS NULL`;s.condition=s.condition?` ${s.condition} AND ${e}`:`${e}`}s.alias=this.expressionMap.createAlias({type:"join",name:n,metadata:s.metadata}),s.relation&&s.relation.junctionEntityMetadata&&this.expressionMap.createAlias({type:"join",name:s.junctionAlias,metadata:s.relation.junctionEntityMetadata})}else{let e="";if("function"==typeof t){const n=t(this.subQuery());this.setParameters(n.getParameters()),e=n.getQuery()}else e=t;const r="function"==typeof t||"("===t.substr(0,1)&&")"===t.substr(-1);s.alias=this.expressionMap.createAlias({type:"join",name:n,tablePath:!1===r?t:void 0,subQuery:!0===r?e:void 0})}}createSelectExpression(){if(!this.expressionMap.mainAlias)throw new S.K_("Cannot build query because main alias is not set (call qb#from method)");const e=[],t=[];if(this.expressionMap.mainAlias.hasMetadata){const n=this.expressionMap.mainAlias.metadata;e.push(...this.buildEscapedEntityColumnSelects(this.expressionMap.mainAlias.name,n)),t.push(...this.findEntityColumnSelects(this.expressionMap.mainAlias.name,n))}this.expressionMap.joinAttributes.forEach((n=>{if(n.metadata)e.push(...this.buildEscapedEntityColumnSelects(n.alias.name,n.metadata)),t.push(...this.findEntityColumnSelects(n.alias.name,n.metadata));else{const r=this.expressionMap.selects.some((e=>e.selection===n.alias.name));if(r){e.push({selection:this.escape(n.alias.name)+".*"});const r=this.expressionMap.selects.find((e=>e.selection===n.alias.name));t.push(r)}}})),this.expressionMap.selects.filter((e=>-1===t.indexOf(e))).forEach((t=>e.push({selection:this.replacePropertyNames(t.selection),aliasName:t.aliasName}))),0===e.length&&e.push({selection:"*"});let n="";this.expressionMap.useIndex&&i.z.isMySQLFamily(this.connection.driver)&&(n=` USE INDEX (${this.expressionMap.useIndex})`);const r=this.expressionMap.aliases.filter((e=>"from"===e.type&&(e.tablePath||e.subQuery))).map((e=>e.subQuery?e.subQuery+" "+this.escape(e.name):this.getTableName(e.tablePath)+" "+this.escape(e.name))),o=this.createSelectDistinctExpression(),a=e.map((e=>e.selection+(e.aliasName?" AS "+this.escape(e.aliasName):""))).join(", ");return o+a+" FROM "+r.join(", ")+this.createTableLockExpression()+n}createSelectDistinctExpression(){const{selectDistinct:e,selectDistinctOn:t,maxExecutionTime:n}=this.expressionMap,{driver:r}=this.connection;let o="SELECT ";return n>0&&i.z.isMySQLFamily(r)&&(o+=`/*+ MAX_EXECUTION_TIME(${this.expressionMap.maxExecutionTime}) */ `),i.z.isPostgresFamily(r)&&t.length>0?o=`SELECT DISTINCT ON (${t.map((e=>this.replacePropertyNames(e))).join(", ")}) `:e&&(o="SELECT DISTINCT "),o}createJoinExpression(){return this.expressionMap.joinAttributes.map((e=>{const t=e.relation,n=e.tablePath,r=e.alias.name;let i=e.condition?" AND ("+e.condition+")":"";const o=e.parentAlias;if(!o||!t){const t=e.alias.subQuery?e.alias.subQuery:this.getTableName(n);return" "+e.direction+" JOIN "+t+" "+this.escape(r)+this.createTableLockExpression()+(e.condition?" ON "+this.replacePropertyNames(e.condition):"")}if(t.isManyToOne||t.isOneToOneOwner){const a=t.joinColumns.map((e=>r+"."+e.referencedColumn.propertyPath+"="+o+"."+t.propertyPath+"."+e.referencedColumn.propertyPath)).join(" AND ");return" "+e.direction+" JOIN "+this.getTableName(n)+" "+this.escape(r)+this.createTableLockExpression()+" ON "+this.replacePropertyNames(a+i)}if(t.isOneToMany||t.isOneToOneNotOwner){const a=t.inverseRelation.joinColumns.map((e=>("entity-child"===t.inverseEntityMetadata.tableType&&t.inverseEntityMetadata.discriminatorColumn&&(i+=" AND "+r+"."+t.inverseEntityMetadata.discriminatorColumn.databaseName+"='"+t.inverseEntityMetadata.discriminatorValue+"'"),r+"."+t.inverseRelation.propertyPath+"."+e.referencedColumn.propertyPath+"="+o+"."+e.referencedColumn.propertyPath))).join(" AND ");return" "+e.direction+" JOIN "+this.getTableName(n)+" "+this.escape(r)+this.createTableLockExpression()+" ON "+this.replacePropertyNames(a+i)}{const a=t.junctionEntityMetadata.tablePath,s=e.junctionAlias;let l="",u="";return t.isOwning?(l=t.joinColumns.map((e=>s+"."+e.propertyPath+"="+o+"."+e.referencedColumn.propertyPath)).join(" AND "),u=t.inverseJoinColumns.map((e=>r+"."+e.referencedColumn.propertyPath+"="+s+"."+e.propertyPath)).join(" AND ")):(l=t.inverseRelation.inverseJoinColumns.map((e=>s+"."+e.propertyPath+"="+o+"."+e.referencedColumn.propertyPath)).join(" AND "),u=t.inverseRelation.joinColumns.map((e=>r+"."+e.referencedColumn.propertyPath+"="+s+"."+e.propertyPath)).join(" AND "))," "+e.direction+" JOIN "+this.getTableName(a)+" "+this.escape(s)+this.createTableLockExpression()+" ON "+this.replacePropertyNames(l)+" "+e.direction+" JOIN "+this.getTableName(n)+" "+this.escape(r)+this.createTableLockExpression()+" ON "+this.replacePropertyNames(u+i)}})).join(" ")}createGroupByExpression(){return this.expressionMap.groupBys&&this.expressionMap.groupBys.length?" GROUP BY "+this.replacePropertyNames(this.expressionMap.groupBys.join(", ")):""}createOrderByExpression(){const e=this.expressionMap.allOrderBys;return Object.keys(e).length>0?" ORDER BY "+Object.keys(e).map((t=>"string"==typeof e[t]?this.replacePropertyNames(t)+" "+e[t]:this.replacePropertyNames(t)+" "+e[t].order+" "+e[t].nulls)).join(", "):""}createLimitOffsetExpression(){let e=this.expressionMap.offset,t=this.expressionMap.limit;if(e||t||0!==this.expressionMap.joinAttributes.length||(e=this.expressionMap.skip,t=this.expressionMap.take),"mssql"===this.connection.driver.options.type){let n="";if((t||e)&&Object.keys(this.expressionMap.allOrderBys).length<=0&&(n=" ORDER BY (SELECT NULL)"),t&&e)return n+" OFFSET "+e+" ROWS FETCH NEXT "+t+" ROWS ONLY";if(t)return n+" OFFSET 0 ROWS FETCH NEXT "+t+" ROWS ONLY";if(e)return n+" OFFSET "+e+" ROWS"}else if(i.z.isMySQLFamily(this.connection.driver)||"aurora-mysql"===this.connection.driver.options.type||"sap"===this.connection.driver.options.type||"spanner"===this.connection.driver.options.type){if(t&&e)return" LIMIT "+t+" OFFSET "+e;if(t)return" LIMIT "+t;if(e)throw new x.G}else if(i.z.isSQLiteFamily(this.connection.driver)){if(t&&e)return" LIMIT "+t+" OFFSET "+e;if(t)return" LIMIT "+t;if(e)return" LIMIT -1 OFFSET "+e}else if("oracle"===this.connection.driver.options.type){if(t&&e)return" OFFSET "+e+" ROWS FETCH NEXT "+t+" ROWS ONLY";if(t)return" FETCH NEXT "+t+" ROWS ONLY";if(e)return" OFFSET "+e+" ROWS"}else{if(t&&e)return" LIMIT "+t+" OFFSET "+e;if(t)return" LIMIT "+t;if(e)return" OFFSET "+e}return""}createTableLockExpression(){if("mssql"===this.connection.driver.options.type)switch(this.expressionMap.lockMode){case"pessimistic_read":return" WITH (HOLDLOCK, ROWLOCK)";case"pessimistic_write":return" WITH (UPDLOCK, ROWLOCK)";case"dirty_read":return" WITH (NOLOCK)"}return""}createLockExpression(){const e=this.connection.driver;let t="";if(this.expressionMap.lockTables){if(!i.z.isPostgresFamily(e)&&"cockroachdb"!==e.options.type)throw new S.K_("Lock tables not supported in selected driver");if(this.expressionMap.lockTables.length<1)throw new S.K_("lockTables cannot be an empty array");t=" OF "+this.expressionMap.lockTables.join(", ")}let n="";switch("nowait"===this.expressionMap.onLocked?n=" NOWAIT":"skip_locked"===this.expressionMap.onLocked&&(n=" SKIP LOCKED"),this.expressionMap.lockMode){case"pessimistic_read":if("mysql"===e.options.type||"aurora-mysql"===e.options.type)return i.z.isReleaseVersionOrGreater(e,"8.0.0")?" FOR SHARE"+t+n:" LOCK IN SHARE MODE";if("mariadb"===e.options.type)return" LOCK IN SHARE MODE";if(i.z.isPostgresFamily(e))return" FOR SHARE"+t+n;if("oracle"===e.options.type)return" FOR UPDATE";if("mssql"===e.options.type)return"";throw new w.A;case"pessimistic_write":if(i.z.isMySQLFamily(e)||"aurora-mysql"===e.options.type||"oracle"===e.options.type)return" FOR UPDATE"+n;if(i.z.isPostgresFamily(e)||"cockroachdb"===e.options.type)return" FOR UPDATE"+t+n;if("mssql"===e.options.type)return"";throw new w.A;case"pessimistic_partial_write":if(i.z.isPostgresFamily(e))return" FOR UPDATE"+t+" SKIP LOCKED";if(i.z.isMySQLFamily(e))return" FOR UPDATE SKIP LOCKED";throw new w.A;case"pessimistic_write_or_fail":if(i.z.isPostgresFamily(e)||"cockroachdb"===e.options.type)return" FOR UPDATE"+t+" NOWAIT";if(i.z.isMySQLFamily(e))return" FOR UPDATE NOWAIT";throw new w.A;case"for_no_key_update":if(i.z.isPostgresFamily(e)||"cockroachdb"===e.options.type)return" FOR NO KEY UPDATE"+t+n;throw new w.A;case"for_key_share":if(i.z.isPostgresFamily(e))return" FOR KEY SHARE"+t+n;throw new w.A;default:return""}}createHavingExpression(){if(!this.expressionMap.havings||!this.expressionMap.havings.length)return"";const e=this.expressionMap.havings.map(((e,t)=>{switch(e.type){case"and":return(t>0?"AND ":"")+this.replacePropertyNames(e.condition);case"or":return(t>0?"OR ":"")+this.replacePropertyNames(e.condition);default:return this.replacePropertyNames(e.condition)}})).join(" ");return e.length?" HAVING "+e:""}buildEscapedEntityColumnSelects(e,t){const n=this.expressionMap.selects.some((t=>t.selection===e)),r=[];if(n&&r.push(...t.columns.filter((e=>!0===e.isSelect))),r.push(...t.columns.filter((t=>this.expressionMap.selects.some((n=>n.selection===e+"."+t.propertyPath))))),0===r.length)return[];const o=this.expressionMap.queryEntity?t.primaryColumns.filter((e=>-1===r.indexOf(e))):[],a=[...r,...o],s=[],l=this.escape(e);return a.forEach((t=>{let r=l+"."+this.escape(t.databaseName);if(t.isVirtualProperty&&t.query&&(r=`(${t.query(l)})`),-1!==this.connection.driver.spatialTypes.indexOf(t.type)){if(i.z.isMySQLFamily(this.connection.driver)||"aurora-mysql"===this.connection.driver.options.type){const e=this.connection.driver.options.legacySpatialSupport;r=`${e?"AsText":"ST_AsText"}(${r})`}i.z.isPostgresFamily(this.connection.driver)&&(r=t.precision?`ST_AsGeoJSON(${r}, ${t.precision})::json`:`ST_AsGeoJSON(${r})::json`),"mssql"===this.connection.driver.options.type&&(r=`${r}.ToString()`)}const o=this.expressionMap.selects.filter((n=>n.selection===e+"."+t.propertyPath));o.length?o.forEach((n=>{s.push({selection:r,aliasName:n.aliasName?n.aliasName:i.z.buildAlias(this.connection.driver,e,t.databaseName),virtual:n.virtual})})):s.push({selection:r,aliasName:i.z.buildAlias(this.connection.driver,e,t.databaseName),virtual:n})})),s}findEntityColumnSelects(e,t){const n=this.expressionMap.selects.find((t=>t.selection===e));return n?[n]:this.expressionMap.selects.filter((n=>t.columns.some((t=>n.selection===e+"."+t.propertyPath))))}computeCountExpression(){const e=this.expressionMap.mainAlias.name,t=this.expressionMap.mainAlias.metadata.primaryColumns,n=this.escape(e);if(0===this.expressionMap.joinAttributes.length&&0===this.expressionMap.relationIdAttributes.length&&0===this.expressionMap.relationCountAttributes.length)return"COUNT(1)";if("cockroachdb"===this.connection.driver.options.type||i.z.isPostgresFamily(this.connection.driver))return"COUNT(DISTINCT("+t.map((e=>`${n}.${this.escape(e.databaseName)}`)).join(", ")+"))";if(i.z.isMySQLFamily(this.connection.driver))return"COUNT(DISTINCT "+t.map((e=>`${n}.${this.escape(e.databaseName)}`)).join(", ")+")";if("mssql"===this.connection.driver.options.type){const e=t.map((e=>`${n}.${this.escape(e.databaseName)}`)).join(", '|;|', ");return 1===t.length?`COUNT(DISTINCT(${e}))`:`COUNT(DISTINCT(CONCAT(${e})))`}return"spanner"===this.connection.driver.options.type?1===t.length?`COUNT(DISTINCT(${n}.${this.escape(t[0].databaseName)}))`:`COUNT(DISTINCT(CONCAT(${t.map((e=>`CAST(${n}.${this.escape(e.databaseName)} AS STRING)`)).join(", '|;|', ")})))`:"COUNT(DISTINCT("+t.map((e=>`${n}.${this.escape(e.databaseName)}`)).join(" || '|;|' || ")+"))"}async executeCountQuery(e){const t=this.computeCountExpression(),n=await this.clone().orderBy().groupBy().offset(void 0).limit(void 0).skip(void 0).take(void 0).select(t,"cnt").setOption("disable-global-order").loadRawResults(e);return n&&n[0]&&n[0].cnt?parseInt(n[0].cnt):0}async executeExistsQuery(e){return(await this.connection.createQueryBuilder().fromDummy().select("1","row_exists").whereExists(this).limit(1).loadRawResults(e)).length>0}applyFindOptions(){if(this.expressionMap.mainAlias.metadata){if(this.findOptions.relationLoadStrategy&&(this.expressionMap.relationLoadStrategy=this.findOptions.relationLoadStrategy),this.findOptions.comment&&this.comment(this.findOptions.comment),this.findOptions.withDeleted&&this.withDeleted(),this.findOptions.select){const e=Array.isArray(this.findOptions.select)?r.propertyPathsToTruthyObject(this.findOptions.select):this.findOptions.select;this.buildSelect(e,this.expressionMap.mainAlias.metadata,this.expressionMap.mainAlias.name)}if(this.selects.length&&this.select(this.selects),this.selects=[],this.findOptions.relations){const e=Array.isArray(this.findOptions.relations)?r.propertyPathsToTruthyObject(this.findOptions.relations):this.findOptions.relations;this.buildRelations(e,"object"==typeof this.findOptions.select?this.findOptions.select:void 0,this.expressionMap.mainAlias.metadata,this.expressionMap.mainAlias.name),!1!==this.findOptions.loadEagerRelations&&"join"===this.expressionMap.relationLoadStrategy&&this.buildEagerRelations(e,"object"==typeof this.findOptions.select?this.findOptions.select:void 0,this.expressionMap.mainAlias.metadata,this.expressionMap.mainAlias.name)}if(this.selects.length&&this.addSelect(this.selects),this.findOptions.where&&(this.conditions=this.buildWhere(this.findOptions.where,this.expressionMap.mainAlias.metadata,this.expressionMap.mainAlias.name),this.conditions.length&&this.andWhere("("!==this.conditions.substr(0,1)?"("+this.conditions+")":this.conditions)),this.findOptions.order&&this.buildOrder(this.findOptions.order,this.expressionMap.mainAlias.metadata,this.expressionMap.mainAlias.name),this.joins.length&&this.joins.forEach((e=>{e.select&&!e.selection?"inner"===e.type?this.innerJoinAndSelect(`${e.parentAlias}.${e.relationMetadata.propertyPath}`,e.alias):this.leftJoinAndSelect(`${e.parentAlias}.${e.relationMetadata.propertyPath}`,e.alias):"inner"===e.type?this.innerJoin(`${e.parentAlias}.${e.relationMetadata.propertyPath}`,e.alias):this.leftJoin(`${e.parentAlias}.${e.relationMetadata.propertyPath}`,e.alias)})),void 0!==this.findOptions.skip&&this.skip(this.findOptions.skip),void 0!==this.findOptions.take&&this.take(this.findOptions.take),"number"==typeof this.findOptions.cache||"boolean"==typeof this.findOptions.cache?this.cache(this.findOptions.cache):"object"==typeof this.findOptions.cache&&this.cache(this.findOptions.cache.id,this.findOptions.cache.milliseconds),this.findOptions.join&&(this.findOptions.join.leftJoin&&Object.keys(this.findOptions.join.leftJoin).forEach((e=>{this.leftJoin(this.findOptions.join.leftJoin[e],e)})),this.findOptions.join.innerJoin&&Object.keys(this.findOptions.join.innerJoin).forEach((e=>{this.innerJoin(this.findOptions.join.innerJoin[e],e)})),this.findOptions.join.leftJoinAndSelect&&Object.keys(this.findOptions.join.leftJoinAndSelect).forEach((e=>{this.leftJoinAndSelect(this.findOptions.join.leftJoinAndSelect[e],e)})),this.findOptions.join.innerJoinAndSelect&&Object.keys(this.findOptions.join.innerJoinAndSelect).forEach((e=>{this.innerJoinAndSelect(this.findOptions.join.innerJoinAndSelect[e],e)}))),this.findOptions.lock)if("optimistic"===this.findOptions.lock.mode)this.setLock(this.findOptions.lock.mode,this.findOptions.lock.version);else if("pessimistic_read"===this.findOptions.lock.mode||"pessimistic_write"===this.findOptions.lock.mode||"dirty_read"===this.findOptions.lock.mode||"pessimistic_partial_write"===this.findOptions.lock.mode||"pessimistic_write_or_fail"===this.findOptions.lock.mode||"for_no_key_update"===this.findOptions.lock.mode||"for_key_share"===this.findOptions.lock.mode){const e=this.findOptions.lock.tables?this.findOptions.lock.tables.map((e=>{const t=this.expressionMap.aliases.find((t=>t.metadata.tableNameWithoutPrefix===e));if(!t)throw new S.K_(`"${e}" is not part of this query`);return this.escape(t.name)})):void 0;this.setLock(this.findOptions.lock.mode,void 0,e),this.findOptions.lock.onLocked&&this.setOnLocked(this.findOptions.lock.onLocked)}!0===this.findOptions.loadRelationIds?this.loadAllRelationIds():"object"==typeof this.findOptions.loadRelationIds&&this.loadAllRelationIds(this.findOptions.loadRelationIds),!1!==this.findOptions.loadEagerRelations&&M.Z.joinEagerRelations(this,this.expressionMap.mainAlias.name,this.expressionMap.mainAlias.metadata),!0===this.findOptions.transaction&&(this.expressionMap.useTransaction=!0)}}async executeEntitiesAndRawResults(e){if(!this.expressionMap.mainAlias)throw new S.K_('Alias is not set. Use "from" method to set an alias.');if(("pessimistic_read"===this.expressionMap.lockMode||"pessimistic_write"===this.expressionMap.lockMode||"pessimistic_partial_write"===this.expressionMap.lockMode||"pessimistic_write_or_fail"===this.expressionMap.lockMode||"for_no_key_update"===this.expressionMap.lockMode||"for_key_share"===this.expressionMap.lockMode)&&!e.isTransactionActive)throw new s.G;if("optimistic"===this.expressionMap.lockMode){const e=this.expressionMap.mainAlias.metadata;if(!e.versionColumn&&!e.updateDateColumn)throw new l.f(e.name)}const t=new y(this.connection,e,this.expressionMap.relationIdAttributes),n=new g(this.connection,e,this.expressionMap.relationCountAttributes);new m(this.expressionMap).transform(),new v(this.expressionMap).transform();let o=[],u=[];if((this.expressionMap.skip||this.expressionMap.take)&&this.expressionMap.joinAttributes.length>0){const[t,n]=this.createOrderByCombinedWithSelectExpression("distinctAlias"),r=this.expressionMap.mainAlias.metadata,a=this.expressionMap.mainAlias.name,s=r.primaryColumns.map((e=>{const t=this.escape("distinctAlias"),r=this.escape(i.z.buildAlias(this.connection.driver,a,e.databaseName));n[r]||(n[r]="ASC");const o=i.z.buildAlias(this.connection.driver,"ids_"+a,e.databaseName);return`${t}.${r} AS ${this.escape(o)}`}));if(o=await new T(this.connection,e).select(`DISTINCT ${s.join(", ")}`).addSelect(t).from(`(${this.clone().orderBy().getQuery()})`,"distinctAlias").offset(this.expressionMap.skip).limit(this.expressionMap.take).orderBy(n).cache(this.expressionMap.cache&&this.expressionMap.cacheId?`${this.expressionMap.cacheId}-pagination`:this.expressionMap.cache,this.expressionMap.cacheDuration).setParameters(this.getParameters()).setNativeParameters(this.expressionMap.nativeParameters).getRawMany(),o.length>0){let t="";const n={};if(r.hasMultiplePrimaryKeys)t=o.map(((e,t)=>r.primaryColumns.map((r=>{const i=`orm_distinct_ids_${t}_${r.databaseName}`;return n[i]=e[`ids_${a}_${r.databaseName}`],`${a}.${r.propertyPath}=:${i}`})).join(" AND "))).join(" OR ");else{const e=i.z.buildAlias(this.connection.driver,"ids_"+a,r.primaryColumns[0].databaseName),s=o.map((t=>t[e]));s.every((e=>"number"==typeof e))?t=`${a}.${r.primaryColumns[0].propertyPath} IN (${s.join(", ")})`:(n.orm_distinct_ids=s,t=a+"."+r.primaryColumns[0].propertyPath+" IN (:...orm_distinct_ids)")}o=await this.clone().mergeExpressionMap({extraAppendedAndWhereCondition:t}).setParameters(n).loadRawResults(e)}}else o=await this.loadRawResults(e);if(o.length>0){const r=await t.load(o),i=await n.load(o),s=new a(this.expressionMap,this.connection.driver,r,i,this.queryRunner);u=s.transform(o,this.expressionMap.mainAlias),!0===this.expressionMap.callListeners&&this.expressionMap.mainAlias.hasMetadata&&await e.broadcaster.broadcast("Load",this.expressionMap.mainAlias.metadata,u)}return"query"===this.expressionMap.relationLoadStrategy&&await Promise.all(this.relationMetadatas.map((async e=>{const t=e.inverseEntityMetadata.target,n=e.inverseEntityMetadata.targetName,i=Array.isArray(this.findOptions.select)?r.propertyPathsToTruthyObject(this.findOptions.select):this.findOptions.select,o=Array.isArray(this.findOptions.relations)?r.propertyPathsToTruthyObject(this.findOptions.relations):this.findOptions.relations,a=this.createQueryBuilder().select(n).from(t,n).setFindOptions({select:i?r.deepValue(i,e.propertyPath):void 0,order:this.findOptions.order?r.deepValue(this.findOptions.order,e.propertyPath):void 0,relations:o?r.deepValue(o,e.propertyPath):void 0,withDeleted:this.findOptions.withDeleted,relationLoadStrategy:this.findOptions.relationLoadStrategy});if(u.length>0){const t=await this.connection.relationIdLoader.loadManyToManyRelationIdsAndGroup(e,u,void 0,a);u.forEach((n=>{const r=t.find((e=>e.entity===n));if(r){const t=void 0===r.related?null:r.related;e.setEntityValue(n,t)}}))}}))),{raw:o,entities:u}}createOrderByCombinedWithSelectExpression(e){const t=this.expressionMap.allOrderBys,n=Object.keys(t).map((t=>{if(-1!==t.indexOf(".")){const n=t.split("."),r=n[0],o=n.slice(1).join("."),a=this.expressionMap.findAliasByName(r).metadata.findColumnWithPropertyPath(o);return this.escape(e)+"."+this.escape(i.z.buildAlias(this.connection.driver,r,a.databaseName))}return this.expressionMap.selects.find((e=>e.selection===t||e.aliasName===t))?this.escape(e)+"."+t:""})).join(", "),r={};return Object.keys(t).forEach((n=>{if(-1!==n.indexOf(".")){const o=n.split("."),a=o[0],s=o.slice(1).join("."),l=this.expressionMap.findAliasByName(a).metadata.findColumnWithPropertyPath(s);r[this.escape(e)+"."+this.escape(i.z.buildAlias(this.connection.driver,a,l.databaseName))]=t[n]}else this.expressionMap.selects.find((e=>e.selection===n||e.aliasName===n))?r[this.escape(e)+"."+n]=t[n]:r[n]=t[n]})),[n,r]}async loadRawResults(e){const[t,n]=this.getQueryAndParameters(),r=t+" -- PARAMETERS: "+JSON.stringify(n),i="object"==typeof this.connection.options.cache?this.connection.options.cache:{};let o,a=!1;if(this.connection.queryResultCache&&(this.expressionMap.cache||i.alwaysEnabled))try{if(o=await this.connection.queryResultCache.getFromCache({identifier:this.expressionMap.cacheId,query:r,duration:this.expressionMap.cacheDuration||i.duration||1e3},e),o&&!this.connection.queryResultCache.isExpired(o))return JSON.parse(o.result)}catch(e){if(!i.ignoreErrors)throw e;a=!0}const s=await e.query(t,n,!0);if(!a&&this.connection.queryResultCache&&(this.expressionMap.cache||i.alwaysEnabled))try{await this.connection.queryResultCache.storeInCache({identifier:this.expressionMap.cacheId,query:r,time:(new Date).getTime(),duration:this.expressionMap.cacheDuration||i.duration||1e3,result:JSON.stringify(s.records)},o,e)}catch(e){if(!i.ignoreErrors)throw e}return s.records}mergeExpressionMap(e){return o.g.assign(this.expressionMap,e),this}normalizeNumber(e){return"number"==typeof e||null==e?e:Number(e)}obtainQueryRunner(){return this.queryRunner||this.connection.createQueryRunner("slave")}buildSelect(e,t,n,r){for(let i in e){if(void 0===e[i]||!1===e[i])continue;const o=r?r+"."+i:i,a=t.findColumnWithPropertyPathStrict(o),s=t.findEmbeddedWithPropertyPath(o),l=t.findRelationWithPropertyPath(o);if(!s&&!a&&!l)throw new O.B(o,t);a?this.selects.push(n+"."+o):s&&this.buildSelect(e[i],t,n,o)}}buildRelations(e,t,n,o,a){e&&Object.keys(e).forEach((s=>{const l=e[s],u=a?a+"."+s:s,c=n.findEmbeddedWithPropertyPath(u),p=n.findRelationWithPropertyPath(u);if(!c&&!p)throw new O.B(u,n);if(c)this.buildRelations(l,"object"==typeof t?r.deepValue(t,c.propertyPath):void 0,n,o,u);else if(p){let e=o+"_"+u.replace(".","_");e=i.z.buildAlias(this.connection.driver,{joiner:"__"},o,e),!0!==l&&"object"!=typeof l||("query"===this.expressionMap.relationLoadStrategy?this.relationMetadatas.push(p):(this.joins.push({type:"left",select:!0,selection:t&&"object"==typeof t[s]?t[s]:void 0,alias:e,parentAlias:o,relationMetadata:p}),t&&"object"==typeof t[s]&&this.buildSelect(t[s],p.inverseEntityMetadata,e))),"object"==typeof l&&"join"===this.expressionMap.relationLoadStrategy&&this.buildRelations(l,"object"==typeof t?r.deepValue(t,p.propertyPath):void 0,p.inverseEntityMetadata,e,void 0)}}))}buildEagerRelations(e,t,n,o,a){e&&Object.keys(e).forEach((s=>{const l=e[s],u=a?a+"."+s:s,c=n.findEmbeddedWithPropertyPath(u),p=n.findRelationWithPropertyPath(u);if(!c&&!p)throw new O.B(u,n);if(c)this.buildEagerRelations(l,"object"==typeof t?r.deepValue(t,c.propertyPath):void 0,n,o,u);else if(p){let e=o+"_"+u.replace(".","_");e=i.z.buildAlias(this.connection.driver,{joiner:"__"},o,e),!0!==l&&"object"!=typeof l||p.inverseEntityMetadata.eagerRelations.forEach((n=>{let r=e+"_"+n.propertyPath.replace(".","_");r=i.z.buildAlias(this.connection.driver,{joiner:"__"},e,r),this.joins.find((e=>e.alias===r))||this.joins.push({type:"left",select:!0,alias:r,parentAlias:e,selection:void 0,relationMetadata:n}),t&&"object"==typeof t[s]&&this.buildSelect(t[s],p.inverseEntityMetadata,e)})),"object"==typeof l&&this.buildEagerRelations(l,"object"==typeof t?r.deepValue(t,p.propertyPath):void 0,p.inverseEntityMetadata,e,void 0)}}))}buildOrder(e,t,n,r){for(let o in e){if(void 0===e[o])continue;const a=r?r+"."+o:o,s=t.findColumnWithPropertyPathStrict(a),l=t.findEmbeddedWithPropertyPath(a),u=t.findRelationWithPropertyPath(a);if(!l&&!s&&!u)throw new O.B(a,t);if(s){let t="object"==typeof e[o]?e[o].direction:e[o];t="DESC"===t||"desc"===t||-1===t?"DESC":"ASC";let r="object"==typeof e[o]?e[o].nulls:void 0;r="first"===(null==r?void 0:r.toLowerCase())?"NULLS FIRST":"last"===(null==r?void 0:r.toLowerCase())?"NULLS LAST":void 0;let l=`${n}.${a}`;if(s.isVirtualProperty&&s.query){const e=this.expressionMap.selects.find((e=>e.selection===l));e?(l=i.z.buildAlias(this.connection.driver,n,s.databaseName),e.aliasName=l):l=`(${s.query(n)})`}this.addOrderBy(l,t,r)}else if(l)this.buildOrder(e[o],t,n,a);else if(u){let t=n+"_"+a.replace(".","_");t=i.z.buildAlias(this.connection.driver,{joiner:"__"},n,t),this.joins.find((e=>e.alias===t))||this.joins.push({type:"left",select:!1,alias:t,parentAlias:n,selection:void 0,relationMetadata:u}),this.buildOrder(e[o],u.inverseEntityMetadata,t)}}}buildWhere(e,t,n,r){let o="";if(Array.isArray(e))o="("+e.map((e=>this.buildWhere(e,t,n,r))).filter((e=>!!e)).map((e=>"("+e+")")).join(" OR ")+")";else{let a=[];for(let o in e){if(void 0===e[o]||null===e[o])continue;const s=r?r+"."+o:o,l=t.findColumnWithPropertyPathStrict(s),u=t.findEmbeddedWithPropertyPath(s),c=t.findRelationWithPropertyPath(s);if(!u&&!l&&!c)throw new O.B(s,t);if(l){let t=`${n}.${s}`;l.isVirtualProperty&&l.query&&(t=`(${l.query(n)})`);let r=e[o];C.a.isEqualOperator(e[o])&&(r=e[o].value),l.transformer&&(r=k.transformTo(l.transformer,r)),a.push(this.createWhereConditionExpression(this.getWherePredicateCondition(t,r)))}else if(u){const r=this.buildWhere(e[o],t,n,s);r&&a.push(r)}else if(c){if("object"==typeof e[o]&&Object.keys(e[o]).every((t=>void 0===e[o][t])))continue;if(C.a.isFindOperator(e[o]))if("moreThan"===e[o].type||"lessThan"===e[o].type){const t="moreThan"===e[o].type?">":"<",r=this.subQuery();if(c.isManyToManyOwner)r.select("COUNT(*)").from(c.joinTableName,c.joinTableName).where(c.joinColumns.map((e=>`${c.joinTableName}.${e.propertyName} = ${n}.${e.referencedColumn.propertyName}`)).join(" AND "));else if(c.isManyToManyNotOwner)r.select("COUNT(*)").from(c.inverseRelation.joinTableName,c.inverseRelation.joinTableName).where(c.inverseRelation.inverseJoinColumns.map((e=>`${c.inverseRelation.joinTableName}.${e.propertyName} = ${n}.${e.referencedColumn.propertyName}`)).join(" AND "));else{if(!c.isOneToMany)throw new Error("This relation isn't supported by given find operator");r.select("COUNT(*)").from(c.inverseEntityMetadata.target,c.inverseEntityMetadata.tableName).where(c.inverseRelation.joinColumns.map((e=>`${c.inverseEntityMetadata.tableName}.${e.propertyName} = ${n}.${e.referencedColumn.propertyName}`)).join(" AND "))}this.andWhere(r.getSql()+" "+t+" "+parseInt(e[o].value))}else{if(!(c.isManyToOne||c.isOneToOne&&c.isOneToOneOwner))throw new Error("This relation isn't supported by given find operator");{const t=`${n}.${s}`;a.push(this.createWhereConditionExpression(this.getWherePredicateCondition(t,e[o])))}}else{let t=n+"_"+c.propertyPath.replace(".","_");t=i.z.buildAlias(this.connection.driver,{joiner:"__"},n,t),this.joins.find((e=>e.alias===t))||this.joins.push({type:"left",select:!1,selection:void 0,alias:t,parentAlias:n,relationMetadata:c});const r=this.buildWhere(e[o],c.inverseEntityMetadata,t);r&&a.push(r)}}}o=a.join(" AND ")}return o}}},7302:(e,t,n)=>{"use strict";n.d(t,{B:()=>d});var r=n(9928),i=n(1568),o=n(581),a=n(6120),s=n(2270),l=n(6723),u=n(210),c=n(7862),p=n(6745),f=n(7378);class d extends r.z{constructor(e,t){super(e,t),this["@instanceof"]=Symbol.for("SoftDeleteQueryBuilder"),this.expressionMap.aliasNamePrefixingEnabled=!1}getQuery(){let e=this.createUpdateExpression();return e+=this.createCteExpression(),e+=this.createOrderByExpression(),e+=this.createLimitExpression(),e.trim()}async execute(){const e=this.obtainQueryRunner();let t=!1;try{!0===this.expressionMap.useTransaction&&!1===e.isTransactionActive&&(await e.startTransaction(),t=!0),!0===this.expressionMap.callListeners&&this.expressionMap.mainAlias.hasMetadata&&("soft-delete"===this.expressionMap.queryType?await e.broadcaster.broadcast("BeforeSoftRemove",this.expressionMap.mainAlias.metadata):"restore"===this.expressionMap.queryType&&await e.broadcaster.broadcast("BeforeRecover",this.expressionMap.mainAlias.metadata));const n=new a.v(e,this.expressionMap);!0===this.expressionMap.updateEntity&&this.expressionMap.mainAlias.hasMetadata&&this.expressionMap.whereEntities.length>0&&(this.expressionMap.extraReturningColumns=n.getSoftDeletionReturningColumns());const[r,o]=this.getQueryAndParameters(),s=await e.query(r,o,!0),l=i.s.from(s);return!0===this.expressionMap.updateEntity&&this.expressionMap.mainAlias.hasMetadata&&this.expressionMap.whereEntities.length>0&&await n.update(l,this.expressionMap.whereEntities),!0===this.expressionMap.callListeners&&this.expressionMap.mainAlias.hasMetadata&&("soft-delete"===this.expressionMap.queryType?await e.broadcaster.broadcast("AfterSoftRemove",this.expressionMap.mainAlias.metadata):"restore"===this.expressionMap.queryType&&await e.broadcaster.broadcast("AfterRecover",this.expressionMap.mainAlias.metadata)),t&&await e.commitTransaction(),l}catch(n){if(t)try{await e.rollbackTransaction()}catch(e){}throw n}finally{e!==this.queryRunner&&await e.release()}}from(e,t){e=f.a.isEntitySchema(e)?e.options.name:e;const n=this.createFromAlias(e,t);return this.expressionMap.setMainAlias(n),this}where(e,t){this.expressionMap.wheres=[];const n=this.getWhereCondition(e);return n&&(this.expressionMap.wheres=[{type:"simple",condition:n}]),t&&this.setParameters(t),this}andWhere(e,t){return this.expressionMap.wheres.push({type:"and",condition:this.getWhereCondition(e)}),t&&this.setParameters(t),this}orWhere(e,t){return this.expressionMap.wheres.push({type:"or",condition:this.getWhereCondition(e)}),t&&this.setParameters(t),this}whereInIds(e){return this.where(this.getWhereInIdsCondition(e))}andWhereInIds(e){return this.andWhere(this.getWhereInIdsCondition(e))}orWhereInIds(e){return this.orWhere(this.getWhereInIdsCondition(e))}output(e){return this.returning(e)}returning(e){if(!this.connection.driver.isReturningSqlSupported("update"))throw new o.y;return this.expressionMap.returning=e,this}orderBy(e,t="ASC",n){return this.expressionMap.orderBys=e?"object"==typeof e?e:n?{[e]:{order:t,nulls:n}}:{[e]:t}:{},this}addOrderBy(e,t="ASC",n){return this.expressionMap.orderBys[e]=n?{order:t,nulls:n}:t,this}limit(e){return this.expressionMap.limit=e,this}whereEntity(e){if(!this.expressionMap.mainAlias.hasMetadata)throw new c.K_(".whereEntity method can only be used on queries which update real entity table.");this.expressionMap.wheres=[];const t=Array.isArray(e)?e:[e];return t.forEach((e=>{const t=this.expressionMap.mainAlias.metadata.getEntityIdMap(e);if(!t)throw new c.K_("Provided entity does not have ids set, cannot perform operation.");this.orWhereInIds(t)})),this.expressionMap.whereEntities=t,this}updateEntity(e){return this.expressionMap.updateEntity=e,this}createUpdateExpression(){const e=this.expressionMap.mainAlias.hasMetadata?this.expressionMap.mainAlias.metadata:void 0;if(!e)throw new c.K_(`Cannot get entity metadata for the given alias "${this.expressionMap.mainAlias}"`);if(!e.deleteDateColumn)throw new l.d(e);const t=[];switch(this.expressionMap.queryType){case"soft-delete":t.push(this.escape(e.deleteDateColumn.databaseName)+" = CURRENT_TIMESTAMP");break;case"restore":t.push(this.escape(e.deleteDateColumn.databaseName)+" = NULL");break;default:throw new c.K_('The queryType must be "soft-delete" or "restore"')}if(e.versionColumn&&t.push(this.escape(e.versionColumn.databaseName)+" = "+this.escape(e.versionColumn.databaseName)+" + 1"),e.updateDateColumn&&t.push(this.escape(e.updateDateColumn.databaseName)+" = CURRENT_TIMESTAMP"),t.length<=0)throw new u.y;const n=this.createWhereExpression(),r=this.createReturningExpression("update");return""===r?`UPDATE ${this.getTableName(this.getMainTableName())} SET ${t.join(", ")}${n}`:"mssql"===this.connection.driver.options.type?`UPDATE ${this.getTableName(this.getMainTableName())} SET ${t.join(", ")} OUTPUT ${r}${n}`:`UPDATE ${this.getTableName(this.getMainTableName())} SET ${t.join(", ")}${n} RETURNING ${r}`}createOrderByExpression(){const e=this.expressionMap.orderBys;return Object.keys(e).length>0?" ORDER BY "+Object.keys(e).map((t=>"string"==typeof e[t]?this.replacePropertyNames(t)+" "+e[t]:this.replacePropertyNames(t)+" "+e[t].order+" "+e[t].nulls)).join(", "):""}createLimitExpression(){let e=this.expressionMap.limit;if(e){if(p.z.isMySQLFamily(this.connection.driver))return" LIMIT "+e;throw new s.T}return""}}},8394:(e,t,n)=>{"use strict";n.d(t,{T:()=>f});var r=n(9928),i=n(1568),o=n(581),a=n(6120),s=n(2270),l=n(210),u=n(7862),c=n(1962),p=n(6745);class f extends r.z{constructor(e,t){super(e,t),this["@instanceof"]=Symbol.for("UpdateQueryBuilder"),this.expressionMap.aliasNamePrefixingEnabled=!1}getQuery(){let e=this.createComment();return e+=this.createCteExpression(),e+=this.createUpdateExpression(),e+=this.createOrderByExpression(),e+=this.createLimitExpression(),e.trim()}async execute(){const e=this.obtainQueryRunner();let t=!1;try{!0===this.expressionMap.useTransaction&&!1===e.isTransactionActive&&(await e.startTransaction(),t=!0),!0===this.expressionMap.callListeners&&this.expressionMap.mainAlias.hasMetadata&&await e.broadcaster.broadcast("BeforeUpdate",this.expressionMap.mainAlias.metadata,this.expressionMap.valuesSet);let n=null,r=null;const o=new a.v(e,this.expressionMap),s=[];if(Array.isArray(this.expressionMap.returning)&&this.expressionMap.mainAlias.hasMetadata)for(const e of this.expressionMap.returning)s.push(...this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(e));!0===this.expressionMap.updateEntity&&this.expressionMap.mainAlias.hasMetadata&&this.expressionMap.whereEntities.length>0&&(this.expressionMap.extraReturningColumns=o.getUpdationReturningColumns(),s.push(...this.expressionMap.extraReturningColumns.filter((e=>!s.includes(e))))),s.length>0&&"mssql"===this.connection.driver.options.type&&(n=this.connection.driver.buildTableVariableDeclaration("@OutputTable",s),r="SELECT * FROM @OutputTable");const[l,u]=this.getQueryAndParameters(),c=[n,l,r],p=await e.query(c.filter((e=>null!=e)).join(";\n\n"),u,!0),f=i.s.from(p);return!0===this.expressionMap.updateEntity&&this.expressionMap.mainAlias.hasMetadata&&this.expressionMap.whereEntities.length>0&&await o.update(f,this.expressionMap.whereEntities),!0===this.expressionMap.callListeners&&this.expressionMap.mainAlias.hasMetadata&&await e.broadcaster.broadcast("AfterUpdate",this.expressionMap.mainAlias.metadata,this.expressionMap.valuesSet),t&&await e.commitTransaction(),f}catch(n){if(t)try{await e.rollbackTransaction()}catch(e){}throw n}finally{e!==this.queryRunner&&await e.release()}}set(e){return this.expressionMap.valuesSet=e,this}where(e,t){this.expressionMap.wheres=[];const n=this.getWhereCondition(e);return n&&(this.expressionMap.wheres=[{type:"simple",condition:n}]),t&&this.setParameters(t),this}andWhere(e,t){return this.expressionMap.wheres.push({type:"and",condition:this.getWhereCondition(e)}),t&&this.setParameters(t),this}orWhere(e,t){return this.expressionMap.wheres.push({type:"or",condition:this.getWhereCondition(e)}),t&&this.setParameters(t),this}whereInIds(e){return this.where(this.getWhereInIdsCondition(e))}andWhereInIds(e){return this.andWhere(this.getWhereInIdsCondition(e))}orWhereInIds(e){return this.orWhere(this.getWhereInIdsCondition(e))}output(e){return this.returning(e)}returning(e){if(!this.connection.driver.isReturningSqlSupported("update"))throw new o.y;return this.expressionMap.returning=e,this}orderBy(e,t="ASC",n){return this.expressionMap.orderBys=e?"object"==typeof e?e:n?{[e]:{order:t,nulls:n}}:{[e]:t}:{},this}addOrderBy(e,t="ASC",n){return this.expressionMap.orderBys[e]=n?{order:t,nulls:n}:t,this}limit(e){return this.expressionMap.limit=e,this}whereEntity(e){if(!this.expressionMap.mainAlias.hasMetadata)throw new u.K_(".whereEntity method can only be used on queries which update real entity table.");this.expressionMap.wheres=[];const t=Array.isArray(e)?e:[e];return t.forEach((e=>{const t=this.expressionMap.mainAlias.metadata.getEntityIdMap(e);if(!t)throw new u.K_("Provided entity does not have ids set, cannot perform operation.");this.orWhereInIds(t)})),this.expressionMap.whereEntities=t,this}updateEntity(e){return this.expressionMap.updateEntity=e,this}createUpdateExpression(){const e=this.getValueSet(),t=this.expressionMap.mainAlias.hasMetadata?this.expressionMap.mainAlias.metadata:void 0,n={};for(let t in e)void 0!==e[t]&&(n[t]=e[t]);const r=[],i=[];if(t?(this.createPropertyPath(t,n).forEach((e=>{const o=t.findColumnsWithPropertyPath(e);if(o.length<=0)throw new c.B(e,t);o.forEach((e=>{if(!e.isUpdate||i.includes(e))return;i.push(e);let t=e.getEntityValue(n);if(!e.referencedColumn||"object"!=typeof t||t instanceof Date||null===t||Buffer.isBuffer(t)?"function"!=typeof t&&(t=this.connection.driver.preparePersistentValue(t,e)):t=e.referencedColumn.getEntityValue(t),"function"==typeof t)r.push(this.escape(e.databaseName)+" = "+t());else if("sap"!==this.connection.driver.options.type&&"spanner"!==this.connection.driver.options.type||null!==t){"mssql"===this.connection.driver.options.type&&(t=this.connection.driver.parametrizeValue(e,t));const n=this.createParameter(t);let i=null;if(!p.z.isMySQLFamily(this.connection.driver)&&"aurora-mysql"!==this.connection.driver.options.type||-1===this.connection.driver.spatialTypes.indexOf(e.type))i="postgres"===this.connection.driver.options.type&&-1!==this.connection.driver.spatialTypes.indexOf(e.type)?null!=e.srid?`ST_SetSRID(ST_GeomFromGeoJSON(${n}), ${e.srid})::${e.type}`:`ST_GeomFromGeoJSON(${n})::${e.type}`:"mssql"===this.connection.driver.options.type&&-1!==this.connection.driver.spatialTypes.indexOf(e.type)?e.type+"::STGeomFromText("+n+", "+(e.srid||"0")+")":n;else{const t=this.connection.driver.options.legacySpatialSupport?"GeomFromText":"ST_GeomFromText";i=null!=e.srid?`${t}(${n}, ${e.srid})`:`${t}(${n})`}r.push(this.escape(e.databaseName)+" = "+i)}else r.push(this.escape(e.databaseName)+" = NULL")}))})),(r.length>0||0===Object.keys(n).length)&&(t.versionColumn&&-1===i.indexOf(t.versionColumn)&&r.push(this.escape(t.versionColumn.databaseName)+" = "+this.escape(t.versionColumn.databaseName)+" + 1"),t.updateDateColumn&&-1===i.indexOf(t.updateDateColumn)&&r.push(this.escape(t.updateDateColumn.databaseName)+" = CURRENT_TIMESTAMP"))):Object.keys(n).map((e=>{let t=n[e];if("function"==typeof t)r.push(this.escape(e)+" = "+t());else if("sap"!==this.connection.driver.options.type&&"spanner"!==this.connection.driver.options.type||null!==t){const n=this.createParameter(t);r.push(this.escape(e)+" = "+n)}else r.push(this.escape(e)+" = NULL")})),r.length<=0)throw new l.y;const o=this.createWhereExpression(),a=this.createReturningExpression("update");return""===a?`UPDATE ${this.getTableName(this.getMainTableName())} SET ${r.join(", ")}${o}`:"mssql"===this.connection.driver.options.type?`UPDATE ${this.getTableName(this.getMainTableName())} SET ${r.join(", ")} OUTPUT ${a}${o}`:`UPDATE ${this.getTableName(this.getMainTableName())} SET ${r.join(", ")}${o} RETURNING ${a}`}createOrderByExpression(){const e=this.expressionMap.orderBys;return Object.keys(e).length>0?" ORDER BY "+Object.keys(e).map((t=>"string"==typeof e[t]?this.replacePropertyNames(t)+" "+e[t]:this.replacePropertyNames(t)+" "+e[t].order+" "+e[t].nulls)).join(", "):""}createLimitExpression(){let e=this.expressionMap.limit;if(e){if(p.z.isMySQLFamily(this.connection.driver)||"aurora-mysql"===this.connection.driver.options.type)return" LIMIT "+e;throw new s.T}return""}getValueSet(){if("object"==typeof this.expressionMap.valuesSet)return this.expressionMap.valuesSet;throw new l.y}}},58:(e,t,n)=>{"use strict";n.d(t,{$:()=>a});var r=n(2749),i=n(7264),o=n(5066);class a{constructor(e,t){this.expressionMap=e,i.g.assign(this,t||{})}get joinInverseSideMetadata(){return this.relation.inverseEntityMetadata}get parentAlias(){if(!r.G.isAliasProperty(this.relationName))throw new o.K("Given value must be a string representation of alias property");return this.relationName.split(".")[0]}get relationProperty(){if(!r.G.isAliasProperty(this.relationName))throw new o.K("Given value is a string representation of alias property");return this.relationName.split(".")[1]}get junctionAlias(){const[e,t]=this.relationName.split(".");return e+"_"+t+"_rc"}get relation(){if(!r.G.isAliasProperty(this.relationName))throw new o.K("Given value is a string representation of alias property");const[e,t]=this.relationName.split("."),n=this.expressionMap.findAliasByName(e).metadata.findRelationWithPropertyPath(t);if(!n)throw new o.K(`Relation with property path ${t} in entity was not found.`);return n}get metadata(){if(!r.G.isAliasProperty(this.relationName))throw new o.K("Given value is a string representation of alias property");const e=this.relationName.split(".")[0];return this.expressionMap.findAliasByName(e).metadata}get mapToPropertyPropertyName(){return this.mapToProperty.split(".")[1]}}},6869:(e,t,n)=>{"use strict";n.d(t,{b:()=>a});var r=n(2749),i=n(7264),o=n(5066);class a{constructor(e,t){this.queryExpressionMap=e,this.disableMixedMap=!1,i.g.assign(this,t||{})}get joinInverseSideMetadata(){return this.relation.inverseEntityMetadata}get parentAlias(){if(!r.G.isAliasProperty(this.relationName))throw new o.K("Given value must be a string representation of alias property");return this.relationName.substr(0,this.relationName.indexOf("."))}get relationPropertyPath(){if(!r.G.isAliasProperty(this.relationName))throw new o.K("Given value must be a string representation of alias property");return this.relationName.substr(this.relationName.indexOf(".")+1)}get relation(){if(!r.G.isAliasProperty(this.relationName))throw new o.K("Given value must be a string representation of alias property");const e=this.queryExpressionMap.findAliasByName(this.parentAlias).metadata.findRelationWithPropertyPath(this.relationPropertyPath);if(!e)throw new o.K(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);return e}get junctionAlias(){const[e,t]=this.relationName.split(".");return e+"_"+t+"_rid"}get junctionMetadata(){return this.relation.junctionEntityMetadata}get mapToPropertyParentAlias(){return this.mapToProperty.substr(0,this.mapToProperty.indexOf("."))}get mapToPropertyPropertyPath(){return this.mapToProperty.substr(this.mapToProperty.indexOf(".")+1)}}},1568:(e,t,n)=>{"use strict";n.d(t,{s:()=>r});class r{constructor(){this.generatedMaps=[]}static from(e){const t=new this;return t.raw=e.records,t.affected=e.affected,t}}},7378:(e,t,n)=>{"use strict";n.d(t,{a:()=>r});class r{static isMssqlParameter(e){return this.check(e,"MssqlParameter")}static isEntityMetadata(e){return this.check(e,"EntityMetadata")}static isColumnMetadata(e){return this.check(e,"ColumnMetadata")}static isQueryBuilder(e){return this.check(e,"QueryBuilder")||this.check(e,"SelectQueryBuilder")||this.check(e,"InsertQueryBuilder")||this.check(e,"DeleteQueryBuilder")||this.check(e,"UpdateQueryBuilder")||this.check(e,"SoftDeleteQueryBuilder")||this.check(e,"RelationQueryBuilder")}static isSelectQueryBuilder(e){return this.check(e,"SelectQueryBuilder")}static isInsertQueryBuilder(e){return this.check(e,"InsertQueryBuilder")}static isDeleteQueryBuilder(e){return this.check(e,"DeleteQueryBuilder")}static isUpdateQueryBuilder(e){return this.check(e,"UpdateQueryBuilder")}static isSoftDeleteQueryBuilder(e){return this.check(e,"SoftDeleteQueryBuilder")}static isRelationQueryBuilder(e){return this.check(e,"RelationQueryBuilder")}static isBrackets(e){return this.check(e,"Brackets")||this.check(e,"NotBrackets")}static isNotBrackets(e){return this.check(e,"NotBrackets")}static isSubject(e){return this.check(e,"Subject")}static isRdbmsSchemaBuilder(e){return this.check(e,"RdbmsSchemaBuilder")}static isMongoEntityManager(e){return this.check(e,"MongoEntityManager")}static isSqljsEntityManager(e){return this.check(e,"SqljsEntityManager")}static isEntitySchema(e){return this.check(e,"EntitySchema")}static isBaseEntityConstructor(e){return"function"==typeof e&&"function"==typeof e.hasId&&"function"==typeof e.save&&"function"==typeof e.useDataSource}static isFindOperator(e){return this.check(e,"FindOperator")||this.check(e,"EqualOperator")}static isEqualOperator(e){return this.check(e,"EqualOperator")}static isQuery(e){return this.check(e,"Query")}static isTable(e){return this.check(e,"Table")}static isTableCheck(e){return this.check(e,"TableCheck")}static isTableColumn(e){return this.check(e,"TableColumn")}static isTableExclusion(e){return this.check(e,"TableExclusion")}static isTableForeignKey(e){return this.check(e,"TableForeignKey")}static isTableIndex(e){return this.check(e,"TableIndex")}static isTableUnique(e){return this.check(e,"TableUnique")}static isView(e){return this.check(e,"View")}static isDataSource(e){return this.check(e,"DataSource")}static check(e,t){return"object"==typeof e&&null!==e&&e["@instanceof"]===Symbol.for(t)}}},7264:(e,t,n)=>{"use strict";n.d(t,{g:()=>r});class r{static isObject(e){return null!==e&&"object"==typeof e}static assign(e,...t){for(const n of t)for(const t of Object.getOwnPropertyNames(n))e[t]=n[t]}static mixedListToArray(e){return null!==e&&"object"==typeof e?Object.keys(e).map((t=>e[t])):e}}},5022:(e,t,n)=>{"use strict";n.d(t,{OV:()=>o,vp:()=>a});var r=n(9072),i=n.n(r);function o(e,t={}){const{segmentLength:n=4,separator:r="__",termLength:i=2}=t;return e.split(r).reduce(((e,t)=>{const r=t.replace(/([a-z\xE0-\xFF])([A-Z\xC0-\xDF])/g,"$1 $2").split(" "),o=r.length>1?i:n,a=r.map((e=>e.substr(0,o))).join("");return e.push(a),e}),[]).join(r)}function a(e,t={}){const n=i()("sha256");n.update(e,"utf8");const r=n.digest("hex");return t.length?r.slice(0,t.length):r}},165:()=>{},3894:()=>{},9486:()=>{},434:e=>{function t(){return e.exports=t=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.__esModule=!0,e.exports.default=e.exports,t.apply(this,arguments)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},4836:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},7071:e=>{e.exports=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i},e.exports.__esModule=!0,e.exports.default=e.exports},7462:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},3366:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}n.d(t,{Z:()=>r})}},r={};function i(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return n[e](o,o.exports,i),o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,i.d(o,a),o},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";i(8660);class e{static getInheritanceTree(e){const t=[e],n=e=>{const r=Object.getPrototypeOf(e);r&&r.name&&(t.push(r),n(r))};return n(e),t}static isInherited(e,t){return e.prototype instanceof t}static filterByTarget(e,t){return t?e.filter((e=>e.target&&-1!==t.indexOf(e.target))):e}}class t{constructor(){this.tables=[],this.trees=[],this.entityRepositories=[],this.transactionEntityManagers=[],this.transactionRepositories=[],this.namingStrategies=[],this.entitySubscribers=[],this.indices=[],this.uniques=[],this.checks=[],this.exclusions=[],this.columns=[],this.generations=[],this.relations=[],this.joinColumns=[],this.joinTables=[],this.entityListeners=[],this.relationCounts=[],this.relationIds=[],this.embeddeds=[],this.inheritances=[],this.discriminatorValues=[]}filterTables(e){return this.filterByTarget(this.tables,e)}filterColumns(e){return this.filterByTargetAndWithoutDuplicateProperties(this.columns,e)}findGenerated(e,t){return this.generations.find((n=>(Array.isArray(e)?-1!==e.indexOf(n.target):n.target===e)&&n.propertyName===t))}findTree(e){return this.trees.find((t=>Array.isArray(e)?-1!==e.indexOf(t.target):t.target===e))}filterRelations(e){return this.filterByTargetAndWithoutDuplicateRelationProperties(this.relations,e)}filterRelationIds(e){return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds,e)}filterRelationCounts(e){return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts,e)}filterIndices(e){return this.indices.filter((t=>Array.isArray(e)?-1!==e.indexOf(t.target):t.target===e))}filterUniques(e){return this.uniques.filter((t=>Array.isArray(e)?-1!==e.indexOf(t.target):t.target===e))}filterChecks(e){return this.checks.filter((t=>Array.isArray(e)?-1!==e.indexOf(t.target):t.target===e))}filterExclusions(e){return this.exclusions.filter((t=>Array.isArray(e)?-1!==e.indexOf(t.target):t.target===e))}filterListeners(e){return this.filterByTarget(this.entityListeners,e)}filterEmbeddeds(e){return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds,e)}findJoinTable(e,t){return this.joinTables.find((n=>n.target===e&&n.propertyName===t))}filterJoinColumns(e,t){return this.joinColumns.filter((n=>n.target===e&&n.propertyName===t))}filterSubscribers(e){return this.filterByTarget(this.entitySubscribers,e)}filterNamingStrategies(e){return this.filterByTarget(this.namingStrategies,e)}filterTransactionEntityManagers(e,t){return this.transactionEntityManagers.filter((n=>(Array.isArray(e)?-1!==e.indexOf(n.target):n.target===e)&&n.methodName===t))}filterTransactionRepository(e,t){return this.transactionRepositories.filter((n=>(Array.isArray(e)?-1!==e.indexOf(n.target):n.target===e)&&n.methodName===t))}filterSingleTableChildren(t){return this.tables.filter((n=>"function"==typeof n.target&&"function"==typeof t&&e.isInherited(n.target,t)&&"entity-child"===n.type))}findInheritanceType(e){return this.inheritances.find((t=>t.target===e))}findDiscriminatorValue(e){return this.discriminatorValues.find((t=>t.target===e))}filterByTarget(e,t){return e.filter((e=>Array.isArray(t)?-1!==t.indexOf(e.target):e.target===t))}filterByTargetAndWithoutDuplicateProperties(e,t){const n=[];return e.forEach((e=>{(Array.isArray(t)?-1!==t.indexOf(e.target):e.target===t)&&(n.find((t=>t.propertyName===e.propertyName))||n.push(e))})),n}filterByTargetAndWithoutDuplicateRelationProperties(e,t){const n=[];return e.forEach((e=>{if(Array.isArray(t)?-1!==t.indexOf(e.target):e.target===t){const r=n.findIndex((t=>t.propertyName===e.propertyName));if(Array.isArray(t)&&-1!==r&&t.indexOf(e.target)<t.indexOf(n[r].target)){const t=Object.create(n[r]);t.type=e.type,n[r]=t}else-1===r&&n.push(e)}})),n}filterByTargetAndWithoutDuplicateEmbeddedProperties(e,t){const n=[];return e.forEach((e=>{(Array.isArray(t)?-1!==t.indexOf(e.target):e.target===t)&&(n.find((t=>t.prefix===e.prefix&&t.propertyName===e.propertyName))||n.push(e))})),n}}class n{static getGlobalVariable(){return"undefined"!=typeof window?window:i.g}static load(e){if("browser"===this.type)throw new Error(`This option/function is not supported in the browser environment. Failed operation: require("${e}").`);return""}static pathNormalize(e){if("browser"===this.type)throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize("${e}").`);return""}static pathExtname(e){if("browser"===this.type)throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname("${e}").`);return""}static pathResolve(e){if("browser"===this.type)throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve("${e}").`);return""}static fileExist(e){if("browser"===this.type)throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync("${e}").`);return!1}static dotenv(e){if("browser"===this.type)throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: "${e}" }).`)}static getEnvVariable(e){}static readFileSync(e){if("browser"===this.type)throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync("${e}").`);return null}static appendFileSync(e,t){if("browser"===this.type)throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync("${e}").`)}static writeFile(e,t){if("browser"===this.type)throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile("${e}").`);return Promise.reject(null)}static highlightSql(e){return e}static highlightJson(e){return e}static logInfo(e,t){console.info(e+" ",t)}static logError(e,t){console.error(e+" ",t)}static logWarn(e,t){console.warn(e+" ",t)}static log(e){console.log(e)}static warn(e){return e}}var r,o;n.type="browser","undefined"!=typeof window&&(window.Buffer=i(8764).Buffer),void 0!==i.g&&(i.g.Buffer=i(8764).Buffer),i(5022),i(7862),i(9689),i(393),i(8970),i(4162),i(2882),i(6745),i(497),i(8042),i(8522),i(5066),i(5093),i(3095),i(8714),i(8360),i(3448),i(7150),i(6759),i(5578),i(1962),i(9381),i(9700),i(5128),i(7316),i(6556),(o=r||(r={})).VIEW="VIEW",o.MATERIALIZED_VIEW="MATERIALIZED_VIEW",o.GENERATED_COLUMN="GENERATED_COLUMN",i(4547),i(6908),new class{constructor(){this.instances=[]}get(e){let t=this.instances.find((t=>t.type===e));return t||(t={type:e,object:new e},this.instances.push(t)),t.object}};class a{}function s(){const e=n.getGlobalVariable();return e.typeormMetadataArgsStorage||(e.typeormMetadataArgsStorage=new t),e.typeormMetadataArgsStorage}a.AFTER_LOAD="after-load",a.BEFORE_INSERT="before-insert",a.AFTER_INSERT="after-insert",a.BEFORE_UPDATE="before-update",a.AFTER_UPDATE="after-update",a.BEFORE_REMOVE="before-remove",a.AFTER_REMOVE="after-remove",a.BEFORE_SOFT_REMOVE="before-soft-remove",a.AFTER_SOFT_REMOVE="after-soft-remove",a.BEFORE_RECOVER="before-recover",a.AFTER_RECOVER="after-recover",i(900),i(1227),i(3972),i(7497);var l=i(8974);function u(e,t){return function(n,r){let i;"string"==typeof e||"function"==typeof e?i=e:e&&(t=e,i=e.type),t||(t={});const o=Reflect&&Reflect.getMetadata?Reflect.getMetadata("design:type",n,r):void 0;if(!i&&o&&(i=o),!t.type&&i&&(t.type=i),"hstore"!==t.type||t.hstoreType||(t.hstoreType=o===Object?"object":"string"),"function"==typeof e)s().embeddeds.push({target:n.constructor,propertyName:r,isArray:o===Array||!0===t.array,prefix:void 0!==t.prefix?t.prefix:void 0,type:e});else{if(!t.type)throw new l.s(n,r);!0===t.unique&&s().uniques.push({target:n.constructor,columns:[r]}),s().columns.push({target:n.constructor,propertyName:r,mode:"regular",options:t}),t.generated&&s().generations.push({target:n.constructor,propertyName:r,strategy:"string"==typeof t.generated?t.generated:"increment"})}}}var c=i(7264);function p(e,t){const n={};let r;return e?("string"==typeof e&&(r=e),c.g.isObject(e)&&(r="increment",Object.assign(n,e))):r="increment",c.g.isObject(t)&&Object.assign(n,t),function(e,t){n.type||("increment"===r||"identity"===r?n.type=Number:"uuid"===r?n.type="uuid":"rowid"===r&&(n.type="int")),n.primary=!0,s().columns.push({target:e.constructor,propertyName:t,mode:"regular",options:n}),s().generations.push({target:e.constructor,propertyName:t,strategy:r})}}function f(e,t){const n=(c.g.isObject(e)?e:t)||{},r="string"==typeof e?e:n.name;return function(e){s().tables.push({target:e,name:r,type:"regular",orderBy:n.orderBy?n.orderBy:void 0,engine:n.engine?n.engine:void 0,database:n.database?n.database:void 0,schema:n.schema?n.schema:void 0,synchronize:n.synchronize,withoutRowid:n.withoutRowid})}}i(8147),i(9928),i(8876),i(1931),i(8394),i(1655);var d=new(function(){function e(){this.instances=[]}return e.prototype.get=function(e){var t=this.instances.find((function(t){return t.type===e}));return t||(t={type:e,object:new e},this.instances.push(t)),t.object},e}());function h(e){return d.get(e)}var y=function(){function e(e,t,n){void 0===n&&(n=!1),this.target=e,this.name=t,this.async=n}return Object.defineProperty(e.prototype,"instance",{get:function(){return h(this.target)},enumerable:!1,configurable:!0}),e}(),m=function(e){this.groups=[],this.each=!1,this.context=void 0,this.type=e.type,this.name=e.name,this.target=e.target,this.propertyName=e.propertyName,this.constraints=null==e?void 0:e.constraints,this.constraintCls=e.constraintCls,this.validationTypeOptions=e.validationTypeOptions,e.validationOptions&&(this.message=e.validationOptions.message,this.groups=e.validationOptions.groups,this.always=e.validationOptions.always,this.each=e.validationOptions.each,this.context=e.validationOptions.context)},g=function(){function e(){}return e.isValid=function(e){var t=this;return"isValid"!==e&&"getMessage"!==e&&-1!==Object.keys(this).map((function(e){return t[e]})).indexOf(e)},e.CUSTOM_VALIDATION="customValidation",e.NESTED_VALIDATION="nestedValidation",e.PROMISE_VALIDATION="promiseValidation",e.CONDITIONAL_VALIDATION="conditionalValidation",e.WHITELIST="whitelistValidation",e.IS_DEFINED="isDefined",e}(),v=function(){function e(){}return e.prototype.transform=function(e){var t=[];return Object.keys(e.properties).forEach((function(n){e.properties[n].forEach((function(r){var i={message:r.message,groups:r.groups,always:r.always,each:r.each},o={type:r.type,name:r.name,target:e.name,propertyName:n,constraints:r.constraints,validationTypeOptions:r.options,validationOptions:i};t.push(new m(o))}))})),t},e}(),b=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},w=function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))},x=function(){function e(){this.validationMetadatas=new Map,this.constraintMetadatas=new Map}return Object.defineProperty(e.prototype,"hasValidationMetaData",{get:function(){return!!this.validationMetadatas.size},enumerable:!1,configurable:!0}),e.prototype.addValidationSchema=function(e){var t=this;(new v).transform(e).forEach((function(e){return t.addValidationMetadata(e)}))},e.prototype.addValidationMetadata=function(e){var t=this.validationMetadatas.get(e.target);t?t.push(e):this.validationMetadatas.set(e.target,[e])},e.prototype.addConstraintMetadata=function(e){var t=this.constraintMetadatas.get(e.target);t?t.push(e):this.constraintMetadatas.set(e.target,[e])},e.prototype.groupByPropertyName=function(e){var t={};return e.forEach((function(e){t[e.propertyName]||(t[e.propertyName]=[]),t[e.propertyName].push(e)})),t},e.prototype.getTargetValidationMetadatas=function(e,t,n,r,i){var o,a,s=function(e){return void 0!==e.always?e.always:(!e.groups||!e.groups.length)&&n},l=function(e){return!(!r||i&&i.length||!e.groups||!e.groups.length)},u=(this.validationMetadatas.get(e)||[]).filter((function(n){return(n.target===e||n.target===t)&&(!!s(n)||!l(n)&&(!(i&&i.length>0)||n.groups&&!!n.groups.find((function(e){return-1!==i.indexOf(e)}))))})),c=[];try{for(var p=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(this.validationMetadatas.entries()),f=p.next();!f.done;f=p.next()){var d=b(f.value,2),h=d[0],y=d[1];e.prototype instanceof h&&c.push.apply(c,w([],b(y),!1))}}catch(e){o={error:e}}finally{try{f&&!f.done&&(a=p.return)&&a.call(p)}finally{if(o)throw o.error}}var m=c.filter((function(t){return"string"!=typeof t.target&&t.target!==e&&(!(t.target instanceof Function)||e.prototype instanceof t.target)&&(!!s(t)||!l(t)&&(!(i&&i.length>0)||t.groups&&!!t.groups.find((function(e){return-1!==i.indexOf(e)}))))})).filter((function(e){return!u.find((function(t){return t.propertyName===e.propertyName&&t.type===e.type}))}));return u.concat(m)},e.prototype.getTargetValidatorConstraints=function(e){return this.constraintMetadatas.get(e)||[]},e}();function E(){var e="undefined"!=typeof globalThis?globalThis:void 0!==i.g?i.g:"undefined"!=typeof window?window:"undefined"!=typeof self?self:void 0;return e.classValidatorMetadataStorage||(e.classValidatorMetadataStorage=new x),e.classValidatorMetadataStorage}function S(e,t){return function(n){var r=t&&t.each?"each value in ":"";return e(r,n)}}function M(e,t){return function(n,r){!function(e){var t;if(e.validator instanceof Function){if(t=e.validator,h(x).getTargetValidatorConstraints(e.validator).length>1)throw"More than one implementation of ValidatorConstraintInterface found for validator on: ".concat(e.target.name,":").concat(e.propertyName)}else{var n=e.validator;t=function(){function e(){}return e.prototype.validate=function(e,t){return n.validate(e,t)},e.prototype.defaultMessage=function(e){return n.defaultMessage?n.defaultMessage(e):""},e}(),E().addConstraintMetadata(new y(t,e.name,e.async))}var r={type:e.name&&g.isValid(e.name)?e.name:g.CUSTOM_VALIDATION,name:e.name,target:e.target,propertyName:e.propertyName,validationOptions:e.options,constraintCls:t,constraints:e.constraints};E().addValidationMetadata(new m(r))}({name:e.name,target:n.constructor,propertyName:r,options:t,constraints:e.constraints,validator:e.validator})}}function k(e){return M({name:"isNotEmpty",validator:{validate:function(e,t){return function(e){return""!==e&&null!=e}(e)},defaultMessage:S((function(e){return e+"$property should not be empty"}),e)}},e)}function O(e){return M({name:"isString",validator:{validate:function(e,t){return function(e){return e instanceof String||"string"==typeof e}(e)},defaultMessage:S((function(e){return e+"$property must be a string"}),e)}},e)}function C(e){return M({name:"isInt",validator:{validate:function(e,t){return"number"==typeof(n=e)&&Number.isInteger(n);var n},defaultMessage:S((function(e){return e+"$property must be an integer number"}),e)}},e)}function T(e){return M({name:"isPositive",validator:{validate:function(e,t){return function(e){return"number"==typeof e&&e>0}(e)},defaultMessage:S((function(e){return e+"$property must be a positive number"}),e)}},e)}function _(e){return function(t,n){var r={type:g.CONDITIONAL_VALIDATION,target:t.constructor,propertyName:n,constraints:[function(e,t){return null!==e[n]&&void 0!==e[n]}],validationOptions:e};E().addValidationMetadata(new m(r))}}function A(e,t){return M({name:"max",constraints:[e],validator:{validate:function(e,t){return n=e,r=null==t?void 0:t.constraints[0],"number"==typeof n&&"number"==typeof r&&n<=r;var n,r},defaultMessage:S((function(e){return e+"$property must not be greater than $constraint1"}),t)}},t)}function P(e){return M({name:"isDate",validator:{validate:function(e,t){return function(e){return e instanceof Date&&!isNaN(e.getTime())}(e)},defaultMessage:S((function(e){return e+"$property must be a Date instance"}),e)}},e)}var N=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},R=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};const I=function(){function e(){this.id=0,this.createdAt=new Date,this.updatedAt=new Date}return N([p(),C(),T(),R("design:type",Object)],e.prototype,"id"),N([u(),P(),R("design:type",Date)],e.prototype,"createdAt"),N([u(),P(),R("design:type",Date)],e.prototype,"updatedAt"),e}(),j={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let L;const B=new Uint8Array(16);function $(){if(!L&&(L="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!L))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return L(B)}const F=[];for(let e=0;e<256;++e)F.push((e+256).toString(16).slice(1));const D=function(e,t,n){if(j.randomUUID&&!t&&!e)return j.randomUUID();const r=(e=e||{}).random||(e.rng||$)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=r[e];return t}return function(e,t=0){return(F[e[t+0]]+F[e[t+1]]+F[e[t+2]]+F[e[t+3]]+"-"+F[e[t+4]]+F[e[t+5]]+"-"+F[e[t+6]]+F[e[t+7]]+"-"+F[e[t+8]]+F[e[t+9]]+"-"+F[e[t+10]]+F[e[t+11]]+F[e[t+12]]+F[e[t+13]]+F[e[t+14]]+F[e[t+15]]).toLowerCase()}(r)};var U,z,V,W=(U=function(e,t){return U=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},U(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}U(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),q=function(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a},Q=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},K=function(e){var t=new Date(e);return t.setHours(0,0,0,0),t};!function(e){e.PAGE_VIEW="PAGE_VIEW",e.RECOMMENDATIONS_SHOWN="RECOMMENDATIONS_SHOWN",e.PERSONALIZED_CLICKED="PERSONALIZED_CLICKED",e.NON_PERSONALIZED_CLICKED="NON_PERSONALIZED_CLICKED",e.MIXED_CLICKED="MIXED_CLICKED",e.WATCH_TIME="WATCH_TIME",e.SESSION_END="SESSION_END",e.PHASE_TRANSITION="PHASE_TRANSITION",e.EXTENSION_INSTALLED="EXTENSION_INSTALLED",e.EXTENSION_ACTIVATED="EXTENSION_ACTIVATED",e.HOME_SHOWN="HOME_SHOWN",e.HOME_INJECTED_TILE_CLICKED="HOME_INJECTED_TILE_CLICKED"}(z||(z={})),function(e){e.TREATMENT="treatment",e.CONTROL="control"}(V||(V={}));var Z=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.sessionUuid="",t.experimentConfigId=0,t.arm=V.TREATMENT,t.type=z.PAGE_VIEW,t.url="",t.localUuid=D(),t.phase=0,t.localZeroHour=K(t.createdAt),t}var n;return W(t,e),q([u(),k(),O(),Q("design:type",String)],t.prototype,"sessionUuid"),q([u(),C(),T(),Q("design:type",Number)],t.prototype,"experimentConfigId"),q([u(),Q("design:type",String)],t.prototype,"arm"),q([u(),Q("design:type",String)],t.prototype,"type"),q([u(),k(),O(),Q("design:type",String)],t.prototype,"url"),q([u(),O(),_(),Q("design:type",String)],t.prototype,"context"),q([u(),k(),O(),Q("design:type",String)],t.prototype,"localUuid"),q([u(),Q("design:type",String)],t.prototype,"extensionVersion"),q([u(),C(),(0,M({name:"min",constraints:[0],validator:{validate:function(e,t){return n=e,r=null==t?void 0:t.constraints[0],"number"==typeof n&&"number"==typeof r&&n>=r;var n,r},defaultMessage:S((function(e){return e+"$property must not be less than $constraint1"}),n)}},n)),A(2),Q("design:type",Number)],t.prototype,"phase"),q([u(),Q("design:type",Boolean)],t.prototype,"tabActive"),q([u(),P(),_(),Q("design:type",Date)],t.prototype,"localZeroHour"),q([f()],t)}(I);const H=Z;var G=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const J=function(e){function t(t){var n=e.call(this)||this;return n.secondsWatched=t,n.type=z.WATCH_TIME,n}return G(t,e),t}(H);i(9486),i(3894);var Y=function(){function e(){}return e.prototype.toString=function(e,t,n,r){var i=this;void 0===e&&(e=!1),void 0===t&&(t=!1),void 0===n&&(n=""),void 0===r&&(r=!1);var o=e?"[1m":"",a=e?"[22m":"",s=function(e){return" - property ".concat(o).concat(n).concat(e).concat(a," has failed the following constraints: ").concat(o).concat((r?Object.values:Object.keys)(null!==(t=i.constraints)&&void 0!==t?t:{}).join(", ")).concat(a," \n");var t};if(t){var l=Number.isInteger(+this.property)?"[".concat(this.property,"]"):"".concat(n?".":"").concat(this.property);return this.constraints?s(l):this.children?this.children.map((function(t){return t.toString(e,!0,"".concat(n).concat(l),r)})).join(""):""}return"An instance of ".concat(o).concat(this.target?this.target.constructor.name:"an object").concat(a," has failed the validation:\n")+(this.constraints?s(this.property):"")+(this.children?this.children.map((function(t){return t.toString(e,!0,i.property,r)})).join(""):"")},e}(),X=function(){function e(){}return e.replaceMessageSpecialTokens=function(e,t){var n;return e instanceof Function?n=e(t):"string"==typeof e&&(n=e),n&&Array.isArray(t.constraints)&&t.constraints.forEach((function(e,t){n=n.replace(new RegExp("\\$constraint".concat(t+1),"g"),function(e){return Array.isArray(e)?e.join(", "):("symbol"==typeof e&&(e=e.description),"".concat(e))}(e))})),n&&void 0!==t.value&&null!==t.value&&"string"==typeof t.value&&(n=n.replace(/\$value/g,t.value)),n&&(n=n.replace(/\$property/g,t.property)),n&&(n=n.replace(/\$target/g,t.targetName)),n},e}();function ee(e){return null!==e&&"object"==typeof e&&"function"==typeof e.then}var te=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},ne=function(){function e(e,t){this.validator=e,this.validatorOptions=t,this.awaitingPromises=[],this.ignoreAsyncValidations=!1,this.metadataStorage=E()}return e.prototype.execute=function(e,t,n){var r,i,o=this;this.metadataStorage.hasValidationMetaData||!0!==(null===(r=this.validatorOptions)||void 0===r?void 0:r.enableDebugMessages)||console.warn("No validation metadata found. No validation will be  performed. There are multiple possible reasons:\n  - There may be multiple class-validator versions installed. You will need to flatten your dependencies to fix the issue.\n  - This validation runs before any file with validation decorator was parsed by NodeJS.");var a=this.validatorOptions?this.validatorOptions.groups:void 0,s=this.validatorOptions&&this.validatorOptions.strictGroups||!1,l=this.validatorOptions&&this.validatorOptions.always||!1,u=void 0===(null===(i=this.validatorOptions)||void 0===i?void 0:i.forbidUnknownValues)||!1!==this.validatorOptions.forbidUnknownValues,c=this.metadataStorage.getTargetValidationMetadatas(e.constructor,t,l,s,a),p=this.metadataStorage.groupByPropertyName(c);if(this.validatorOptions&&u&&!c.length){var f=new Y;return this.validatorOptions&&this.validatorOptions.validationError&&void 0!==this.validatorOptions.validationError.target&&!0!==this.validatorOptions.validationError.target||(f.target=e),f.value=void 0,f.property=void 0,f.children=[],f.constraints={unknownValue:"an unknown value was passed to the validate function"},void n.push(f)}this.validatorOptions&&this.validatorOptions.whitelist&&this.whitelist(e,p,n),Object.keys(p).forEach((function(t){var r=e[t],i=p[t].filter((function(e){return e.type===g.IS_DEFINED})),a=p[t].filter((function(e){return e.type!==g.IS_DEFINED&&e.type!==g.WHITELIST}));r instanceof Promise&&a.find((function(e){return e.type===g.PROMISE_VALIDATION}))?o.awaitingPromises.push(r.then((function(r){o.performValidations(e,r,t,i,a,n)}))):o.performValidations(e,r,t,i,a,n)}))},e.prototype.whitelist=function(e,t,n){var r=this,i=[];Object.keys(e).forEach((function(e){t[e]&&0!==t[e].length||i.push(e)})),i.length>0&&(this.validatorOptions&&this.validatorOptions.forbidNonWhitelisted?i.forEach((function(t){var i,o=r.generateValidationError(e,e[t],t);o.constraints=((i={})[g.WHITELIST]="property ".concat(t," should not exist"),i),o.children=void 0,n.push(o)})):i.forEach((function(t){return delete e[t]})))},e.prototype.stripEmptyErrors=function(e){var t=this;return e.filter((function(e){if(e.children&&(e.children=t.stripEmptyErrors(e.children)),0===Object.keys(e.constraints).length){if(0===e.children.length)return!1;delete e.constraints}return!0}))},e.prototype.performValidations=function(e,t,n,r,i,o){var a=i.filter((function(e){return e.type===g.CUSTOM_VALIDATION})),s=i.filter((function(e){return e.type===g.NESTED_VALIDATION})),l=i.filter((function(e){return e.type===g.CONDITIONAL_VALIDATION})),u=this.generateValidationError(e,t,n);o.push(u),this.conditionalValidations(e,t,l)&&(this.customValidations(e,t,r,u),this.mapContexts(e,t,r,u),void 0===t&&this.validatorOptions&&!0===this.validatorOptions.skipUndefinedProperties||null===t&&this.validatorOptions&&!0===this.validatorOptions.skipNullProperties||null==t&&this.validatorOptions&&!0===this.validatorOptions.skipMissingProperties||(this.customValidations(e,t,a,u),this.nestedValidations(t,s,u),this.mapContexts(e,t,i,u),this.mapContexts(e,t,a,u)))},e.prototype.generateValidationError=function(e,t,n){var r=new Y;return this.validatorOptions&&this.validatorOptions.validationError&&void 0!==this.validatorOptions.validationError.target&&!0!==this.validatorOptions.validationError.target||(r.target=e),this.validatorOptions&&this.validatorOptions.validationError&&void 0!==this.validatorOptions.validationError.value&&!0!==this.validatorOptions.validationError.value||(r.value=t),r.property=n,r.children=[],r.constraints={},r},e.prototype.conditionalValidations=function(e,t,n){return n.map((function(n){return n.constraints[0](e,t)})).reduce((function(e,t){return e&&t}),!0)},e.prototype.customValidations=function(e,t,n,r){var i=this;n.forEach((function(n){i.metadataStorage.getTargetValidatorConstraints(n.constraintCls).forEach((function(o){if(!(o.async&&i.ignoreAsyncValidations||i.validatorOptions&&i.validatorOptions.stopAtFirstError&&Object.keys(r.constraints||{}).length>0)){var a={targetName:e.constructor?e.constructor.name:void 0,property:n.propertyName,object:e,value:t,constraints:n.constraints};if(n.each&&(Array.isArray(t)||t instanceof Set||t instanceof Map)){var s,l=((s=t)instanceof Map?Array.from(s.values()):Array.isArray(s)?s:Array.from(s)).map((function(e){return o.instance.validate(e,a)}));if(l.some((function(e){return ee(e)}))){var u=l.map((function(e){return ee(e)?e:Promise.resolve(e)})),c=Promise.all(u).then((function(a){if(!a.every((function(e){return e}))){var s=te(i.createValidationError(e,t,n,o),2),l=s[0],u=s[1];r.constraints[l]=u,n.context&&(r.contexts||(r.contexts={}),r.contexts[l]=Object.assign(r.contexts[l]||{},n.context))}}));i.awaitingPromises.push(c)}else if(!l.every((function(e){return e}))){var p=te(i.createValidationError(e,t,n,o),2);y=p[0],m=p[1],r.constraints[y]=m}}else{var f=o.instance.validate(t,a);if(ee(f)){var d=f.then((function(a){if(!a){var s=te(i.createValidationError(e,t,n,o),2),l=s[0],u=s[1];r.constraints[l]=u,n.context&&(r.contexts||(r.contexts={}),r.contexts[l]=Object.assign(r.contexts[l]||{},n.context))}}));i.awaitingPromises.push(d)}else if(!f){var h=te(i.createValidationError(e,t,n,o),2),y=h[0],m=h[1];r.constraints[y]=m}}}}))}))},e.prototype.nestedValidations=function(e,t,n){var r=this;void 0!==e&&t.forEach((function(i){if(!(i.type!==g.NESTED_VALIDATION&&i.type!==g.PROMISE_VALIDATION||r.validatorOptions&&r.validatorOptions.stopAtFirstError&&Object.keys(n.constraints||{}).length>0))if(Array.isArray(e)||e instanceof Set||e instanceof Map)(e instanceof Set?Array.from(e):e).forEach((function(i,o){r.performValidations(e,i,o.toString(),[],t,n.children)}));else if(e instanceof Object){var o="string"==typeof i.target?i.target:i.target.name;r.execute(e,o,n.children)}else{var a=te(r.createValidationError(i.target,e,i),2),s=a[0],l=a[1];n.constraints[s]=l}}))},e.prototype.mapContexts=function(e,t,n,r){var i=this;return n.forEach((function(e){if(e.context){var t=void 0;e.type===g.CUSTOM_VALIDATION&&(t=i.metadataStorage.getTargetValidatorConstraints(e.constraintCls)[0]);var n=i.getConstraintType(e,t);r.constraints[n]&&(r.contexts||(r.contexts={}),r.contexts[n]=Object.assign(r.contexts[n]||{},e.context))}}))},e.prototype.createValidationError=function(e,t,n,r){var i=e.constructor?e.constructor.name:void 0,o=this.getConstraintType(n,r),a={targetName:i,property:n.propertyName,object:e,value:t,constraints:n.constraints},s=n.message||"";return n.message||this.validatorOptions&&(!this.validatorOptions||this.validatorOptions.dismissDefaultMessages)||r&&r.instance.defaultMessage instanceof Function&&(s=r.instance.defaultMessage(a)),[o,X.replaceMessageSpecialTokens(s,a)]},e.prototype.getConstraintType=function(e,t){return t&&t.name?t.name:e.type},e}(),re=function(){function e(){}return e.prototype.validate=function(e,t,n){return this.coreValidate(e,t,n)},e.prototype.validateOrReject=function(e,t,n){return r=this,i=void 0,a=function(){var r;return function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(i){switch(i.label){case 0:return[4,this.coreValidate(e,t,n)];case 1:return(r=i.sent()).length?[2,Promise.reject(r)]:[2]}}))},new((o=void 0)||(o=Promise))((function(e,t){function n(e){try{l(a.next(e))}catch(e){t(e)}}function s(e){try{l(a.throw(e))}catch(e){t(e)}}function l(t){var r;t.done?e(t.value):(r=t.value,r instanceof o?r:new o((function(e){e(r)}))).then(n,s)}l((a=a.apply(r,i||[])).next())}));var r,i,o,a},e.prototype.validateSync=function(e,t,n){var r="string"==typeof e?t:e,i="string"==typeof e?e:void 0,o=new ne(this,"string"==typeof e?n:t);o.ignoreAsyncValidations=!0;var a=[];return o.execute(r,i,a),o.stripEmptyErrors(a)},e.prototype.coreValidate=function(e,t,n){var r="string"==typeof e?t:e,i="string"==typeof e?e:void 0,o=new ne(this,"string"==typeof e?n:t),a=[];return o.execute(r,i,a),Promise.all(o.awaitingPromises).then((function(){return o.stripEmptyErrors(a)}))},e}();function ie(e,t,n){return"string"==typeof e?h(re).validate(e,t,n):h(re).validate(e,t)}var oe=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},ae=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},se=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},le=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},ue=function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))},ce=function(e){return function(t){return"object"==typeof t&&null!==t&&e in t}},pe=function(e){return function(t){var n,r,i=t;try{for(var o=se(e),a=o.next();!a.done;a=o.next()){var s=a.value;if(!ce(s)(i))throw new Error("Missing property ".concat(s," in object. Full path: ").concat(e.join("."),"."));i=i[s]}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return i}},fe=function(e){var t,n,r=[];try{for(var i=se(e),o=i.next();!o.done;o=i.next()){var a=o.value;a.children&&a.children.length>0&&r.push.apply(r,ue([],le(fe(a.children)),!1)),a.constraints&&r.push.apply(r,ue([],le(Object.values(a.constraints)),!1))}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r},de=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return oe(void 0,void 0,void 0,(function(){var n,r;return ae(this,(function(i){switch(i.label){case 0:return[4,ie(t)];case 1:return n=i.sent(),r=n.filter((function(t){return!e.includes(t.property)})),[2,fe(r)]}}))}))}},he=(de("id"),de(),function(e){return function(t){return function(n,r,i){return oe(void 0,void 0,void 0,(function(){var o,a,s,l;return ae(this,(function(u){switch(u.label){case 0:o="POST"===t||"PUT"===t?JSON.stringify(r):void 0,a="GET"!==t||n.includes("?")?"":(c=r,p=Object.entries(c).map((function(e){var t=le(e,2),n=t[0],r=t[1];return"".concat(n,"=").concat(encodeURIComponent(r))})),0===p.length?"":"?".concat(p.join("&"))),u.label=1;case 1:return u.trys.push([1,4,,5]),[4,fetch("".concat(e).concat(n).concat(a),{method:t,body:o,headers:i})];case 2:return[4,u.sent().json()];case 3:return function(e){if("object"!=typeof e||null===e)return!1;var t=e.kind;return"Success"===t?void 0!==e.value:"Failure"===t&&"string"==typeof e.message}(s=u.sent())?[2,s]:[3,5];case 4:return l=u.sent(),console.error(l),[2,{kind:"Failure",message:"Invalid or no response from server"}];case 5:return[2,{kind:"Failure",message:"Invalid response from server"}]}var c,p}))}))}}}),ye=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},me=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},ge=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},ve=function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))},be=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},we=function(e){return Boolean(e&&new URL(e).pathname.startsWith("/watch"))},xe=function(e){try{return"/"===new URL(e).pathname}catch(e){return!1}},Ee=function(){return"1"===localStorage.getItem("debug")},Se=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];Ee()&&console.log.apply(console,ve([],ge(e),!1))},Me=function(e){var t=(new DOMParser).parseFromString(e,"text/html");return Array.from(t.querySelectorAll("script")).find((function(e){var t=e.textContent;return!!t&&t.trimStart().startsWith("var ytInitialData = ")}))},ke=function(e){if("object"!=typeof e||null===e)throw new Error("Invalid node");var t=pe(["videoId"])(e),n="https://i.ytimg.com/vi/".concat(t,"/hqdefault.jpg"),r=pe(["thumbnail","thumbnails"])(e);return r?r.sort((function(e,t){return t.width*t.height-e.width*e.height}))[0].url:n},Oe=function(e){var t,n,r=[];return n=function(e,t,i){var o,a,s,l;if("stop"!==function(e,t,n){if(0===t.length)return"recurse";var i=function(){try{return pe(["title","runs","0","text"])(e)}catch(t){return pe(["title","simpleText"])(e)}},o=t[t.length-1];if("videoRenderer"===o)try{var a=i(),s=pe(["videoId"])(e),l=pe(["channelThumbnailSupportedRenderers","channelThumbnailWithLinkRenderer","thumbnail","thumbnails","0","url"])(e),u=pe(["ownerText","runs","0","navigationEndpoint","browseEndpoint","canonicalBaseUrl"])(e),c=ke(e),p={videoId:s,title:a,url:"https://www.youtube.com/watch?v=".concat(s),channelName:pe(["longBylineText","runs","0","text"])(e),views:pe(["shortViewCountText","simpleText"])(e),publishedSince:pe(["publishedTimeText","simpleText"])(e),miniatureUrl:c,personalization:"personalized",channelMiniatureUrl:l,channelShortName:u,hoverAnimationUrl:function(){try{return pe(["richThumbnail","movingThumbnailRenderer","movingThumbnailDetails","thumbnails","0","url"])(e)}catch(e){return}}()};return r.push({title:a,path:t,recommendation:p,rawNode:e}),"stop"}catch(n){Se("error","parsing videoRenderer",{path:t,node:e,error:n})}if("gridVideoRenderer"===o){try{s=pe(["videoId"])(e),a=i();var f=pe(["metadata","channelMetadataRenderer","title"])(n),d=pe(["metadata","channelMetadataRenderer","vanityChannelUrl"])(n).split("/");u=d[d.length-1],p={title:a,url:"https://www.youtube.com/watch?v=".concat(s),videoId:s,miniatureUrl:ke(e),channelName:f,views:pe(["viewCountText","simpleText"])(e),publishedSince:pe(["publishedTimeText","simpleText"])(e),personalization:"personalized",hoverAnimationUrl:pe(["richThumbnail","movingThumbnailRenderer","movingThumbnailDetails","thumbnails","0","url"])(e),channelMiniatureUrl:pe(["metadata","channelMetadataRenderer","avatar","thumbnails","0","url"])(n),channelShortName:u},r.push({title:p.title,path:t,recommendation:p,rawNode:e})}catch(n){Se("error","parsing gridVideoRenderer",{path:t,node:e,error:n})}return"stop"}return"recurse"}(e,t,i)&&null!==e)if(Array.isArray(e))try{for(var u=be(e.entries()),c=u.next();!c.done;c=u.next()){var p=ge(c.value,2),f=p[0],d=p[1];n(d,ve(ve([],ge(t),!1),[f.toString()],!1),i)}}catch(e){o={error:e}}finally{try{c&&!c.done&&(a=u.return)&&a.call(u)}finally{if(o)throw o.error}}else if("object"==typeof e)try{for(var h=be(Object.entries(e)),y=h.next();!y.done;y=h.next()){var m=ge(y.value,2),g=m[0];d=m[1],n(d,ve(ve([],ge(t),!1),[g],!1),i)}}catch(e){s={error:e}}finally{try{y&&!y.done&&(l=h.return)&&l.call(h)}finally{if(s)throw s.error}}},n(t=e,[],t),r},Ce=function(){if(navigator.userAgent.includes("Chrome"))return function(e){return ye(void 0,void 0,void 0,(function(){return me(this,(function(t){switch(t.label){case 0:return[4,fetch(e,{method:"HEAD"})];case 1:return[2,t.sent().ok]}}))}))};var e=!1;return function(t){return ye(void 0,void 0,void 0,(function(){return me(this,(function(n){return e?[2,!0]:[2,new Promise((function(n,r){try{setTimeout((function(){e=!0,document.body.removeChild(i),r(new Error("Timeout"))}),5e3);var i=new Image;i.onload=function(){document.body.removeChild(i),n(!0)},i.onerror=function(){document.body.removeChild(i),n(!1)},i.style.width="1px",i.style.height="1px",i.src=t,document.body.appendChild(i)}catch(e){r(e)}}))]}))}))}}(),Te="ytdpnl-extension-",_e=function(e){var t=localStorage.getItem(Te+e);if(t)return t;var n=localStorage.getItem(e);return n?(localStorage.setItem(Te+e,n),localStorage.removeItem(e),n):null},Ae=function(e,t){localStorage.removeItem(e),localStorage.setItem(Te+e,t)},Pe=function(e){localStorage.removeItem(e),localStorage.removeItem(Te+e)},Ne=function(e){sessionStorage.removeItem(e),sessionStorage.removeItem(Te+e)},Re=function(){var e=document.getElementById("ytdpnl-loader-mask");return!!e&&(e.remove(),!0)},Ie=function(e){return function(t){var n=Ie(e);return t.id===e?t:t.parentElement?n(t.parentElement):void 0}},je=function(){return je=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},je.apply(this,arguments)},Le=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},Be=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},$e=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},Fe=function(){var e=_e("config");try{if(e)return JSON.parse(e)}catch(t){return void Se("Error parsing config from local storage:",{err:t,item:e})}};var De=i(7294),Ue=i(745),ze=i(7462),Ve=i(3366);function We(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e)){var i=e.length;for(t=0;t<i;t++)e[t]&&(n=We(e[t]))&&(r&&(r+=" "),r+=n)}else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}const qe=function(){for(var e,t,n=0,r="",i=arguments.length;n<i;n++)(e=arguments[n])&&(t=We(e))&&(r&&(r+=" "),r+=t);return r};var Qe=i(6104),Ke=i(6523),Ze=i(9707),He=i(7408),Ge=i(6498);const Je=function(e=null){const t=De.useContext(Ge.T);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n},Ye=(0,He.Z)(),Xe=function(e=Ye){return Je(e)};var et=i(5893);const tt=["className","component"],nt=e=>e,rt=(()=>{let e=nt;return{configure(t){e=t},generate:t=>e(t),reset(){e=nt}}})();var it=i(8758),ot=i(8027),at=i(8010),st=i(2101);const lt={black:"#000",white:"#fff"},ut={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},ct="#f3e5f5",pt="#ce93d8",ft="#ba68c8",dt="#ab47bc",ht="#9c27b0",yt="#7b1fa2",mt="#e57373",gt="#ef5350",vt="#f44336",bt="#d32f2f",wt="#c62828",xt="#ffb74d",Et="#ffa726",St="#ff9800",Mt="#f57c00",kt="#e65100",Ot="#e3f2fd",Ct="#90caf9",Tt="#42a5f5",_t="#1976d2",At="#1565c0",Pt="#4fc3f7",Nt="#29b6f6",Rt="#03a9f4",It="#0288d1",jt="#01579b",Lt="#81c784",Bt="#66bb6a",$t="#4caf50",Ft="#388e3c",Dt="#2e7d32",Ut="#1b5e20",zt=["mode","contrastThreshold","tonalOffset"],Vt={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:lt.white,default:lt.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Wt={text:{primary:lt.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:lt.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function qt(e,t,n,r){const i=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,st.$n)(e.main,i):"dark"===t&&(e.dark=(0,st._j)(e.main,o)))}const Qt=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],Kt={textTransform:"uppercase"},Zt='"Roboto", "Helvetica", "Arial", sans-serif';function Ht(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=Zt,fontSize:i=14,fontWeightLight:o=300,fontWeightRegular:a=400,fontWeightMedium:s=500,fontWeightBold:l=700,htmlFontSize:u=16,allVariants:c,pxToRem:p}=n,f=(0,Ve.Z)(n,Qt),d=i/14,h=p||(e=>e/u*d+"rem"),y=(e,t,n,i,o)=>{return(0,ze.Z)({fontFamily:r,fontWeight:e,fontSize:h(t),lineHeight:n},r===Zt?{letterSpacing:(a=i/t,Math.round(1e5*a)/1e5+"em")}:{},o,c);var a},m={h1:y(o,96,1.167,-1.5),h2:y(o,60,1.2,-.5),h3:y(a,48,1.167,0),h4:y(a,34,1.235,.25),h5:y(a,24,1.334,0),h6:y(s,20,1.6,.15),subtitle1:y(a,16,1.75,.15),subtitle2:y(s,14,1.57,.1),body1:y(a,16,1.5,.15),body2:y(a,14,1.43,.15),button:y(s,14,1.75,.4,Kt),caption:y(a,12,1.66,.4),overline:y(a,12,2.66,1,Kt),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return(0,ot.Z)((0,ze.Z)({htmlFontSize:u,pxToRem:h,fontFamily:r,fontSize:i,fontWeightLight:o,fontWeightRegular:a,fontWeightMedium:s,fontWeightBold:l},m),f,{clone:!1})}function Gt(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const Jt=["none",Gt(0,2,1,-1,0,1,1,0,0,1,3,0),Gt(0,3,1,-2,0,2,2,0,0,1,5,0),Gt(0,3,3,-2,0,3,4,0,0,1,8,0),Gt(0,2,4,-1,0,4,5,0,0,1,10,0),Gt(0,3,5,-1,0,5,8,0,0,1,14,0),Gt(0,3,5,-1,0,6,10,0,0,1,18,0),Gt(0,4,5,-2,0,7,10,1,0,2,16,1),Gt(0,5,5,-3,0,8,10,1,0,3,14,2),Gt(0,5,6,-3,0,9,12,1,0,3,16,2),Gt(0,6,6,-3,0,10,14,1,0,4,18,3),Gt(0,6,7,-4,0,11,15,1,0,4,20,3),Gt(0,7,8,-4,0,12,17,2,0,5,22,4),Gt(0,7,8,-4,0,13,19,2,0,5,24,4),Gt(0,7,9,-4,0,14,21,2,0,5,26,4),Gt(0,8,9,-5,0,15,22,2,0,6,28,5),Gt(0,8,10,-5,0,16,24,2,0,6,30,5),Gt(0,8,11,-5,0,17,26,2,0,6,32,5),Gt(0,9,11,-5,0,18,28,2,0,7,34,6),Gt(0,9,12,-6,0,19,29,2,0,7,36,6),Gt(0,10,13,-6,0,20,31,3,0,8,38,7),Gt(0,10,13,-6,0,21,33,3,0,8,40,7),Gt(0,10,14,-6,0,22,35,3,0,8,42,7),Gt(0,11,14,-7,0,23,36,3,0,9,44,8),Gt(0,11,15,-7,0,24,38,3,0,9,46,8)],Yt=["duration","easing","delay"],Xt={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},en={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function tn(e){return`${Math.round(e)}ms`}function nn(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function rn(e){const t=(0,ze.Z)({},Xt,e.easing),n=(0,ze.Z)({},en,e.duration);return(0,ze.Z)({getAutoHeightDuration:nn,create:(e=["all"],r={})=>{const{duration:i=n.standard,easing:o=t.easeInOut,delay:a=0}=r;return(0,Ve.Z)(r,Yt),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof i?i:tn(i)} ${o} ${"string"==typeof a?a:tn(a)}`)).join(",")}},e,{easing:t,duration:n})}const on={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},an=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const sn=function(e={},...t){const{mixins:n={},palette:r={},transitions:i={},typography:o={}}=e,a=(0,Ve.Z)(e,an);if(e.vars)throw new Error((0,it.Z)(18));const s=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,i=(0,Ve.Z)(e,zt),o=e.primary||function(e="light"){return"dark"===e?{main:Ct,light:Ot,dark:Tt}:{main:_t,light:Tt,dark:At}}(t),a=e.secondary||function(e="light"){return"dark"===e?{main:pt,light:ct,dark:dt}:{main:ht,light:ft,dark:yt}}(t),s=e.error||function(e="light"){return"dark"===e?{main:vt,light:mt,dark:bt}:{main:bt,light:gt,dark:wt}}(t),l=e.info||function(e="light"){return"dark"===e?{main:Nt,light:Pt,dark:It}:{main:It,light:Rt,dark:jt}}(t),u=e.success||function(e="light"){return"dark"===e?{main:Bt,light:Lt,dark:Ft}:{main:Dt,light:$t,dark:Ut}}(t),c=e.warning||function(e="light"){return"dark"===e?{main:Et,light:xt,dark:Mt}:{main:"#ed6c02",light:St,dark:kt}}(t);function p(e){return(0,st.mi)(e,Wt.text.primary)>=n?Wt.text.primary:Vt.text.primary}const f=({color:e,name:t,mainShade:n=500,lightShade:i=300,darkShade:o=700})=>{if(!(e=(0,ze.Z)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,it.Z)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,it.Z)(12,t?` (${t})`:"",JSON.stringify(e.main)));return qt(e,"light",i,r),qt(e,"dark",o,r),e.contrastText||(e.contrastText=p(e.main)),e},d={dark:Wt,light:Vt};return(0,ot.Z)((0,ze.Z)({common:(0,ze.Z)({},lt),mode:t,primary:f({color:o,name:"primary"}),secondary:f({color:a,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:f({color:s,name:"error"}),warning:f({color:c,name:"warning"}),info:f({color:l,name:"info"}),success:f({color:u,name:"success"}),grey:ut,contrastThreshold:n,getContrastText:p,augmentColor:f,tonalOffset:r},d[t]),i)}(r),l=(0,He.Z)(e);let u=(0,ot.Z)(l,{mixins:(c=l.breakpoints,p=n,(0,ze.Z)({toolbar:{minHeight:56,[c.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[c.up("sm")]:{minHeight:64}}},p)),palette:s,shadows:Jt.slice(),typography:Ht(s,o),transitions:rn(i),zIndex:(0,ze.Z)({},on)});var c,p;return u=(0,ot.Z)(u,a),u=t.reduce(((e,t)=>(0,ot.Z)(e,t)),u),u.unstable_sxConfig=(0,ze.Z)({},at.Z,null==a?void 0:a.unstable_sxConfig),u.unstable_sx=function(e){return(0,Ke.Z)({sx:e,theme:this})},u},ln="$$material",un={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function cn(e,t,n="Mui"){const r=un[t];return r?`${n}-${r}`:`${rt.generate(e)}-${t}`}function pn(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=cn(e,t,n)})),r}const fn=pn("MuiBox",["root"]),dn=sn(),hn=function(e={}){const{themeId:t,defaultTheme:n,defaultClassName:r="MuiBox-root",generateClassName:i}=e,o=(0,Qe.default)("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(Ke.Z),a=De.forwardRef((function(e,a){const s=Xe(n),l=(0,Ze.Z)(e),{className:u,component:c="div"}=l,p=(0,Ve.Z)(l,tt);return(0,et.jsx)(o,(0,ze.Z)({as:c,ref:a,className:qe(u,i?i(r):r),theme:t&&s[t]||s},p))}));return a}({themeId:ln,defaultTheme:dn,defaultClassName:fn.root,generateClassName:rt.generate}),yn=hn;function mn(e,t,n){const r={};return Object.keys(e).forEach((i=>{r[i]=e[i].reduce(((e,r)=>{if(r){const i=t(r);""!==i&&e.push(i),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}var gn=i(8128);const vn=sn(),bn=(0,gn.ZP)({themeId:ln,defaultTheme:vn,rootShouldForwardProp:e=>(0,gn.x9)(e)&&"classes"!==e});function wn(e,t){const n=(0,ze.Z)({},t);return Object.keys(e).forEach((r=>{if(r.toString().match(/^(components|slots)$/))n[r]=(0,ze.Z)({},e[r],n[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const i=e[r]||{},o=t[r];n[r]={},o&&Object.keys(o)?i&&Object.keys(i)?(n[r]=(0,ze.Z)({},o),Object.keys(i).forEach((e=>{n[r][e]=wn(i[e],o[e])}))):n[r]=o:n[r]=i}else void 0===n[r]&&(n[r]=e[r])})),n}function xn(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?wn(t.components[n].defaultProps,r):r}function En({props:e,name:t}){return function({props:e,name:t,defaultTheme:n,themeId:r}){let i=Xe(n);return r&&(i=i[r]||i),xn({theme:i,name:t,props:e})}({props:e,name:t,defaultTheme:vn,themeId:ln})}const Sn=function(...e){return De.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{!function(e,t){"function"==typeof e?e(t):e&&(e.current=t)}(e,t)}))}),e)},Mn="undefined"!=typeof window?De.useLayoutEffect:De.useEffect,kn=function(e){const t=De.useRef(e);return Mn((()=>{t.current=e})),De.useRef(((...e)=>(0,t.current)(...e))).current},On={},Cn=[];class Tn{constructor(){this.currentId=0,this.clear=()=>{0!==this.currentId&&(clearTimeout(this.currentId),this.currentId=0)},this.disposeEffect=()=>this.clear}static create(){return new Tn}start(e,t){this.clear(),this.currentId=setTimeout((()=>{this.currentId=0,t()}),e)}}let _n=!0,An=!1;const Pn=new Tn,Nn={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Rn(e){e.metaKey||e.altKey||e.ctrlKey||(_n=!0)}function In(){_n=!1}function jn(){"hidden"===this.visibilityState&&An&&(_n=!0)}const Ln=function(){const e=De.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",Rn,!0),t.addEventListener("mousedown",In,!0),t.addEventListener("pointerdown",In,!0),t.addEventListener("touchstart",In,!0),t.addEventListener("visibilitychange",jn,!0))}),[]),t=De.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return _n||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!Nn[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(An=!0,Pn.start(100,(()=>{An=!1})),t.current=!1,!0)},ref:e}};function Bn(){return Bn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Bn.apply(this,arguments)}function $n(e,t){return $n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},$n(e,t)}const Fn=De.createContext(null);function Dn(e,t){var n=Object.create(null);return e&&De.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&(0,De.isValidElement)(e)?t(e):e}(e)})),n}function Un(e,t,n){return null!=n[t]?n[t]:e.props[t]}function zn(e,t,n){var r=Dn(e.children),i=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,i=Object.create(null),o=[];for(var a in e)a in t?o.length&&(i[a]=o,o=[]):o.push(a);var s={};for(var l in t){if(i[l])for(r=0;r<i[l].length;r++){var u=i[l][r];s[i[l][r]]=n(u)}s[l]=n(l)}for(r=0;r<o.length;r++)s[o[r]]=n(o[r]);return s}(t,r);return Object.keys(i).forEach((function(o){var a=i[o];if((0,De.isValidElement)(a)){var s=o in t,l=o in r,u=t[o],c=(0,De.isValidElement)(u)&&!u.props.in;!l||s&&!c?l||!s||c?l&&s&&(0,De.isValidElement)(u)&&(i[o]=(0,De.cloneElement)(a,{onExited:n.bind(null,a),in:u.props.in,exit:Un(a,"exit",e),enter:Un(a,"enter",e)})):i[o]=(0,De.cloneElement)(a,{in:!1}):i[o]=(0,De.cloneElement)(a,{onExited:n.bind(null,a),in:!0,exit:Un(a,"exit",e),enter:Un(a,"enter",e)})}})),i}var Vn=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Wn=function(e){var t,n;function r(t,n){var r,i=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:i,firstRender:!0},r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,$n(t,n);var i=r.prototype;return i.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},i.componentWillUnmount=function(){this.mounted=!1},r.getDerivedStateFromProps=function(e,t){var n,r,i=t.children,o=t.handleExited;return{children:t.firstRender?(n=e,r=o,Dn(n.children,(function(e){return(0,De.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:Un(e,"appear",n),enter:Un(e,"enter",n),exit:Un(e,"exit",n)})}))):zn(e,i,o),firstRender:!1}},i.handleExited=function(e,t){var n=Dn(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=Bn({},t.children);return delete n[e.key],{children:n}})))},i.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["component","childFactory"]),i=this.state.contextValue,o=Vn(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?De.createElement(Fn.Provider,{value:i},o):De.createElement(Fn.Provider,{value:i},De.createElement(t,r,o))},r}(De.Component);Wn.propTypes={},Wn.defaultProps={component:"div",childFactory:function(e){return e}};const qn=Wn;var Qn=i(917);const Kn=pn("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Zn=["center","classes","className"];let Hn,Gn,Jn,Yn,Xn=e=>e;const er=(0,Qn.F4)(Hn||(Hn=Xn`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),tr=(0,Qn.F4)(Gn||(Gn=Xn`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),nr=(0,Qn.F4)(Jn||(Jn=Xn`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),rr=bn("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),ir=bn((function(e){const{className:t,classes:n,pulsate:r=!1,rippleX:i,rippleY:o,rippleSize:a,in:s,onExited:l,timeout:u}=e,[c,p]=De.useState(!1),f=qe(t,n.ripple,n.rippleVisible,r&&n.ripplePulsate),d={width:a,height:a,top:-a/2+o,left:-a/2+i},h=qe(n.child,c&&n.childLeaving,r&&n.childPulsate);return s||c||p(!0),De.useEffect((()=>{if(!s&&null!=l){const e=setTimeout(l,u);return()=>{clearTimeout(e)}}}),[l,s,u]),(0,et.jsx)("span",{className:f,style:d,children:(0,et.jsx)("span",{className:h})})}),{name:"MuiTouchRipple",slot:"Ripple"})(Yn||(Yn=Xn`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Kn.rippleVisible,er,550,(({theme:e})=>e.transitions.easing.easeInOut),Kn.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),Kn.child,Kn.childLeaving,tr,550,(({theme:e})=>e.transitions.easing.easeInOut),Kn.childPulsate,nr,(({theme:e})=>e.transitions.easing.easeInOut)),or=De.forwardRef((function(e,t){const n=En({props:e,name:"MuiTouchRipple"}),{center:r=!1,classes:i={},className:o}=n,a=(0,Ve.Z)(n,Zn),[s,l]=De.useState([]),u=De.useRef(0),c=De.useRef(null);De.useEffect((()=>{c.current&&(c.current(),c.current=null)}),[s]);const p=De.useRef(!1),f=function(){const e=function(e,t){const n=De.useRef(On);return n.current===On&&(n.current=e(void 0)),n}(Tn.create).current;var t;return t=e.disposeEffect,De.useEffect(t,Cn),e}(),d=De.useRef(null),h=De.useRef(null),y=De.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:a}=e;l((e=>[...e,(0,et.jsx)(ir,{classes:{ripple:qe(i.ripple,Kn.ripple),rippleVisible:qe(i.rippleVisible,Kn.rippleVisible),ripplePulsate:qe(i.ripplePulsate,Kn.ripplePulsate),child:qe(i.child,Kn.child),childLeaving:qe(i.childLeaving,Kn.childLeaving),childPulsate:qe(i.childPulsate,Kn.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},u.current)])),u.current+=1,c.current=a}),[i]),m=De.useCallback(((e={},t={},n=(()=>{}))=>{const{pulsate:i=!1,center:o=r||t.pulsate,fakeElement:a=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&p.current)return void(p.current=!1);"touchstart"===(null==e?void 0:e.type)&&(p.current=!0);const s=a?null:h.current,l=s?s.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,c,m;if(o||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(l.width/2),c=Math.round(l.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;u=Math.round(t-l.left),c=Math.round(n-l.top)}if(o)m=Math.sqrt((2*l.width**2+l.height**2)/3),m%2==0&&(m+=1);else{const e=2*Math.max(Math.abs((s?s.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((s?s.clientHeight:0)-c),c)+2;m=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===d.current&&(d.current=()=>{y({pulsate:i,rippleX:u,rippleY:c,rippleSize:m,cb:n})},f.start(80,(()=>{d.current&&(d.current(),d.current=null)}))):y({pulsate:i,rippleX:u,rippleY:c,rippleSize:m,cb:n})}),[r,y,f]),g=De.useCallback((()=>{m({},{pulsate:!0})}),[m]),v=De.useCallback(((e,t)=>{if(f.clear(),"touchend"===(null==e?void 0:e.type)&&d.current)return d.current(),d.current=null,void f.start(0,(()=>{v(e,t)}));d.current=null,l((e=>e.length>0?e.slice(1):e)),c.current=t}),[f]);return De.useImperativeHandle(t,(()=>({pulsate:g,start:m,stop:v})),[g,m,v]),(0,et.jsx)(rr,(0,ze.Z)({className:qe(Kn.root,i.root,o),ref:h},a,{children:(0,et.jsx)(qn,{component:null,exit:!0,children:s})}))}));function ar(e){return cn("MuiButtonBase",e)}const sr=pn("MuiButtonBase",["root","disabled","focusVisible"]),lr=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],ur=bn("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${sr.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),cr=De.forwardRef((function(e,t){const n=En({props:e,name:"MuiButtonBase"}),{action:r,centerRipple:i=!1,children:o,className:a,component:s="button",disabled:l=!1,disableRipple:u=!1,disableTouchRipple:c=!1,focusRipple:p=!1,LinkComponent:f="a",onBlur:d,onClick:h,onContextMenu:y,onDragLeave:m,onFocus:g,onFocusVisible:v,onKeyDown:b,onKeyUp:w,onMouseDown:x,onMouseLeave:E,onMouseUp:S,onTouchEnd:M,onTouchMove:k,onTouchStart:O,tabIndex:C=0,TouchRippleProps:T,touchRippleRef:_,type:A}=n,P=(0,Ve.Z)(n,lr),N=De.useRef(null),R=De.useRef(null),I=Sn(R,_),{isFocusVisibleRef:j,onFocus:L,onBlur:B,ref:$}=Ln(),[F,D]=De.useState(!1);l&&F&&D(!1),De.useImperativeHandle(r,(()=>({focusVisible:()=>{D(!0),N.current.focus()}})),[]);const[U,z]=De.useState(!1);De.useEffect((()=>{z(!0)}),[]);const V=U&&!u&&!l;function W(e,t,n=c){return kn((r=>(t&&t(r),!n&&R.current&&R.current[e](r),!0)))}De.useEffect((()=>{F&&p&&!u&&U&&R.current.pulsate()}),[u,p,F,U]);const q=W("start",x),Q=W("stop",y),K=W("stop",m),Z=W("stop",S),H=W("stop",(e=>{F&&e.preventDefault(),E&&E(e)})),G=W("start",O),J=W("stop",M),Y=W("stop",k),X=W("stop",(e=>{B(e),!1===j.current&&D(!1),d&&d(e)}),!1),ee=kn((e=>{N.current||(N.current=e.currentTarget),L(e),!0===j.current&&(D(!0),v&&v(e)),g&&g(e)})),te=()=>{const e=N.current;return s&&"button"!==s&&!("A"===e.tagName&&e.href)},ne=De.useRef(!1),re=kn((e=>{p&&!ne.current&&F&&R.current&&" "===e.key&&(ne.current=!0,R.current.stop(e,(()=>{R.current.start(e)}))),e.target===e.currentTarget&&te()&&" "===e.key&&e.preventDefault(),b&&b(e),e.target===e.currentTarget&&te()&&"Enter"===e.key&&!l&&(e.preventDefault(),h&&h(e))})),ie=kn((e=>{p&&" "===e.key&&R.current&&F&&!e.defaultPrevented&&(ne.current=!1,R.current.stop(e,(()=>{R.current.pulsate(e)}))),w&&w(e),h&&e.target===e.currentTarget&&te()&&" "===e.key&&!e.defaultPrevented&&h(e)}));let oe=s;"button"===oe&&(P.href||P.to)&&(oe=f);const ae={};"button"===oe?(ae.type=void 0===A?"button":A,ae.disabled=l):(P.href||P.to||(ae.role="button"),l&&(ae["aria-disabled"]=l));const se=Sn(t,$,N),le=(0,ze.Z)({},n,{centerRipple:i,component:s,disabled:l,disableRipple:u,disableTouchRipple:c,focusRipple:p,tabIndex:C,focusVisible:F}),ue=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:i}=e,o=mn({root:["root",t&&"disabled",n&&"focusVisible"]},ar,i);return n&&r&&(o.root+=` ${r}`),o})(le);return(0,et.jsxs)(ur,(0,ze.Z)({as:oe,className:qe(ue.root,a),ownerState:le,onBlur:X,onClick:h,onContextMenu:Q,onFocus:ee,onKeyDown:re,onKeyUp:ie,onMouseDown:q,onMouseLeave:H,onMouseUp:Z,onDragLeave:K,onTouchEnd:J,onTouchMove:Y,onTouchStart:G,ref:se,tabIndex:l?-1:C,type:A},ae,P,{children:[o,V?(0,et.jsx)(or,(0,ze.Z)({ref:I,center:i},T)):null]}))})),pr=cr,fr=i(2908).Z;function dr(e){return cn("MuiIconButton",e)}const hr=pn("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),yr=["edge","children","className","color","disabled","disableFocusRipple","size"],mr=bn(pr,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t[`color${fr(n.color)}`],n.edge&&t[`edge${fr(n.edge)}`],t[`size${fr(n.size)}`]]}})((({theme:e,ownerState:t})=>(0,ze.Z)({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,st.Fq)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})),(({theme:e,ownerState:t})=>{var n;const r=null==(n=(e.vars||e).palette)?void 0:n[t.color];return(0,ze.Z)({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&(0,ze.Z)({color:null==r?void 0:r.main},!t.disableRipple&&{"&:hover":(0,ze.Z)({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,st.Fq)(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${hr.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})})),gr=De.forwardRef((function(e,t){const n=En({props:e,name:"MuiIconButton"}),{edge:r=!1,children:i,className:o,color:a="default",disabled:s=!1,disableFocusRipple:l=!1,size:u="medium"}=n,c=(0,Ve.Z)(n,yr),p=(0,ze.Z)({},n,{edge:r,color:a,disabled:s,disableFocusRipple:l,size:u}),f=(e=>{const{classes:t,disabled:n,color:r,edge:i,size:o}=e;return mn({root:["root",n&&"disabled","default"!==r&&`color${fr(r)}`,i&&`edge${fr(i)}`,`size${fr(o)}`]},dr,t)})(p);return(0,et.jsx)(mr,(0,ze.Z)({className:qe(f.root,o),centerRipple:!0,focusRipple:!l,disabled:s,ref:t},c,{ownerState:p,children:i}))}));function vr(e){return cn("MuiTypography",e)}pn("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const br=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],wr=bn("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],"inherit"!==n.align&&t[`align${fr(n.align)}`],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})((({theme:e,ownerState:t})=>(0,ze.Z)({margin:0},"inherit"===t.variant&&{font:"inherit"},"inherit"!==t.variant&&e.typography[t.variant],"inherit"!==t.align&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16}))),xr={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},Er={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},Sr=De.forwardRef((function(e,t){const n=En({props:e,name:"MuiTypography"}),r=(e=>Er[e]||e)(n.color),i=(0,Ze.Z)((0,ze.Z)({},n,{color:r})),{align:o="inherit",className:a,component:s,gutterBottom:l=!1,noWrap:u=!1,paragraph:c=!1,variant:p="body1",variantMapping:f=xr}=i,d=(0,Ve.Z)(i,br),h=(0,ze.Z)({},i,{align:o,color:r,className:a,component:s,gutterBottom:l,noWrap:u,paragraph:c,variant:p,variantMapping:f}),y=s||(c?"p":f[p]||xr[p])||"span",m=(e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:i,variant:o,classes:a}=e;return mn({root:["root",o,"inherit"!==e.align&&`align${fr(t)}`,n&&"gutterBottom",r&&"noWrap",i&&"paragraph"]},vr,a)})(h);return(0,et.jsx)(wr,(0,ze.Z)({as:y,ref:t,ownerState:h,className:qe(m.root,a)},d))}));function Mr(e){return cn("MuiSvgIcon",e)}pn("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const kr=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],Or=bn("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${fr(n.color)}`],t[`fontSize${fr(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,i,o,a,s,l,u,c,p,f,d,h;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(i=e.transitions)||null==(i=i.duration)?void 0:i.shorter}),fontSize:{inherit:"inherit",small:(null==(o=e.typography)||null==(a=o.pxToRem)?void 0:a.call(o,20))||"1.25rem",medium:(null==(s=e.typography)||null==(l=s.pxToRem)?void 0:l.call(s,24))||"1.5rem",large:(null==(u=e.typography)||null==(c=u.pxToRem)?void 0:c.call(u,35))||"2.1875rem"}[t.fontSize],color:null!=(p=null==(f=(e.vars||e).palette)||null==(f=f[t.color])?void 0:f.main)?p:{action:null==(d=(e.vars||e).palette)||null==(d=d.action)?void 0:d.active,disabled:null==(h=(e.vars||e).palette)||null==(h=h.action)?void 0:h.disabled,inherit:void 0}[t.color]}})),Cr=De.forwardRef((function(e,t){const n=En({props:e,name:"MuiSvgIcon"}),{children:r,className:i,color:o="inherit",component:a="svg",fontSize:s="medium",htmlColor:l,inheritViewBox:u=!1,titleAccess:c,viewBox:p="0 0 24 24"}=n,f=(0,Ve.Z)(n,kr),d=De.isValidElement(r)&&"svg"===r.type,h=(0,ze.Z)({},n,{color:o,component:a,fontSize:s,instanceFontSize:e.fontSize,inheritViewBox:u,viewBox:p,hasSvgAsChild:d}),y={};u||(y.viewBox=p);const m=(e=>{const{color:t,fontSize:n,classes:r}=e;return mn({root:["root","inherit"!==t&&`color${fr(t)}`,`fontSize${fr(n)}`]},Mr,r)})(h);return(0,et.jsxs)(Or,(0,ze.Z)({as:a,className:qe(m.root,i),focusable:"false",color:l,"aria-hidden":!c||void 0,role:c?"img":void 0,ref:t},y,f,d&&r.props,{ownerState:h,children:[d?r.props.children:r,c?(0,et.jsx)("title",{children:c}):null]}))}));Cr.muiName="SvgIcon";const Tr=Cr,_r=function(e,t){function n(t,n){return(0,et.jsx)(Tr,(0,ze.Z)({"data-testid":"CloseIcon",ref:n},t,{children:e}))}return n.muiName=Tr.muiName,De.memo(De.forwardRef(n))}((0,et.jsx)("path",{d:"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}));var Ar=Boolean(document.querySelector("html[dark]")),Pr=function(){return Ar?"rgb(15, 15, 15)":"rgb(241, 241, 241)"},Nr=sn({palette:{mode:Ar?"dark":"light",background:{default:Ar?"rgb(15, 15, 15)":"rgb(241, 241, 241)"},error:{main:"#e57373"}}});Nr.typography.h1={fontSize:"14px",color:Ar?"rgb(241, 241, 241)":"rgb(15, 15, 15)",fontWeight:500,fontFamily:"Roboto, Arial, sans-serif",textOverflow:"ellipsis",lineHeight:"20px"},Nr.typography.body1={fontSize:"12px",color:Ar?"rgb(170, 170, 170)":"rgb(96, 96, 96)",fontWeight:400,fontFamily:"Roboto, Arial, sans-serif",textOverflow:"ellipsis",lineHeight:"18px"},Nr.typography.body2={fontSize:"14px",color:Ar?"rgb(170, 170, 170)":"rgb(96, 96, 96)",fontWeight:400,fontFamily:"Roboto, Arial, sans-serif",textOverflow:"ellipsis",lineHeight:"18px"},Nr.typography.h3={fontFamily:"Roboto, Arial, sans-serif",fontSize:16,fontWeight:500,lineHeight:"2.2rem",textOverflow:"ellipsis",textWrap:"wrap",whiteSpaceCollapse:"collapse"};const Rr=Nr,Ir=De.createContext(null);function jr(){return De.useContext(Ir)}const Lr="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__",Br=function(e){const{children:t,theme:n}=e,r=jr(),i=De.useMemo((()=>{const e=null===r?n:function(e,t){return"function"==typeof t?t(e):(0,ze.Z)({},e,t)}(r,n);return null!=e&&(e[Lr]=null!==r),e}),[n,r]);return(0,et.jsx)(Ir.Provider,{value:i,children:t})},$r={};function Fr(e,t,n,r=!1){return De.useMemo((()=>{const i=e&&t[e]||t;if("function"==typeof n){const o=n(i),a=e?(0,ze.Z)({},t,{[e]:o}):o;return r?()=>a:a}return e?(0,ze.Z)({},t,{[e]:n}):(0,ze.Z)({},t,n)}),[e,t,n,r])}const Dr=function(e){const{children:t,theme:n,themeId:r}=e,i=Je($r),o=jr()||$r,a=Fr(r,i,n),s=Fr(r,o,n,!0);return(0,et.jsx)(Br,{theme:s,children:(0,et.jsx)(Ge.T.Provider,{value:a,children:t})})},Ur=["theme"];function zr(e){let{theme:t}=e,n=(0,Ve.Z)(e,Ur);const r=t[ln];return(0,et.jsx)(Dr,(0,ze.Z)({},n,{themeId:r?ln:void 0,theme:r||t}))}var Vr=function(e){var t=e.children,n=e.api,r=De.createContext(n).Provider;return De.createElement(De.StrictMode,null,De.createElement(zr,{theme:Rr},De.createElement(r,{value:n},t)))},Wr=function(){return Wr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},Wr.apply(this,arguments)};const qr=function(e){var t=e.message,n=e.type,r=e.sx;if(!t)return null;var i="error"===n?"error.main":"success"===n?"success.main":"primary.main";return De.createElement(yn,null,De.createElement(yn,{sx:Wr({mt:2,mb:2,p:2,borderColor:i,display:"inline-block",borderRadius:4},r),border:1},De.createElement(Sr,{color:i},t)))};var Qr=i(6961);var Kr,Zr=function(){return Zr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},Zr.apply(this,arguments)},Hr=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},Gr=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},Jr=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},Yr="events",Xr=function(){var e=_e(Yr);if(!e)return[];var t="true"===_e("lz-string")?(0,Qr.decompressFromUTF16)(e):e;return t?JSON.parse(t).map((function(e){return Zr(Zr({},e),{lastAttempt:new Date(e.lastAttempt)})})):[]},ei=function(e){try{Ae("lz-string","true");var t=(0,Qr.compressToUTF16)(JSON.stringify(e));Ae(Yr,t)}catch(e){console.error("Failed to store events locally, forgetting about them...",e),Ae(Yr,"")}},ti=function(){return Hr(void 0,void 0,void 0,(function(){var e,t,n,r,i,o,a,s,l;return Gr(this,(function(u){switch(u.label){case 0:e=Xr(),u.label=1;case 1:u.trys.push([1,6,7,8]),t=Jr(e),n=t.next(),u.label=2;case 2:return n.done?[3,5]:(r=n.value,Number(new Date(r.lastAttempt))+6e4-Date.now()>0&&!r.tryImmediately?[3,4]:(r.attempts+=1,r.tryImmediately=!1,(i=ni(r.apiUrl,r.participantCode)).getHeaders()["X-Participant-Code"]?[4,i.postEvent(r.event,!1)]:(r.persisted=!0,[3,4])));case 3:u.sent()?r.persisted=!0:r.lastAttempt=new Date,u.label=4;case 4:return n=t.next(),[3,2];case 5:return[3,8];case 6:return o=u.sent(),s={error:o},[3,8];case 7:try{n&&!n.done&&(l=t.return)&&l.call(t)}finally{if(s)throw s.error}return[7];case 8:return a=e.filter((function(e){return!e.persisted})),ei(a),[2]}}))}))},ni=function(e,t){var n,r,i,o,a=null!==(r=null!==(n=_e("participantCode"))&&void 0!==n?n:t)&&void 0!==r?r:"",s=null!==(i=function(e){var t=sessionStorage.getItem(Te+e);if(t)return t;var n=sessionStorage.getItem(e);return n?(sessionStorage.setItem(Te+e,n),sessionStorage.removeItem(e),n):null}("sessionUuid"))&&void 0!==i?i:"",l=[],u=function(){return{"Content-Type":"application/json","X-Participant-Code":a}},c=he(e),p=c("POST"),f=c("GET"),d={createSession:function(){return Hr(this,void 0,void 0,(function(){var e;return Gr(this,(function(t){return o?[2,o]:(e=p("/api/session",{},u()),o=e,e.then((function(){o=void 0})).catch((function(e){console.error("Failed to create session:",e),o=void 0})),[2,e])}))}))},checkParticipantCode:function(e){return Hr(this,void 0,void 0,(function(){return Gr(this,(function(t){switch(t.label){case 0:return[4,p("/api/check-participant-code",{code:e},u())];case 1:return"Success"!==t.sent().kind?[2,!1]:[2,!0]}}))}))},setAuth:function(e){Ae("participantCode",e),a=e},getAuth:function(){return a},newSession:function(){return Hr(this,void 0,void 0,(function(){var e;return Gr(this,(function(t){switch(t.label){case 0:if(!a)throw new Error("Missing participant code!");return[4,this.createSession()];case 1:if("Success"===(e=t.sent()).kind)return n="sessionUuid",r=s=e.value.uuid,sessionStorage.removeItem(n),sessionStorage.setItem(Te+n,r),[2,e.value.uuid];throw new Error("Failed to create new session: "+e.message)}var n,r}))}))},getSession:function(){return""===s?void 0:s},getConfig:function(){return Hr(void 0,void 0,void 0,(function(){return Gr(this,(function(e){return[2,f("/api/config",{},u())]}))}))},ensureSession:function(){return Hr(this,void 0,void 0,(function(){return Gr(this,(function(e){switch(e.label){case 0:return""!==s?[2]:o?[4,o]:[3,2];case 1:case 3:return e.sent(),[2];case 2:return[4,this.newSession()]}}))}))},postEvent:function(t,n){var r;return Hr(this,void 0,void 0,(function(){var i,o,l;return Gr(this,(function(c){switch(c.label){case 0:return(i=u())["X-Participant-Code"]?((o=Zr(Zr({},t),{context:null!==(r=t.context)&&void 0!==r?r:document.referrer})).extensionVersion="3.0.0.9",o.tabActive=Kr,""!==o.sessionUuid?[3,2]:[4,this.ensureSession()]):(Se("Missing participant code!"),[2,!1]);case 1:c.sent(),o.sessionUuid=s,c.label=2;case 2:return n&&function(t){var n=Xr(),r={event:t,apiUrl:e,lastAttempt:new Date,persisted:!1,attempts:1,participantCode:a,tryImmediately:!0};n.push(r),ei(n)}(o),o.url||(o.url=window.location.href),[4,p("/api/event",o,i)];case 3:return"Success"===(l=c.sent()).kind||"Failure"===l.kind&&"EVENT_ALREADY_EXISTS_OK"===l.code?(function(e){var t=Xr().filter((function(t){return t.event.localUuid!==e.localUuid}));ei(t)}(o),[2,!0]):[2,!1]}}))}))},getHeaders:function(){return u()},logout:function(){var e,t;Pe("participantCode"),Pe(Yr),Ne("sessionUuid"),Ne("cfg"),a="",s="",function(){var e,t,n=Object.keys(localStorage);try{for(var r=be(n),i=r.next();!i.done;i=r.next()){var o=i.value;o.startsWith(Te)&&localStorage.removeItem(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}}(),function(){var e,t,n=Object.keys(sessionStorage);try{for(var r=be(n),i=r.next();!i.done;i=r.next()){var o=i.value;o.startsWith(Te)&&sessionStorage.removeItem(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}}();try{for(var n=Jr(l),r=n.next();!r.done;r=n.next())(0,r.value)()}catch(t){e={error:t}}finally{try{r&&!r.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}},sendPageView:function(){var e=new H;e.type=z.PAGE_VIEW,e.url=window.location.href,e.context||(e.context=document.referrer),d.postEvent(e,!0).catch((function(t){Se("Failed to send page view event",e.localUuid,"will be retried later on:",t)}))},setTabActive:function(e){Kr=e},getChannelSource:function(e){return void 0===e&&(e=!1),Hr(this,void 0,void 0,(function(){var t;return Gr(this,(function(n){switch(n.label){case 0:return[4,f("/api/participant-channel-source",e?{force:"true"}:{},u())];case 1:if("Success"!==(t=n.sent()).kind)throw new Error("Failed to get channel source: ".concat(t.message));return[2,t.value.channelId]}}))}))},addOnLogoutListener:function(e){l.push(e)}};return d};setInterval(ti,6e4),ti().catch((function(e){console.error("Failed to retry to post stored events",e)}));const ri={"production-server-url":"https://personalization-server.csail.mit.edu","development-server-url":"https://ytdpnl-dev.fmdj.fr"};var ii="production";if(console.log("NODE_ENV:","production"),!ce("".concat(ii,"-server-url"))(ri))throw new Error("Missing ".concat(ii,"-server-url in config.extension.ts"));var oi=ri["".concat(ii,"-server-url")];console.log("API URL:",oi);var ai=ni(oi),si=De.createContext(ai),li=(si.Provider,function(){return De.useContext(si)}),ui=function(){return ui=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},ui.apply(this,arguments)},ci=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},pi=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},fi=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},di=function(e){var t,n=e.loggedInExtension,r=e.loggedInYouTube,i=e.triggerUpdate,o=e.log,a=fi((0,De.useState)(!0),2),s=a[0],l=a[1],u=fi((0,De.useState)(),2),c=u[0],p=u[1],f=fi((0,De.useState)(null!==(t=_e("participantCode"))&&void 0!==t?t:""),2),d=f[0],h=f[1],y=li();if(n&&r)return null;if(!s)return null;var m=function(){l(!1),setTimeout((function(){l(!0)}),3e5)};return(0,De.useEffect)((function(){var e=function(e){"Escape"===e.key&&m()};return document.addEventListener("keydown",e),function(){document.removeEventListener("keydown",e)}}),[]),De.createElement(yn,{sx:{position:"absolute",zIndex:1e4,top:0,bottom:0,left:0,right:0,display:"flex",alignItems:"center",justifyContent:"center"},onClick:m},De.createElement(yn,{sx:{backgroundColor:Ar?"rgb(241, 241, 241)":"rgb(15, 15, 15)",color:Pr(),padding:4,borderRadius:4}},De.createElement(yn,{sx:{textAlign:"right"}},De.createElement(gr,{size:"large",onClick:m,sx:{color:Pr()}},De.createElement(_r,null))),De.createElement(Sr,{variant:"h4",sx:{m:2,color:Pr()}},"Welcome to the YouTube Experiment extension!"),!r&&De.createElement(yn,null,De.createElement(Sr,{sx:{m:2,color:Pr()}},"Please log in to YouTube to use the YouTube Experiment extension."),De.createElement(Sr,{onClick:m,sx:{color:Pr(),m:2,mb:4,fontSize:"1rem",cursor:"pointer",textDecoration:"underline"}},"You can close this window and use YouTube's login button.")),!n&&De.createElement(yn,{sx:{color:Pr(),p:2}},De.createElement(Sr,{sx:{color:Pr(),mb:1}},"Please log in to the extension with your participant code to use the YouTube Experiment extension."),De.createElement("form",{onSubmit:function(e){return ci(void 0,void 0,void 0,(function(){var t,n;return pi(this,(function(r){switch(r.label){case 0:return o("submitting extension login form"),e.preventDefault(),y.setAuth(d),[4,y.getConfig()];case 1:return"Success"!==(t=r.sent()).kind?(p("Failed to get configuration, please make sure your participant code is valid or try again later."),[2]):(n=t.value)?(y.newSession().then((function(e){o("New session created:",e),y.sendPageView()}),(function(e){console.error("Error creating new session:",e)})),i({config:n}),[2]):(p("No configuration found in server response :("),[2])}}))}))}},De.createElement(Sr,{sx:{color:Pr()}},"Participant code:"),De.createElement("input",{style:{display:"block",width:"100%",padding:"1rem",borderRadius:2,marginTop:2,marginBottom:2,border:"1px solid #ccc",outline:"none"},value:d,onChange:function(e){h(e.target.value)}}),De.createElement(Sr,{sx:{fontSize:"1rem",color:Pr(),mb:2}},"This is the code that has been give to you by e-mail."),De.createElement(yn,{sx:{mt:2}},De.createElement("button",{type:"submit",style:{padding:2}},"Submit")),De.createElement(qr,{message:c,type:"error",sx:{width:"100%",borderRadius:1,mt:2,mb:0}})))))};const hi=function(e){return t=void 0,n=void 0,i=function(){var t,n,r,i,o,a;return function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(s){switch(s.label){case 0:return t="string"==typeof e?"https://www.youtube.com/channel/".concat(e):e.url,[4,fetch(t,{credentials:"include"})];case 1:return[4,s.sent().text()];case 2:if(n=s.sent(),!(r=Me(n)))throw new Error("Could not find initial data script");if(!(i=null===(a=r.textContent)||void 0===a?void 0:a.replace("var ytInitialData = ","").replace(/;$/,"").trim()))throw new Error("Could not parse initial data");return o=JSON.parse(i),Se("initialData",o),[2,Oe(o)]}}))},new((r=void 0)||(r=Promise))((function(e,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,s)}l((i=i.apply(t,n||[])).next())}));var t,n,r,i};var yi=function(){return yi=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},yi.apply(this,arguments)},mi=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},gi=function(e){return"https://i.ytimg.com/vi/".concat(e,"/hq720.jpg")};const vi=function(e){var t=e.videoId,n=e.channelName,r=e.title,i=e.views,o=e.publishedSince,a=e.channelShortName,s=e.miniatureUrl,l=e.channelMiniatureUrl,u=e.hoverAnimationUrl,c=e.onClick,p=e.onPictureLoaded,f=e.onPictureErrored,d=mi((0,De.useState)(!1),2),h=d[0],y=d[1],m=(0,De.useRef)(null),g=[gi(t),s],v=mi((0,De.useState)(g[0]),2),b=v[0],w=v[1],x=h&&u?u:b;return(0,De.useEffect)((function(){var e,t,n,r;(e=void 0,t=void 0,n=void 0,r=function(){var e;return function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(t){switch(t.label){case 0:return[4,Ce(g[0])];case 1:return(e=t.sent())?null==p||p():null==f||f(),e||w(g[1]),[2]}}))},new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))).catch(console.error)})),De.createElement("section",{className:"style-scope ytd-rich-grid-row",onClick:c},De.createElement("div",{className:"style-scope ytd-rich-item-renderer",onMouseEnter:function(){y(!0)},onMouseLeave:function(){y(!1)}},De.createElement("div",{id:"thumbnail",className:"style-scope ytd-rich-grid-media"},De.createElement("div",{className:"style-scope ytd-rich-grid-media"},De.createElement("a",{className:"yt-simple-endpoint inline-block style-scope ytd-thumbnail",href:"/watch?v=".concat(t)},De.createElement("div",{className:"style-scope ytd-thumbnail"},!h&&De.createElement("img",{style:{backgroundColor:"transparent",borderRadius:12},className:"yt-core-image--fill-parent-height yt-core-image--fill-parent-width yt-core-image yt-core-image--content-mode-scale-aspect-fill yt-core-image--loaded",src:x,ref:m}),De.createElement("img",{style:yi({backgroundColor:"transparent",borderRadius:12,display:h?"block":"none"},m.current?{width:m.current.width,height:m.current.height}:{}),className:"yt-core-image--fill-parent-height yt-core-image--fill-parent-width yt-core-image yt-core-image--content-mode-scale-aspect-fill yt-core-image--loaded",src:x,onLoad:p,onError:f}))))),De.createElement("div",{id:"details",className:"style-scope ytd-rich-grid-media"},De.createElement("a",{id:"avatar-link",href:a,title:n,className:"yt-simple-endpoint style-scope ytd-rich-grid-media"},De.createElement("div",{className:"style-scope ytd-rich-grid-media no-transition"},De.createElement("img",{width:48,className:"style-scope yt-img-shadow",src:l,style:{borderRadius:"50%"}}))),De.createElement("div",{id:"meta",className:"style-scope ytd-rich-grid-media"},De.createElement("h3",{className:"style-scope ytd-rich-grid-media"},De.createElement("a",{className:"yt-simple-endpoint focus-on-expand style-scope ytd-rich-grid-media",href:"/watch?v=".concat(t),title:r},De.createElement("div",{className:"style-scope ytd-rich-grid-media"},De.createElement(Sr,{variant:"h3",component:"h3"},r)))),De.createElement("div",{className:"grid style-scope ytd-rich-grid-media byline-separated"},De.createElement("div",{id:"metadata",className:"style-scope ytd-video-meta-block",style:{flexDirection:"column"}},De.createElement("div",{id:"byline-container",className:"style-scope ytd-video-meta-block"},De.createElement("div",{className:"style-scope ytd-video-meta-block"},De.createElement("div",{id:"container",className:"style-scope ytd-channel-name"},De.createElement(Sr,{variant:"body2",component:"a"},n)))),De.createElement("div",{id:"metadata-line",className:"style-scope ytd-video-meta-block"},De.createElement(Sr,{variant:"body2",component:"span"},i," • ",o))))))))};var bi=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const wi=function(e){function t(t,n,r){var i=e.call(this)||this;return i.defaultRecommendations=t,i.replacementSource=n,i.shown=r,i.type=z.HOME_SHOWN,i}return bi(t,e),t}(H);var xi=function(){return xi=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},xi.apply(this,arguments)},Ei=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},Si=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},Mi=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},ki=function(e){var t,n=e.querySelector("#video-title");return n?null===(t=n.textContent)||void 0===t?void 0:t.trim():e.parentElement&&"content"!==e.id?ki(e.parentElement):void 0},Oi=function(e){return function(){return Ei(void 0,void 0,void 0,(function(){var t,n,r;return Si(this,(function(i){return t=0,r=(n=[1e3,2e3,3e3,5e3,8e3]).length,[2,new Promise((function(i,o){var a=function(){var s=Array.from(document.querySelectorAll('a.ytd-thumbnail[href^="/watch?v="]')).map((function(e){var t=function(e){var t=/\?v=(.+)$/.exec(e.href);return!!t&&("&",function(e){var t=e.indexOf("&");return-1===t?e:e.slice(0,t)})(t[1])}(e);if(!1!==t){var n=t,r=ki(e);if(r)return{videoId:n,title:r,url:e.href}}})).filter(Boolean);if(s.length>=3)i(s);else if(++t,e("error","failed to get home videos, attempt",t,"of",r),t<r){var l=n[t];e("trying again in",l,"ms"),setTimeout(a,l)}else o(new Error("failed to get home videos"))};a()}))]}))}))}},Ci=function(e,t){return function(n){return Ei(void 0,void 0,void 0,(function(){var r,i,o,a,s,l;return Si(this,(function(u){switch(u.label){case 0:r=function(r){return void 0===r&&(r=!1),Ei(void 0,void 0,void 0,(function(){var i,o,a,s,l,u;return Si(this,(function(c){switch(c.label){case 0:return r?[4,e.getChannelSource(r)]:[3,2];case 1:return o=c.sent(),[3,3];case 2:o=n,c.label=3;case 3:return t("trying to get the recommendations to inject from:",i=o),[4,hi(i)];case 4:return a=c.sent(),t("raw injection source channel data:",a),s=a.map((function(e){return e.recommendation})).slice(0,10),t("unfiltered recommendations:",s),l=s.map((function(e){return Ei(void 0,void 0,void 0,(function(){return Si(this,(function(t){switch(t.label){case 0:return[4,Ce(gi(e.videoId))];case 1:return[2,{ok:t.sent(),rec:e}]}}))}))})),[4,Promise.all(l)];case 5:return u=c.sent(),t("filtered recommendations:",u),[2,u.filter((function(e){return e.ok})).map((function(e){return e.rec}))]}}))}))},i=[],a=(o=[1e3,2e3,3e3,5e3,8e3]).length,s=0,l=function(){var e;return Si(this,(function(n){switch(n.label){case 0:return t("attempt",s+1,"of",a,"to get recommendations to inject"),++s,[4,r(s>=3)];case 1:return(i=n.sent()).length<3?(t("trying again in",e=o[s-1],"ms"),[4,new Promise((function(t){setTimeout(t,e)}))]):[3,3];case 2:n.sent(),n.label=3;case 3:return[2]}}))},u.label=1;case 1:return i.length<3&&s<a?[5,l()]:[3,3];case 2:return u.sent(),[3,1];case 3:return[2,i]}}))}))}};var Ti=function(){return Ti=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},Ti.apply(this,arguments)},_i=function(e){var t=e.loggedInExtension,n=e.triggerUpdate,r=li();return t?De.createElement(Vr,{api:r},De.createElement(Sr,{onClick:function(){r.logout(),n({config:void 0})},sx:{position:"fixed",bottom:"2rem",left:"1rem",zIndex:1e4,display:"block",color:"white",backgroundColor:"black",padding:"0.5rem",cursor:"pointer",textDecoration:"none"}},"log out of YouTube Experiment extension")):null};var Ai=function(e){var t=e.richThumbnail;if(ce("movingThumbnailRenderer")(t)&&"object"==typeof t.movingThumbnailRenderer&&t.movingThumbnailRenderer){var n=t.movingThumbnailRenderer;if(ce("movingThumbnailDetails")(n)&&"object"==typeof n.movingThumbnailDetails&&n.movingThumbnailDetails){var r=n.movingThumbnailDetails;if(ce("thumbnails")(r)&&Array.isArray(r.thumbnails)){var i=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}(r.thumbnails,1)[0];if(ce("url")(i)&&"string"==typeof i.url)return i.url}}}},Pi=function(e,t){return n=void 0,r=void 0,o=function(){var n,r,i,o,a,s,l,u,c,p,f,d;return function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(h){switch(h.label){case 0:return[4,fetch(e,{credentials:t?"include":"omit"})];case 1:return[4,h.sent().text()];case 2:if(n=h.sent(),!(r=Me(n)))throw new Error("Could not find initial data script");if(!(i=null===(d=r.textContent)||void 0===d?void 0:d.replace("var ytInitialData = ","").replace(/;$/,"").trim()))throw new Error("Could not parse initial data");if(o=JSON.parse(i),"object"!=typeof(a=o.contents)||!a)throw new Error("Could not find contents in initial data");if(!ce("twoColumnWatchNextResults")(a))throw new Error("Could not find twoColumnWatchNextResults in contents");if("object"!=typeof(s=a.twoColumnWatchNextResults)||!s)throw new Error("Could not find twoColumnWatchNextResults in contents");if(!ce("secondaryResults")(s))throw new Error("Could not find secondaryResults in twoColumnWatchNextResults");if("object"!=typeof(l=s.secondaryResults)||!l)throw new Error("Could not find secondaryResults in twoColumnWatchNextResults");if(!ce("secondaryResults")(l))throw new Error("Could not find secondaryResults in secondaryResults");if("object"!=typeof(u=l.secondaryResults)||!u)throw new Error("Could not find secondaryResults in secondaryResults");if(!ce("results")(u))throw new Error("Could not find results in secondaryResults");if(c=u.results,!Array.isArray(c))throw new Error("Could not find results in secondaryResults");return p=function(e,t){if(!t)return e;if(!Array.isArray(e))throw new Error("results is not an array");var n=e.find(ce("itemSectionRenderer"));if(!ce("itemSectionRenderer")(n))throw new Error("Could not find itemSectionRenderer in container");var r=n.itemSectionRenderer;if(!ce("contents")(r))throw new Error("Could not find contents in itemSectionRenderer");var i=r.contents;if(!Array.isArray(i))throw new Error("Could not find contents in itemSectionRenderer or it is not an array");return i}(c,t),f=p.map((function(e){if(ce("compactVideoRenderer")(e)){var t=e.compactVideoRenderer;if("object"==typeof t&&t&&ce("title")(t)&&"object"==typeof t.title&&t.title){var n=t.title;if(ce("simpleText")(n)&&"string"==typeof n.simpleText&&ce("videoId")(t)&&"string"==typeof t.videoId&&ce("longBylineText")(t)&&"object"==typeof t.longBylineText&&t.longBylineText){var r=t.longBylineText;if(ce("runs")(r)&&Array.isArray(r.runs)){var i=r.runs;if(0!==i.length&&ce("text")(i[0])&&"string"==typeof i[0].text&&ce("shortViewCountText")(t)&&"object"==typeof t.shortViewCountText&&t.shortViewCountText){var o=t.shortViewCountText;if(ce("simpleText")(o)&&"string"==typeof o.simpleText&&ce("publishedTimeText")(t)&&"object"==typeof t.publishedTimeText&&t.publishedTimeText){var a=t.publishedTimeText;if("object"==typeof a&&a&&ce("simpleText")(a)&&"string"==typeof a.simpleText)return{title:n.simpleText,videoId:t.videoId,url:"/watch?v=".concat(t.videoId),channelName:i[0].text,miniatureUrl:"https://i.ytimg.com/vi/".concat(t.videoId,"/hqdefault.jpg"),hoverAnimationUrl:Ai(t),views:o.simpleText,publishedSince:a.simpleText,personalization:"unknown"}}}}}}}})),[2,f.filter((function(e){return Boolean(e)}))]}}))},new((i=void 0)||(i=Promise))((function(e,t){function a(e){try{l(o.next(e))}catch(e){t(e)}}function s(e){try{l(o.throw(e))}catch(e){t(e)}}function l(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(a,s)}l((o=o.apply(n,r||[])).next())}));var n,r,i,o},Ni=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Ri=function(e){function t(t,n,r){var i=e.call(this)||this;return i.nonPersonalized=t,i.personalized=n,i.shown=r,i.type=z.RECOMMENDATIONS_SHOWN,i}return Ni(t,e),t}(H);var Ii=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},ji=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};var Li=[function(e){var t=e.api,n=e.getElement,r=e.triggerUpdate,i=e.log,o=document.createElement("div");o.id="ytdpnl-extension-login-app";var a=(0,Ue.s)(o);return{getName:function(){return"loginApp"},onUpdate:function(e){return ci(this,void 0,void 0,(function(){return pi(this,(function(s){switch(s.label){case 0:return document.querySelector(o.id)?[3,2]:[4,n("body")];case 1:s.sent().prepend(o),s.label=2;case 2:return function(e){var n=De.createElement(Vr,{api:t},De.createElement(di,ui({},ui(ui({},e),{triggerUpdate:r,log:i}))));a.render(n)}(e),[2,[o]]}}))}))},onDestroy:function(e){console.log("Destroying login app"),a.unmount(),e.remove()}}},function(e){var t=e.triggerUpdate,n=document.createElement("div");n.id="ytdpnl-extension-logout-app";var r=(0,Ue.s)(n);return{getName:function(){return"logoutApp"},onUpdate:function(e){return i=this,o=void 0,s=function(){return function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(i){return document.getElementById(n.id)||document.body.appendChild(n),function(e){r.render(De.createElement(_i,Ti({},e,{triggerUpdate:t})))}(e),[2,[n]]}))},new((a=void 0)||(a=Promise))((function(e,t){function n(e){try{l(s.next(e))}catch(e){t(e)}}function r(e){try{l(s.throw(e))}catch(e){t(e)}}function l(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a((function(e){e(i)}))).then(n,r)}l((s=s.apply(i,o||[])).next())}));var i,o,a,s},onDestroy:function(){}}},function(e){var t,n=e.api,r=e.log,i=[],o=[],a=[],s=[],l=!1,u=function(e,t){return function(n,r,i,o){var a=Array.from(document.querySelectorAll('a.ytd-thumbnail[href="/watch?v='.concat(n,'"]')));if(0!==a.length)if(a.length>1)console.error("found multiple links for",n);else{var s=Mi(a,1)[0],l=Ie("content")(s);if(l){var u=De.createElement(Vr,{api:e},De.createElement(vi,xi({},xi(xi({},r),{onClick:function(){return Ei(void 0,void 0,void 0,(function(){var n;return Si(this,(function(i){return(n=new Z).type=z.HOME_INJECTED_TILE_CLICKED,n.url=r.url,n.context=window.location.href,e.postEvent(n,!0).catch((function(e){t("failed to send home injected tile clicked event, will be retried",e)})),[2]}))}))},onPictureLoaded:i,onPictureErrored:o})))),c=(0,Ue.s)(l);return c.render(u),{elt:l,root:c}}console.error("could not find parent for",n)}else console.error("could not find link for",n)}}(n,r),c=function(){return Ei(void 0,void 0,void 0,(function(){var e;return Si(this,(function(t){return 0===s.length||0===i.length||0===o.length?[2,!1]:(e=new wi(o.slice(0,10),i,s),[2,n.postEvent(e,!0).then((function(){return r("home shown event sent successfully"),!0}),(function(e){return console.error("failed to send home shown event",e),!1}))])}))}))},p={getName:function(){return"homeApp"},onUpdate:function(e,p){var f,d;return Ei(this,void 0,void 0,(function(){var h;return Si(this,(function(y){return xe(null!==(f=e.url)&&void 0!==f?f:"")&&e.loggedInYouTube?(e.url!==p.url&&xe(null!==(d=e.url)&&void 0!==d?d:"")&&c().then((function(e){r(e?"home shown event triggered upon URL change":"home shown event not triggered upon URL change, app may not be ready")}),(function(e){console.error("failed to trigger home shown event upon URL change",e)})),l?(r("home app already initialized, returning..."),[2,[]]):e.url&&e.config&&e.config.channelSource?"control"===e.config.arm||1!==e.config.phase?[2,[]]:(r("Setting up home app",e),(h=e.config.channelSource)?h===t?(r("channel source unchanged, returning..."),[2,[]]):(r("got new channel source"),i.length>0?(r("injection source already exists, returning..."),[2,[]]):(function(e){return Ei(void 0,void 0,void 0,(function(){var p,f,d;return Si(this,(function(h){switch(h.label){case 0:return l=!0,r("fetching recommendations to inject..."),[4,Ci(n,r)(e)];case 1:return i=h.sent(),t=e,r("injection source data:",i),0!==o.length?[3,3]:[4,Oi(r)()];case 2:o=h.sent().splice(0,10),h.label=3;case 3:if(r("home videos:",o),o.length<3)return console.error("not enough videos to replace"),Re(),[2,[]];if(i.length<3)return console.error("not enough recommendations to inject"),Re(),[2,[]];if(s.length>0)return r("already replaced videos, returning...",{shown:s}),Re(),[2,[]];for(p=[],f=function(e){var t=o[e],n=i[e];if(!t||!n)throw new Error("video or replacement is undefined - should never happen");var l=new Promise((function(e,i){var o=u(t.videoId,n,e,i);o?(r("video",t,"replaced with",n,"successfully"),a.push(o),s.push(n)):(r("failed to replace video",t,"with",n),s.push(t))}));p.push(l)},d=0;d<3;++d)f(d);return s.push.apply(s,function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}([],Mi(o.slice(3)),!1)),r("waiting for all pictures to load..."),[4,Promise.allSettled(p)];case 4:return h.sent(),r("all pictures loaded"),Re(),c().then((function(e){e?r("home shown event triggered successfully upon app initialization"):console.error("home shown event not triggered upon app initialization, something went wrong")}),(function(e){console.error("failed to trigger home shown event upon update",e)})),[2,[]]}}))}))}(h).catch((function(e){Re(),console.error("failed to initialize home app",e)})),[2,[]])):(r("no channel source in state, returning..."),[2,[]])):[2,[]]):[2,[]]}))}))},onDestroy:function(e){r("element destroyed",e)}};return p},function(e){var t=e.api,n=e.log,r="",i=!1,o=!1,a={getName:function(){return"videoApp"},onUpdate:function(e){var a,s;return Ii(this,void 0,void 0,(function(){return ji(this,(function(l){if(i=null!==(a=e.loggedInYouTube)&&void 0!==a&&a,o=null!==(s=e.loggedInExtension)&&void 0!==s&&s,!we(e.url))return[2,[]];if(!i)return n("Not logged in to YouTube, skipping data collection"),[2,[]];if(!o)return n("Not logged in to the extension, skipping data collection"),[2,[]];if(e.url!==r){if(!(r=e.url))return n("No URL in state, skipping data collection - this is weird!"),[2,[]];n("URL changed to video page",r,"starting data collection"),u=r,Ii(void 0,void 0,void 0,(function(){var e,r,i,o;return ji(this,(function(a){switch(a.label){case 0:return e=window.location.href,n("Collecting data on video page",e),[4,Pi(e,!1)];case 1:return r=a.sent(),[4,Pi(e,!0)];case 2:return i=a.sent(),n("recommendations sample extracted",{href:e,defaultRecommendations:r,personalizedRecommendations:i}),o=new Ri(r,i,[]),n("sending recommendations event to server",o),t.postEvent(o,!0).catch((function(e){n("Failed to send recommendations event",o.localUuid,"will be retried later on:",e)})),[2]}}))})).then((function(){n("Data collection on",u,"complete")})).catch((function(e){n("Error collecting data on",u,e)}))}var u;return[2,[]]}))}))}};return a}];(function(e,t){return function(n){var r,i=[],o=[],a=Fe(),s={loggedInYouTube:"true"===_e("loggedInYouTube"),config:a,loggedInExtension:Boolean(a),url:location.href},l=0,u=0,c=0,p=function(e){var n=e.target.currentTime,r=n-c;c=n,r>0&&(l+=r),l-u>10&&(u=l,t("watch time:",l))};e.addOnLogoutListener((function(){b({config:void 0})}));var f,d=function(){if(r&&l>0){t("saving watch time for",r,"with",l,"seconds");var n=new J(l);n.url=r,e.postEvent(n,!0).then((function(){t("watch time event sent successfully")}),(function(e){console.error("failed to send watch time event",e)})),l=0,u=0}},h=function(){d()},y=function(e){if(we(e)){t("looking for a video element on",e);var n=document.querySelector("video");n?(t("video element found:",n),function(e,t){e.removeEventListener("timeupdate",p),e.addEventListener("timeupdate",p),r=t}(n,e),document.removeEventListener("unload",h),document.addEventListener("unload",h)):t("no video element found")}},m=function(){return Le(void 0,void 0,void 0,(function(){return Be(this,(function(t){return e.getConfig().then((function(e){"Success"===e.kind?b({config:e.value}):console.error("could not get config:",e.message)})).catch((function(e){console.error("error getting config:",e)})),[2]}))}))},g=new MutationObserver((function(n){var r;location.href!==f&&(e.sendPageView(),r=location.href,t("URL changed to",r),b({url:r}),m(),f=location.href),i=i.filter((function(e){var t=e.selector,n=e.resolve,r=e.timeout,i=document.querySelector(t);return!i||(n(i),clearTimeout(r),!1)}))})),v=function(e,t){return void 0===t&&(t=1e4),Le(void 0,void 0,void 0,(function(){var n;return Be(this,(function(r){return(n=document.querySelector(e))?[2,n]:[2,new Promise((function(n,r){var o=setTimeout((function(){r(new Error("Timeout waiting for element with selector: "+e))}),t);i.push({selector:e,resolve:n,timeout:o})}))]}))}))},b=function(e){try{!function(e){var n,r;t("new state received:",e);var i=je(je({},s),e);e.url!==s.url&&e.url&&(d(),y(e.url)),e.config&&(i.loggedInExtension=!0,Ae("config",JSON.stringify(e.config))),i.config?("control"===i.config.arm&&Re(),1!==i.config.phase&&Re()):Re(),i.loggedInYouTube||Re(),Object.prototype.hasOwnProperty.call(e,"config")&&!e.config&&(i.loggedInExtension=!1,Ae("config",""));var a=function(e){e.onUpdate(i,s).catch((function(t){Re(),console.error("Error updating sub-app",e.getName(),":",t)}))};try{for(var l=$e(o),u=l.next();!u.done;u=l.next())a(u.value)}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=l.return)&&r.call(l)}finally{if(n)throw n.error}}Object.assign(s,i)}(e)}catch(e){console.error("Error triggering apps update:",e),Re()}},w=function(){return Le(void 0,void 0,void 0,(function(){var r,i,a,l,u,c,p;return Be(this,(function(f){y(null!==(p=s.url)&&void 0!==p?p:""),v("yt-icon#logo-icon").then((function(e){t("YouTube logo found",e),e.addEventListener("click",(function(e){t("home link clicked"),e.preventDefault(),window.location.href="https://www.youtube.com/"}))}),(function(e){console.error("Error getting home link:",e)})),t("Starting extension with",n.length,"sub-apps"),t("Observing document for changes"),g.observe(document.documentElement,{childList:!0,subtree:!0});try{for(r=$e(n),i=r.next();!i.done;i=r.next())a=i.value,l=a({api:e,getElement:v,triggerUpdate:b,log:t}),o.push(l),b(s)}catch(e){u={error:e}}finally{try{i&&!i.done&&(c=r.return)&&c.call(r)}finally{if(u)throw u.error}}return ye(void 0,void 0,void 0,(function(){var e;return me(this,(function(t){return e=function(){return Boolean(document.querySelector("#avatar-btn"))?"yes":Boolean(document.querySelector('a[href^="https://accounts.google.com/ServiceLogin?service=youtube"]'))?"no":"maybe"},[2,new Promise((function(t){var n=e();if("maybe"===n){var r=new MutationObserver((function(){var n=e();"maybe"!==n&&(r.disconnect(),t(n))}));r.observe(document.documentElement,{childList:!0,subtree:!0})}else t(n)}))]}))})).then((function(e){var t="yes"===e;Ae("loggedInYouTube",t?"true":"false"),s.loggedInYouTube!==t&&b({loggedInYouTube:t})})).catch((function(e){console.error("error checking if logged in to YouTube",e)})),e.getAuth()&&(s.config||m(),e.newSession().then((function(e){t("New session created:",e)}),(function(e){console.error("Error creating new session:",e)}))),[2]}))}))};return{start:function(){return Le(void 0,void 0,void 0,(function(){var e;return Be(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,w()];case 1:return t.sent(),[3,3];case 2:return e=t.sent(),Re(),console.error("Failed to start extension:",e),[3,3];case 3:return[2]}}))}))}}}})(ai,Se)(Li).start().catch(console.error)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,