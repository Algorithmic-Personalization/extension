(()=>{"use strict";var e=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function l(e){try{c(o.next(e))}catch(e){i(e)}}function a(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,a)}c((o=o.apply(e,t||[])).next())}))},t=function(e,t){var n,o,r,i,l={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(l=0)),l;)try{if(n=1,o&&(r=2&a[0]?o.return:a[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,a[1])).done)return r;switch(o=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return l.label++,{value:a[1],done:!1};case 5:l.label++,o=a[1],a=[0];continue;case 7:a=l.ops.pop(),l.trys.pop();continue;default:if(!((r=(r=l.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){l=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){l.label=a[1];break}if(6===a[0]&&l.label<r[1]){l.label=r[1],r=a;break}if(r&&l.label<r[2]){l.label=r[2],l.ops.push(a);break}r[2]&&l.ops.pop(),l.trys.pop();continue}a=t.call(e,l)}catch(e){a=[6,e],o=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};e(void 0,void 0,void 0,(function(){return t(this,(function(n){switch(n.label){case 0:return[4,e(void 0,void 0,void 0,(function(){return t(this,(function(e){return[2,new Promise((function(e){var t=function(){return"/"===window.location.pathname&&Boolean(document.body)};if(t())e();else{var n=new MutationObserver((function(){t()&&(n.disconnect(),e())}));n.observe(document.documentElement,{childList:!0,subtree:!0})}}))]}))}))];case 1:return n.sent(),function(){var e,t=document.createElement("div");if(t.style.position="fixed",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%",t.style.backgroundColor="white",t.style.zIndex="100000",t.id="ytdpnl-loader","1"===localStorage.getItem("debug")){t.style.opacity=null!==(e=localStorage.getItem("opacity"))&&void 0!==e?e:"1";var n=document.createElement("button");n.type="button",n.style.margin="42px",n.textContent="Remove loader mask (this is only visible in debug mode)",n.addEventListener("click",(function(e){e.preventDefault(),t.remove()})),t.appendChild(n);var o=document.createElement("p");o.style.display="block",o.style.margin="42px",o.style.border="1px solid #ccc",o.style.backgroundColor="white",o.style.padding="12px",o.style.width="fit-content",o.style.fontWeight="bold",o.style.fontSize="20px",o.textContent='You can reduce the opacity of the mask by setting the variable "opacity" in localStorage. The value should be a number between 0 and 1.',t.appendChild(o)}document.body.appendChild(t),document.body.style.overflow="hidden"}(),console.log("The body is present"),[2]}}))})).catch((function(e){console.error("Failed to start loader:",e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGVyLW1hc2tlci5qcyIsIm1hcHBpbmdzIjoieTNDQThEYyxtQyxrREFDYixTQTNEOEIsbUMsMkJBQVksYUFBSUEsU0FBYyxTQUFBQyxHQUM1RCxJQUFNQyxFQUFZLFdBQU0sTUNFc0MsTUFBN0JDLE9BQU9DLFNBQVNDLFVETHRCQyxRQUFRQyxTQUFTQyxLQUdwQixFQUV4QixHQUFJTixJQUNIRCxRQURELENBS0EsSUFBTVEsRUFBVyxJQUFJQyxrQkFBaUIsV0FDakNSLE1BQ0hPLEVBQVNFLGFBQ1RWLElBRUYsSUFFQVEsRUFBU0csUUFBUUwsU0FBU00sZ0JBQWlCLENBQUNDLFdBQVcsRUFBTUMsU0FBUyxHLENBQ3ZFLEksc0JBMkNDLFNBekNxQixXLE1BQ2ZDLEVBQWFULFNBQVNVLGNBQWMsT0FVMUMsR0FUQUQsRUFBV0UsTUFBTUMsU0FBVyxRQUM1QkgsRUFBV0UsTUFBTUUsSUFBTSxJQUN2QkosRUFBV0UsTUFBTUcsS0FBTyxJQUN4QkwsRUFBV0UsTUFBTUksTUFBUSxPQUN6Qk4sRUFBV0UsTUFBTUssT0FBUyxPQUMxQlAsRUFBV0UsTUFBTU0sZ0JBQWtCLFFBQ25DUixFQUFXRSxNQUFNTyxPQUFTLFNBQzFCVCxFQUFXVSxHQ3lYWSxnQkE5WWdELE1BQWxDQyxhQUFhQyxRQUFRLFNEdUIzQyxDQUNkWixFQUFXRSxNQUFNVyxRQUF5QyxRQUEvQixFQUFBRixhQUFhQyxRQUFRLGtCQUFVLFFBQUksSUFDOUQsSUFBTUUsRUFBZ0J2QixTQUFTVSxjQUFjLFVBQzdDYSxFQUFjQyxLQUFPLFNBQ3JCRCxFQUFjWixNQUFNYyxPQUFTLE9BQzdCRixFQUFjRyxZQUFjLDBEQUM1QkgsRUFBY0ksaUJBQWlCLFNBQVMsU0FBQUMsR0FDdkNBLEVBQUVDLGlCQUNGcEIsRUFBV3FCLFFBQ1osSUFDQXJCLEVBQVdzQixZQUFZUixHQUV2QixJQUFNUyxFQUFXaEMsU0FBU1UsY0FBYyxLQUN4Q3NCLEVBQVNyQixNQUFNc0IsUUFBVSxRQUN6QkQsRUFBU3JCLE1BQU1jLE9BQVMsT0FDeEJPLEVBQVNyQixNQUFNdUIsT0FBUyxpQkFDeEJGLEVBQVNyQixNQUFNTSxnQkFBa0IsUUFDakNlLEVBQVNyQixNQUFNd0IsUUFBVSxPQUN6QkgsRUFBU3JCLE1BQU1JLE1BQVEsY0FDdkJpQixFQUFTckIsTUFBTXlCLFdBQWEsT0FDNUJKLEVBQVNyQixNQUFNMEIsU0FBVyxPQUMxQkwsRUFBU04sWUFBYywwSUFDdkJqQixFQUFXc0IsWUFBWUMsRSxDQUd4QmhDLFNBQVNDLEtBQUs4QixZQUFZdEIsR0FDMUJULFNBQVNDLEtBQUtVLE1BQU0yQixTQUFXLFFBQ2hDLENBSUNDLEdBRUFDLFFBQVFDLElBQUksdUIsV0FHQSxPQUFDLFNBQUFiLEdBQ2JZLFFBQVFFLE1BQU0sMEJBQTJCZCxFQUMxQyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veXRkcG5sLy4vc3JjL2xvYWRlci1tYXNrZXIudHMiLCJ3ZWJwYWNrOi8veXRkcG5sLy4vc3JjL2xpYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzRGVidWcsIGlzT25Ib21lUGFnZSwgbG9hZGVySWR9IGZyb20gJy4vbGliJztcblxuY29uc3QgaXNCb2R5UHJlc2VudCA9ICgpID0+IEJvb2xlYW4oZG9jdW1lbnQuYm9keSk7XG5cbmNvbnN0IHdhaXRGb3JIb21lUGFnZUFuZEJvZHkgPSBhc3luYyAoKSA9PiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcblx0Y29uc3QgY29uZGl0aW9uID0gKCkgPT4gaXNPbkhvbWVQYWdlKCkgJiYgaXNCb2R5UHJlc2VudCgpO1xuXG5cdGlmIChjb25kaXRpb24oKSkge1xuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcblx0XHRpZiAoY29uZGl0aW9uKCkpIHtcblx0XHRcdG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9XG5cdH0pO1xuXG5cdG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlfSk7XG59KTtcblxuY29uc3QgaW5zdGFsbExvYWRlciA9ICgpID0+IHtcblx0Y29uc3QgbWFza2luZ0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRtYXNraW5nRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcblx0bWFza2luZ0Rpdi5zdHlsZS50b3AgPSAnMCc7XG5cdG1hc2tpbmdEaXYuc3R5bGUubGVmdCA9ICcwJztcblx0bWFza2luZ0Rpdi5zdHlsZS53aWR0aCA9ICcxMDAlJztcblx0bWFza2luZ0Rpdi5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG5cdG1hc2tpbmdEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3doaXRlJztcblx0bWFza2luZ0Rpdi5zdHlsZS56SW5kZXggPSAnMTAwMDAwJztcblx0bWFza2luZ0Rpdi5pZCA9IGxvYWRlcklkO1xuXG5cdGlmIChpc0RlYnVnKCkpIHtcblx0XHRtYXNraW5nRGl2LnN0eWxlLm9wYWNpdHkgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnb3BhY2l0eScpID8/ICcxJztcblx0XHRjb25zdCByZW1vdmVNYXNrQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cdFx0cmVtb3ZlTWFza0J0bi50eXBlID0gJ2J1dHRvbic7XG5cdFx0cmVtb3ZlTWFza0J0bi5zdHlsZS5tYXJnaW4gPSAnNDJweCc7XG5cdFx0cmVtb3ZlTWFza0J0bi50ZXh0Q29udGVudCA9ICdSZW1vdmUgbG9hZGVyIG1hc2sgKHRoaXMgaXMgb25seSB2aXNpYmxlIGluIGRlYnVnIG1vZGUpJztcblx0XHRyZW1vdmVNYXNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRtYXNraW5nRGl2LnJlbW92ZSgpO1xuXHRcdH0pO1xuXHRcdG1hc2tpbmdEaXYuYXBwZW5kQ2hpbGQocmVtb3ZlTWFza0J0bik7XG5cblx0XHRjb25zdCBoZWxwVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblx0XHRoZWxwVGV4dC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0XHRoZWxwVGV4dC5zdHlsZS5tYXJnaW4gPSAnNDJweCc7XG5cdFx0aGVscFRleHQuc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCAjY2NjJztcblx0XHRoZWxwVGV4dC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnd2hpdGUnO1xuXHRcdGhlbHBUZXh0LnN0eWxlLnBhZGRpbmcgPSAnMTJweCc7XG5cdFx0aGVscFRleHQuc3R5bGUud2lkdGggPSAnZml0LWNvbnRlbnQnO1xuXHRcdGhlbHBUZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7XG5cdFx0aGVscFRleHQuc3R5bGUuZm9udFNpemUgPSAnMjBweCc7XG5cdFx0aGVscFRleHQudGV4dENvbnRlbnQgPSAnWW91IGNhbiByZWR1Y2UgdGhlIG9wYWNpdHkgb2YgdGhlIG1hc2sgYnkgc2V0dGluZyB0aGUgdmFyaWFibGUgXCJvcGFjaXR5XCIgaW4gbG9jYWxTdG9yYWdlLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMS4nO1xuXHRcdG1hc2tpbmdEaXYuYXBwZW5kQ2hpbGQoaGVscFRleHQpO1xuXHR9XG5cblx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtYXNraW5nRGl2KTtcblx0ZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xufTtcblxuY29uc3Qgc3RhcnQgPSBhc3luYyAoKSA9PiB7XG5cdGF3YWl0IHdhaXRGb3JIb21lUGFnZUFuZEJvZHkoKTtcblx0aW5zdGFsbExvYWRlcigpO1xuXG5cdGNvbnNvbGUubG9nKCdUaGUgYm9keSBpcyBwcmVzZW50Jyk7XG59O1xuXG5zdGFydCgpLmNhdGNoKGUgPT4ge1xuXHRjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc3RhcnQgbG9hZGVyOicsIGUpO1xufSk7XG4iLCJpbXBvcnQgdHlwZSBSZWNvbW1lbmRhdGlvbiBmcm9tICcuL2NvbW1vbi90eXBlcy9SZWNvbW1lbmRhdGlvbic7XG5pbXBvcnQge2dldH0gZnJvbSAnLi9jb21tb24vdXRpbCc7XG5cbmV4cG9ydCBjb25zdCBpc09uVmlkZW9QYWdlID0gKCkgPT4gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lID09PSAnL3dhdGNoJztcbmV4cG9ydCBjb25zdCBpc1ZpZGVvUGFnZSA9ICh1cmw/OiBzdHJpbmcpOiB1cmwgaXMgc3RyaW5nID0+IEJvb2xlYW4oXG5cdHVybCAmJiBuZXcgVVJMKHVybCkucGF0aG5hbWUuc3RhcnRzV2l0aCgnL3dhdGNoJyksXG4pO1xuZXhwb3J0IGNvbnN0IGlzT25Ib21lUGFnZSA9ICgpID0+IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9PT0gJy8nO1xuXG5leHBvcnQgY29uc3QgZGVidWcgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JztcbmV4cG9ydCBjb25zdCBpc0RlYnVnID0gKCkgPT4gZGVidWcgfHwgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJykgPT09ICcxJztcblxuZXhwb3J0IGNvbnN0IGxvZyA9ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuXHRpZiAoIWlzRGVidWcoKSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChhcmdzLmxlbmd0aCA+IDAgJiYgYXJnc1swXSA9PT0gJ2Vycm9yJykge1xuXHRcdGNvbnNvbGUuZXJyb3IoYXJnc1swXSk7XG5cdFx0Y29uc29sZS5sb2coLi4uYXJncy5zbGljZSgxKSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc29sZS5sb2coLi4uYXJncyk7XG59O1xuXG5leHBvcnQgdHlwZSBWZXJzaW9uRGVzY3JpcHRvciA9IHtcblx0dmVyc2lvbjogc3RyaW5nO1xuXHR1cGRhdGVfbGluazogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgVXBkYXRlTWFuaWZlc3QgPSB7XG5cdGFkZG9uczogUmVjb3JkPHN0cmluZywge1xuXHRcdHVwZGF0ZXM6IFZlcnNpb25EZXNjcmlwdG9yW107XG5cdH0+O1xufTtcblxuZXhwb3J0IGNvbnN0IGV4dHJhY3RZdEluaXRpYWxEYXRhID0gKHJhd1BhZ2VIdG1sOiBzdHJpbmcpID0+IHtcblx0Y29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXHRjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHJhd1BhZ2VIdG1sLCAndGV4dC9odG1sJyk7XG5cdGNvbnN0IHNjcmlwdHMgPSBBcnJheS5mcm9tKGRvYy5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnKSk7XG5cblx0cmV0dXJuIHNjcmlwdHMuZmluZChzY3JpcHQgPT4ge1xuXHRcdGNvbnN0IHt0ZXh0Q29udGVudH0gPSBzY3JpcHQ7XG5cblx0XHRpZiAodGV4dENvbnRlbnQpIHtcblx0XHRcdHJldHVybiB0ZXh0Q29udGVudC50cmltU3RhcnQoKS5zdGFydHNXaXRoKCd2YXIgeXRJbml0aWFsRGF0YSA9ICcpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSk7XG59O1xuXG5leHBvcnQgdHlwZSBUcmVlQ2FsbGJhY2sgPSAobm9kZTogdW5rbm93biwgcGF0aDogc3RyaW5nW10sIGZ1bGxPYmplY3Q/OiB1bmtub3duKSA9PiAncmVjdXJzZScgfCAnc3RvcCc7XG5cbmV4cG9ydCBjb25zdCB3YWxrVHJlZSA9IChjYjogVHJlZUNhbGxiYWNrKSA9PiAobm9kZTogdW5rbm93bikgPT4ge1xuXHRjb25zdCB3YWxrID0gKG5vZGU6IHVua25vd24sIHBhdGg6IHN0cmluZ1tdLCBmdWxsT2JqZWN0OiB1bmtub3duKSA9PiB7XG5cdFx0Y29uc3QgYW5kVGhlbiA9IGNiKG5vZGUsIHBhdGgsIGZ1bGxPYmplY3QpO1xuXG5cdFx0aWYgKGFuZFRoZW4gPT09ICdzdG9wJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChub2RlID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcblx0XHRcdGZvciAoY29uc3QgW2luZGV4LCB2YWx1ZV0gb2Ygbm9kZS5lbnRyaWVzKCkpIHtcblx0XHRcdFx0d2Fsayh2YWx1ZSwgWy4uLnBhdGgsIGluZGV4LnRvU3RyaW5nKCldLCBmdWxsT2JqZWN0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG5vZGUpKSB7XG5cdFx0XHRcdHdhbGsodmFsdWUsIFsuLi5wYXRoLCBrZXldLCBmdWxsT2JqZWN0KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0d2Fsayhub2RlLCBbXSwgbm9kZSk7XG59O1xuXG5leHBvcnQgdHlwZSBDaGFubmVsUmVjb21tZW5kYXRpb24gPSB7XG5cdHRpdGxlOiBzdHJpbmc7XG5cdHBhdGg6IHN0cmluZ1tdO1xuXHRyZWNvbW1lbmRhdGlvbjogUmVjb21tZW5kYXRpb247XG5cdHJhd05vZGU6IHVua25vd247XG59O1xuXG5jb25zdCBnZXRNaW5pYXR1cmVVcmwgPSAobm9kZTogdW5rbm93bikgPT4ge1xuXHRpZiAodHlwZW9mIG5vZGUgIT09ICdvYmplY3QnIHx8IG5vZGUgPT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbm9kZScpO1xuXHR9XG5cblx0Y29uc3QgdmlkZW9JZCA9IGdldChbJ3ZpZGVvSWQnXSkobm9kZSkgYXMgc3RyaW5nO1xuXG5cdGNvbnN0IGRlZmF1bHRVcmwgPSBgaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8ke3ZpZGVvSWR9L2hxZGVmYXVsdC5qcGdgO1xuXG5cdGNvbnN0IHRodW1ibmFpbHMgPSBnZXQoWyd0aHVtYm5haWwnLCAndGh1bWJuYWlscyddKShub2RlKSBhcyBBcnJheTx7dXJsOiBzdHJpbmc7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyfT47XG5cblx0aWYgKCF0aHVtYm5haWxzKSB7XG5cdFx0cmV0dXJuIGRlZmF1bHRVcmw7XG5cdH1cblxuXHRjb25zdCBzb3J0ZWRUaHVtYm5haWxzID0gdGh1bWJuYWlscy5zb3J0KChhLCBiKSA9PiAoYi53aWR0aCAqIGIuaGVpZ2h0KSAtIChhLndpZHRoICogYS5oZWlnaHQpKTtcblxuXHRyZXR1cm4gc29ydGVkVGh1bWJuYWlsc1swXS51cmw7XG59O1xuXG5leHBvcnQgY29uc3QgZXh0cmFjdFJlY29tbWVuZGF0aW9ucyA9IChcblx0aW5pdGlhbERhdGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuKTogQ2hhbm5lbFJlY29tbWVuZGF0aW9uW10gPT4ge1xuXHRjb25zdCByZWNvbW1lbmRhdGlvbnM6IENoYW5uZWxSZWNvbW1lbmRhdGlvbltdID0gW107XG5cblx0Y29uc3QgY2I6IFRyZWVDYWxsYmFjayA9IChub2RlLCBwYXRoLCBmdWxsT2JqZWN0KSA9PiB7XG5cdFx0aWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gJ3JlY3Vyc2UnO1xuXHRcdH1cblxuXHRcdGNvbnN0IGdldFRpdGxlID0gKCkgPT4ge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmV0dXJuIGdldChbJ3RpdGxlJywgJ3J1bnMnLCAnMCcsICd0ZXh0J10pKG5vZGUpIGFzIHN0cmluZztcblx0XHRcdH0gY2F0Y2gge1xuXHRcdFx0XHRyZXR1cm4gZ2V0KFsndGl0bGUnLCAnc2ltcGxlVGV4dCddKShub2RlKSBhcyBzdHJpbmc7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGNvbnN0IGxhc3RLZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG5cblx0XHRpZiAobGFzdEtleSA9PT0gJ3ZpZGVvUmVuZGVyZXInKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCB0aXRsZSA9IGdldFRpdGxlKCk7XG5cblx0XHRcdFx0Y29uc3QgdmlkZW9JZCA9IGdldChbJ3ZpZGVvSWQnXSkobm9kZSkgYXMgc3RyaW5nO1xuXG5cdFx0XHRcdGNvbnN0IGNoYW5uZWxNaW5pYXR1cmVVcmwgPSBnZXQoW1xuXHRcdFx0XHRcdCdjaGFubmVsVGh1bWJuYWlsU3VwcG9ydGVkUmVuZGVyZXJzJyxcblx0XHRcdFx0XHQnY2hhbm5lbFRodW1ibmFpbFdpdGhMaW5rUmVuZGVyZXInLFxuXHRcdFx0XHRcdCd0aHVtYm5haWwnLFxuXHRcdFx0XHRcdCd0aHVtYm5haWxzJyxcblx0XHRcdFx0XHQnMCcsXG5cdFx0XHRcdFx0J3VybCcsXG5cdFx0XHRcdF0pKG5vZGUpIGFzIHN0cmluZztcblxuXHRcdFx0XHRjb25zdCBjaGFubmVsU2hvcnROYW1lID0gZ2V0KFtcblx0XHRcdFx0XHQnb3duZXJUZXh0Jyxcblx0XHRcdFx0XHQncnVucycsXG5cdFx0XHRcdFx0JzAnLFxuXHRcdFx0XHRcdCduYXZpZ2F0aW9uRW5kcG9pbnQnLFxuXHRcdFx0XHRcdCdicm93c2VFbmRwb2ludCcsXG5cdFx0XHRcdFx0J2Nhbm9uaWNhbEJhc2VVcmwnLFxuXHRcdFx0XHRdKShub2RlKSBhcyBzdHJpbmc7XG5cblx0XHRcdFx0Y29uc3QgZ2V0SG92ZXJBbmltYXRpb25VcmwgPSAoKSA9PiB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHJldHVybiBnZXQoW1xuXHRcdFx0XHRcdFx0XHQncmljaFRodW1ibmFpbCcsXG5cdFx0XHRcdFx0XHRcdCdtb3ZpbmdUaHVtYm5haWxSZW5kZXJlcicsXG5cdFx0XHRcdFx0XHRcdCdtb3ZpbmdUaHVtYm5haWxEZXRhaWxzJyxcblx0XHRcdFx0XHRcdFx0J3RodW1ibmFpbHMnLFxuXHRcdFx0XHRcdFx0XHQnMCcsXG5cdFx0XHRcdFx0XHRcdCd1cmwnLFxuXHRcdFx0XHRcdFx0XSkobm9kZSkgYXMgc3RyaW5nO1xuXHRcdFx0XHRcdH0gY2F0Y2gge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Y29uc3QgbWluaWF0dXJlVXJsID0gZ2V0TWluaWF0dXJlVXJsKG5vZGUpO1xuXG5cdFx0XHRcdGNvbnN0IHJlY29tbWVuZGF0aW9uOiBSZWNvbW1lbmRhdGlvbiA9IHtcblx0XHRcdFx0XHR2aWRlb0lkLFxuXHRcdFx0XHRcdHRpdGxlLFxuXHRcdFx0XHRcdHVybDogYGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9JHt2aWRlb0lkfWAsXG5cdFx0XHRcdFx0Y2hhbm5lbE5hbWU6IGdldChbJ2xvbmdCeWxpbmVUZXh0JywgJ3J1bnMnLCAnMCcsICd0ZXh0J10pKG5vZGUpIGFzIHN0cmluZyxcblx0XHRcdFx0XHR2aWV3czogZ2V0KFsnc2hvcnRWaWV3Q291bnRUZXh0JywgJ3NpbXBsZVRleHQnXSkobm9kZSkgYXMgc3RyaW5nLFxuXHRcdFx0XHRcdHB1Ymxpc2hlZFNpbmNlOiBnZXQoWydwdWJsaXNoZWRUaW1lVGV4dCcsICdzaW1wbGVUZXh0J10pKG5vZGUpIGFzIHN0cmluZyxcblx0XHRcdFx0XHRtaW5pYXR1cmVVcmwsXG5cdFx0XHRcdFx0cGVyc29uYWxpemF0aW9uOiAncGVyc29uYWxpemVkJyxcblx0XHRcdFx0XHRjaGFubmVsTWluaWF0dXJlVXJsLFxuXHRcdFx0XHRcdGNoYW5uZWxTaG9ydE5hbWUsXG5cdFx0XHRcdFx0aG92ZXJBbmltYXRpb25Vcmw6IGdldEhvdmVyQW5pbWF0aW9uVXJsKCksXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0cmVjb21tZW5kYXRpb25zLnB1c2goe1xuXHRcdFx0XHRcdHRpdGxlLFxuXHRcdFx0XHRcdHBhdGgsXG5cdFx0XHRcdFx0cmVjb21tZW5kYXRpb24sXG5cdFx0XHRcdFx0cmF3Tm9kZTogbm9kZSxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmV0dXJuICdzdG9wJztcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdGxvZygnZXJyb3InLCAncGFyc2luZyB2aWRlb1JlbmRlcmVyJywge3BhdGgsIG5vZGUsIGVycm9yfSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGxhc3RLZXkgPT09ICdncmlkVmlkZW9SZW5kZXJlcicpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IHZpZGVvSWQgPSBnZXQoWyd2aWRlb0lkJ10pKG5vZGUpIGFzIHN0cmluZztcblxuXHRcdFx0XHRjb25zdCB0aXRsZSA9IGdldFRpdGxlKCk7XG5cblx0XHRcdFx0Y29uc3QgY2hhbm5lbE5hbWUgPSBnZXQoW1xuXHRcdFx0XHRcdCdtZXRhZGF0YScsXG5cdFx0XHRcdFx0J2NoYW5uZWxNZXRhZGF0YVJlbmRlcmVyJyxcblx0XHRcdFx0XHQndGl0bGUnLFxuXHRcdFx0XHRdKShmdWxsT2JqZWN0KSBhcyBzdHJpbmc7XG5cblx0XHRcdFx0Y29uc3QgY2hhbm5lbFZhbml0eVVybCA9IGdldChbXG5cdFx0XHRcdFx0J21ldGFkYXRhJyxcblx0XHRcdFx0XHQnY2hhbm5lbE1ldGFkYXRhUmVuZGVyZXInLFxuXHRcdFx0XHRcdCd2YW5pdHlDaGFubmVsVXJsJyxcblx0XHRcdFx0XSkoZnVsbE9iamVjdCkgYXMgc3RyaW5nO1xuXG5cdFx0XHRcdGNvbnN0IHBhcnRzT2ZDaGFuZWxVcmwgPSBjaGFubmVsVmFuaXR5VXJsLnNwbGl0KCcvJyk7XG5cblx0XHRcdFx0Y29uc3QgY2hhbm5lbFNob3J0TmFtZSA9IHBhcnRzT2ZDaGFuZWxVcmxbcGFydHNPZkNoYW5lbFVybC5sZW5ndGggLSAxXTtcblxuXHRcdFx0XHRjb25zdCByZWNvbW1lbmRhdGlvbjogUmVjb21tZW5kYXRpb24gPSB7XG5cdFx0XHRcdFx0dGl0bGUsXG5cdFx0XHRcdFx0dXJsOiBgaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0ke3ZpZGVvSWR9YCxcblx0XHRcdFx0XHR2aWRlb0lkLFxuXHRcdFx0XHRcdG1pbmlhdHVyZVVybDogZ2V0TWluaWF0dXJlVXJsKG5vZGUpLFxuXHRcdFx0XHRcdGNoYW5uZWxOYW1lLFxuXHRcdFx0XHRcdHZpZXdzOiBnZXQoWyd2aWV3Q291bnRUZXh0JywgJ3NpbXBsZVRleHQnXSkobm9kZSkgYXMgc3RyaW5nLFxuXHRcdFx0XHRcdHB1Ymxpc2hlZFNpbmNlOiBnZXQoWydwdWJsaXNoZWRUaW1lVGV4dCcsICdzaW1wbGVUZXh0J10pKG5vZGUpIGFzIHN0cmluZyxcblx0XHRcdFx0XHRwZXJzb25hbGl6YXRpb246ICdwZXJzb25hbGl6ZWQnLFxuXHRcdFx0XHRcdGhvdmVyQW5pbWF0aW9uVXJsOiBnZXQoW1xuXHRcdFx0XHRcdFx0J3JpY2hUaHVtYm5haWwnLFxuXHRcdFx0XHRcdFx0J21vdmluZ1RodW1ibmFpbFJlbmRlcmVyJyxcblx0XHRcdFx0XHRcdCdtb3ZpbmdUaHVtYm5haWxEZXRhaWxzJyxcblx0XHRcdFx0XHRcdCd0aHVtYm5haWxzJyxcblx0XHRcdFx0XHRcdCcwJyxcblx0XHRcdFx0XHRcdCd1cmwnLFxuXHRcdFx0XHRcdF0pKG5vZGUpIGFzIHN0cmluZyxcblx0XHRcdFx0XHRjaGFubmVsTWluaWF0dXJlVXJsOiBnZXQoW1xuXHRcdFx0XHRcdFx0J21ldGFkYXRhJyxcblx0XHRcdFx0XHRcdCdjaGFubmVsTWV0YWRhdGFSZW5kZXJlcicsXG5cdFx0XHRcdFx0XHQnYXZhdGFyJyxcblx0XHRcdFx0XHRcdCd0aHVtYm5haWxzJyxcblx0XHRcdFx0XHRcdCcwJyxcblx0XHRcdFx0XHRcdCd1cmwnLFxuXHRcdFx0XHRcdF0pKGZ1bGxPYmplY3QpIGFzIHN0cmluZyxcblx0XHRcdFx0XHRjaGFubmVsU2hvcnROYW1lLFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcblx0XHRcdFx0XHR0aXRsZTogcmVjb21tZW5kYXRpb24udGl0bGUsXG5cdFx0XHRcdFx0cGF0aCxcblx0XHRcdFx0XHRyZWNvbW1lbmRhdGlvbixcblx0XHRcdFx0XHRyYXdOb2RlOiBub2RlLFxuXHRcdFx0XHR9KTtcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdGxvZygnZXJyb3InLCAncGFyc2luZyBncmlkVmlkZW9SZW5kZXJlcicsIHtwYXRoLCBub2RlLCBlcnJvcn0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gJ3N0b3AnO1xuXHRcdH1cblxuXHRcdHJldHVybiAncmVjdXJzZSc7XG5cdH07XG5cblx0d2Fsa1RyZWUoY2IpKGluaXRpYWxEYXRhKTtcblxuXHRyZXR1cm4gcmVjb21tZW5kYXRpb25zO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQ2hyb21lID0gKCkgPT4gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnQ2hyb21lJyk7XG5cbmV4cG9ydCBjb25zdCBpbWFnZUV4aXN0cyA9IGFzeW5jICh1cmw6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuXHRpZiAoaXNDaHJvbWUoKSkge1xuXHRcdGNvbnN0IHIgPSBhd2FpdCBmZXRjaCh1cmwsIHttZXRob2Q6ICdIRUFEJ30pO1xuXHRcdHJldHVybiByLm9rO1xuXHR9XG5cblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG5cdFx0XHRpbWcub25sb2FkID0gKCkgPT4ge1xuXHRcdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGltZyk7XG5cdFx0XHRcdHJlc29sdmUodHJ1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0XHRpbWcub25lcnJvciA9ICgpID0+IHtcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpbWcpO1xuXHRcdFx0XHRyZXNvbHZlKGZhbHNlKTtcblx0XHRcdH07XG5cblx0XHRcdGltZy5zdHlsZS53aWR0aCA9ICcxcHgnO1xuXHRcdFx0aW1nLnN0eWxlLmhlaWdodCA9ICcxcHgnO1xuXG5cdFx0XHRpbWcuc3JjID0gdXJsO1xuXG5cdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGltZyk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0fVxuXHR9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0xvZ2dlZEluID0gKCkgPT4gQm9vbGVhbihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXZhdGFyLWJ0bicpKTtcblxuZXhwb3J0IGNvbnN0IGlzTm90TG9nZ2VkSW4gPSAoKSA9PiBCb29sZWFuKFxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdhW2hyZWZePVwiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL1NlcnZpY2VMb2dpbj9zZXJ2aWNlPXlvdXR1YmVcIl0nKSxcbik7XG5cbmV4cG9ydCB0eXBlIFJlcyA9ICd5ZXMnIHwgJ25vJyB8ICdtYXliZSc7XG5cbmV4cG9ydCBjb25zdCBpc0xvZ2dlZEluRm9yU3VyZSA9IGFzeW5jICgpOiBQcm9taXNlPFJlcz4gPT4ge1xuXHRjb25zdCBjaGVjayA9ICgpOiBSZXMgPT4ge1xuXHRcdGlmIChpc0xvZ2dlZEluKCkpIHtcblx0XHRcdHJldHVybiAneWVzJztcblx0XHR9XG5cblx0XHRpZiAoaXNOb3RMb2dnZWRJbigpKSB7XG5cdFx0XHRyZXR1cm4gJ25vJztcblx0XHR9XG5cblx0XHRyZXR1cm4gJ21heWJlJztcblx0fTtcblxuXHRyZXR1cm4gbmV3IFByb21pc2U8UmVzPihyZXNvbHZlID0+IHtcblx0XHRjb25zdCByZXMgPSBjaGVjaygpO1xuXG5cdFx0aWYgKHJlcyAhPT0gJ21heWJlJykge1xuXHRcdFx0cmVzb2x2ZShyZXMpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xuXHRcdFx0Y29uc3QgcmVzID0gY2hlY2soKTtcblxuXHRcdFx0aWYgKHJlcyAhPT0gJ21heWJlJykge1xuXHRcdFx0XHRvYnNlcnZlci5kaXNjb25uZWN0KCk7XG5cdFx0XHRcdHJlc29sdmUocmVzKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlfSk7XG5cdH0pO1xufTtcblxuY29uc3QgbmFtZXNwYWNlID0gJ3l0ZHBubC1leHRlbnNpb24tJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmV4cG9ydCBjb25zdCBnZXRGcm9tTG9jYWxTdG9yYWdlID0gKGtleTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCA9PiB7XG5cdGNvbnN0IG5ld0Zvcm1hdCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKG5hbWVzcGFjZSArIGtleSk7XG5cblx0aWYgKG5ld0Zvcm1hdCkge1xuXHRcdHJldHVybiBuZXdGb3JtYXQ7XG5cdH1cblxuXHRjb25zdCBvbGRGb3JtYXQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuXG5cdGlmIChvbGRGb3JtYXQpIHtcblx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lc3BhY2UgKyBrZXksIG9sZEZvcm1hdCk7XG5cdFx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcblxuXHRcdHJldHVybiBvbGRGb3JtYXQ7XG5cdH1cblxuXHRyZXR1cm4gbnVsbDtcbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG5leHBvcnQgY29uc3QgZ2V0RnJvbVNlc3Npb25TdG9yYWdlID0gKGtleTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCA9PiB7XG5cdGNvbnN0IG5ld0Zvcm1hdCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0obmFtZXNwYWNlICsga2V5KTtcblxuXHRpZiAobmV3Rm9ybWF0KSB7XG5cdFx0cmV0dXJuIG5ld0Zvcm1hdDtcblx0fVxuXG5cdGNvbnN0IG9sZEZvcm1hdCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcblxuXHRpZiAob2xkRm9ybWF0KSB7XG5cdFx0c2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShuYW1lc3BhY2UgKyBrZXksIG9sZEZvcm1hdCk7XG5cdFx0c2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuXG5cdFx0cmV0dXJuIG9sZEZvcm1hdDtcblx0fVxuXG5cdHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhdmVUb0xvY2FsU3RvcmFnZSA9IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4ge1xuXHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuXHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lc3BhY2UgKyBrZXksIHZhbHVlKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzYXZlVG9TZXNzaW9uU3RvcmFnZSA9IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4ge1xuXHRzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG5cdHNlc3Npb25TdG9yYWdlLnNldEl0ZW0obmFtZXNwYWNlICsga2V5LCB2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgZGVsZXRlRnJvbUxvY2FsU3RvcmFnZSA9IChrZXk6IHN0cmluZykgPT4ge1xuXHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuXHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShuYW1lc3BhY2UgKyBrZXkpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlbGV0ZUZyb21TZXNzaW9uU3RvcmFnZSA9IChrZXk6IHN0cmluZykgPT4ge1xuXHRzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG5cdHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0obmFtZXNwYWNlICsga2V5KTtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2FkZXJJZCA9ICd5dGRwbmwtbG9hZGVyJztcbiJdLCJuYW1lcyI6WyJQcm9taXNlIiwicmVzb2x2ZSIsImNvbmRpdGlvbiIsIndpbmRvdyIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJCb29sZWFuIiwiZG9jdW1lbnQiLCJib2R5Iiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiZGlzY29ubmVjdCIsIm9ic2VydmUiLCJkb2N1bWVudEVsZW1lbnQiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwibWFza2luZ0RpdiIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwiYmFja2dyb3VuZENvbG9yIiwiekluZGV4IiwiaWQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwib3BhY2l0eSIsInJlbW92ZU1hc2tCdG4iLCJ0eXBlIiwibWFyZ2luIiwidGV4dENvbnRlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwicmVtb3ZlIiwiYXBwZW5kQ2hpbGQiLCJoZWxwVGV4dCIsImRpc3BsYXkiLCJib3JkZXIiLCJwYWRkaW5nIiwiZm9udFdlaWdodCIsImZvbnRTaXplIiwib3ZlcmZsb3ciLCJpbnN0YWxsTG9hZGVyIiwiY29uc29sZSIsImxvZyIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==